
E220_900T22D_STM32_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1cc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a3a4  0800a3a4  0000b3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a42c  0800a42c  0000c184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a42c  0800a42c  0000b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a434  0800a434  0000c184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a434  0800a434  0000b434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a438  0800a438  0000b438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800a43c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001838  20000184  0800a5c0  0000c184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  0800a5c0  0000c9bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d5f  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405a  00000000  00000000  00025f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00029f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d73  00000000  00000000  0002b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020544  00000000  00000000  0002bebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001833f  00000000  00000000  0004c3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc172  00000000  00000000  0006473e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001208b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  001208f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00124ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a38c 	.word	0x0800a38c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a38c 	.word	0x0800a38c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fac5 	bl	8000ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f816 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8d8 	bl	8000704 <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 f8a4 	bl	80006a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000558:	f000 f852 	bl	8000600 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800055c:	f008 ff20 	bl	80093a0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  initMainMCU(&huart1, &hdma_usart1_rx, &hdma_usart1_tx);
 8000560:	4a03      	ldr	r2, [pc, #12]	@ (8000570 <main+0x2c>)
 8000562:	4904      	ldr	r1, [pc, #16]	@ (8000574 <main+0x30>)
 8000564:	4804      	ldr	r0, [pc, #16]	@ (8000578 <main+0x34>)
 8000566:	f009 fde9 	bl	800a13c <initMainMCU>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	mainLoop();
 800056a:	f009 fdff 	bl	800a16c <mainLoop>
 800056e:	e7fc      	b.n	800056a <main+0x26>
 8000570:	20000294 	.word	0x20000294
 8000574:	20000234 	.word	0x20000234
 8000578:	200001a0 	.word	0x200001a0

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2238      	movs	r2, #56	@ 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f009 fed2 	bl	800a334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a2:	f002 fe21 	bl	80031e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005a6:	2322      	movs	r3, #34	@ 0x22
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2340      	movs	r3, #64	@ 0x40
 80005b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fec5 	bl	8003350 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005cc:	f000 f90a 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 f9c3 	bl	8003974 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005f4:	f000 f8f6 	bl	80007e4 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	@ 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000606:	4a25      	ldr	r2, [pc, #148]	@ (800069c <MX_USART1_UART_Init+0x9c>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800060a:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800060c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000644:	2210      	movs	r2, #16
 8000646:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800064a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000650:	4811      	ldr	r0, [pc, #68]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000652:	f003 fd9b 	bl	800418c <HAL_UART_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800065c:	f000 f8c2 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	480d      	ldr	r0, [pc, #52]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000664:	f005 facf 	bl	8005c06 <HAL_UARTEx_SetTxFifoThreshold>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800066e:	f000 f8b9 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000676:	f005 fb04 	bl	8005c82 <HAL_UARTEx_SetRxFifoThreshold>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8000680:	f000 f8b0 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000686:	f005 fa85 	bl	8005b94 <HAL_UARTEx_DisableFifoMode>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8000690:	f000 f8a8 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200001a0 	.word	0x200001a0
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_DMA_Init+0x60>)
 80006a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006aa:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <MX_DMA_Init+0x60>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_DMA_Init+0x60>)
 80006b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_DMA_Init+0x60>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <MX_DMA_Init+0x60>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_DMA_Init+0x60>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	200b      	movs	r0, #11
 80006dc:	f000 fb69 	bl	8000db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e0:	200b      	movs	r0, #11
 80006e2:	f000 fb80 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	200c      	movs	r0, #12
 80006ec:	f000 fb61 	bl	8000db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006f0:	200c      	movs	r0, #12
 80006f2:	f000 fb78 	bl	8000de6 <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b2f      	ldr	r3, [pc, #188]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a2e      	ldr	r2, [pc, #184]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a28      	ldr	r2, [pc, #160]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_GPIO_Init+0xd4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	@ 0x40
 8000766:	481d      	ldr	r0, [pc, #116]	@ (80007dc <MX_GPIO_Init+0xd8>)
 8000768:	f001 f824 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f001 f81d 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 800077a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4814      	ldr	r0, [pc, #80]	@ (80007e0 <MX_GPIO_Init+0xdc>)
 8000790:	f000 fe76 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_M1_Pin */
  GPIO_InitStruct.Pin = LORA_M1_Pin;
 8000794:	2340      	movs	r3, #64	@ 0x40
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_M1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_GPIO_Init+0xd8>)
 80007ac:	f000 fe68 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_M0_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin;
 80007b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_M0_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007cc:	f000 fe58 	bl	8001480 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800
 80007e0:	48000400 	.word	0x48000400

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	@ 0x60
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	@ 0x58
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000826:	f002 fd83 	bl	8003330 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09a      	sub	sp, #104	@ 0x68
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2244      	movs	r2, #68	@ 0x44
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f009 fd6b 	bl	800a334 <memset>
  if(huart->Instance==USART1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a4d      	ldr	r2, [pc, #308]	@ (8000998 <HAL_UART_MspInit+0x160>)
 8000864:	4293      	cmp	r3, r2
 8000866:	f040 8093 	bne.w	8000990 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fa98 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000882:	f7ff ffaf 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000886:	4b45      	ldr	r3, [pc, #276]	@ (800099c <HAL_UART_MspInit+0x164>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	4a44      	ldr	r2, [pc, #272]	@ (800099c <HAL_UART_MspInit+0x164>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6613      	str	r3, [r2, #96]	@ 0x60
 8000892:	4b42      	ldr	r3, [pc, #264]	@ (800099c <HAL_UART_MspInit+0x164>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b3f      	ldr	r3, [pc, #252]	@ (800099c <HAL_UART_MspInit+0x164>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a3e      	ldr	r2, [pc, #248]	@ (800099c <HAL_UART_MspInit+0x164>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <HAL_UART_MspInit+0x164>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c8:	2307      	movs	r3, #7
 80008ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008d0:	4619      	mov	r1, r3
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f000 fdd3 	bl	8001480 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80008da:	4b31      	ldr	r3, [pc, #196]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 80008dc:	4a31      	ldr	r2, [pc, #196]	@ (80009a4 <HAL_UART_MspInit+0x16c>)
 80008de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80008e0:	4b2f      	ldr	r3, [pc, #188]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 80008e2:	2218      	movs	r2, #24
 80008e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ec:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f8:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000904:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 8000906:	2220      	movs	r2, #32
 8000908:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000910:	4823      	ldr	r0, [pc, #140]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 8000912:	f000 fa83 	bl	8000e1c <HAL_DMA_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800091c:	f7ff ff62 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a1f      	ldr	r2, [pc, #124]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 8000924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000928:	4a1d      	ldr	r2, [pc, #116]	@ (80009a0 <HAL_UART_MspInit+0x168>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000930:	4a1e      	ldr	r2, [pc, #120]	@ (80009ac <HAL_UART_MspInit+0x174>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000936:	2219      	movs	r2, #25
 8000938:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 800093c:	2210      	movs	r2, #16
 800093e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000964:	4810      	ldr	r0, [pc, #64]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000966:	f000 fa59 	bl	8000e1c <HAL_DMA_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000970:	f7ff ff38 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0c      	ldr	r2, [pc, #48]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 8000978:	67da      	str	r2, [r3, #124]	@ 0x7c
 800097a:	4a0b      	ldr	r2, [pc, #44]	@ (80009a8 <HAL_UART_MspInit+0x170>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2025      	movs	r0, #37	@ 0x25
 8000986:	f000 fa14 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800098a:	2025      	movs	r0, #37	@ 0x25
 800098c:	f000 fa2b 	bl	8000de6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	3768      	adds	r7, #104	@ 0x68
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40013800 	.word	0x40013800
 800099c:	40021000 	.word	0x40021000
 80009a0:	20000234 	.word	0x20000234
 80009a4:	40020008 	.word	0x40020008
 80009a8:	20000294 	.word	0x20000294
 80009ac:	4002001c 	.word	0x4002001c

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <NMI_Handler+0x4>

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 f8b9 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <DMA1_Channel1_IRQHandler+0x10>)
 8000a16:	f000 fbe4 	bl	80011e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000234 	.word	0x20000234

08000a24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <DMA1_Channel2_IRQHandler+0x10>)
 8000a2a:	f000 fbda 	bl	80011e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000294 	.word	0x20000294

08000a38 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <USB_LP_IRQHandler+0x10>)
 8000a3e:	f000 ffc1 	bl	80019c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000fcc 	.word	0x20000fcc

08000a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <USART1_IRQHandler+0x10>)
 8000a52:	f003 fdc1 	bl	80045d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001a0 	.word	0x200001a0

08000a60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a84:	480d      	ldr	r0, [pc, #52]	@ (8000abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	@ (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f009 fc47 	bl	800a344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fd45 	bl	8000544 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   r0, =_estack
 8000abc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000ac8:	0800a43c 	.word	0x0800a43c
  ldr r2, =_sbss
 8000acc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ad0:	200019bc 	.word	0x200019bc

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>

08000ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f95b 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f000 f80e 	bl	8000b08 <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e001      	b.n	8000afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af8:	f7ff fe7a 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]

}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <HAL_InitTick+0x68>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d022      	beq.n	8000b62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_InitTick+0x6c>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <HAL_InitTick+0x68>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f966 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10f      	bne.n	8000b5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d809      	bhi.n	8000b56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4a:	f000 f932 	bl	8000db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_InitTick+0x70>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e004      	b.n	8000b66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e001      	b.n	8000b66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a03      	ldr	r2, [pc, #12]	@ (8000b98 <HAL_IncTick+0x1c>)
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	200002f4 	.word	0x200002f4
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200002f4 	.word	0x200002f4

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff ffee 	bl	8000ba0 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d004      	beq.n	8000bdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_Delay+0x40>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	4413      	add	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bdc:	bf00      	nop
 8000bde:	f7ff ffdf 	bl	8000ba0 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d8f7      	bhi.n	8000bde <HAL_Delay+0x26>
  {
  }
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000008 	.word	0x20000008

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	@ (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	@ (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff29 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff40 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff90 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5f 	bl	8000c9c <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff33 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa4 	bl	8000d58 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e08d      	b.n	8000f4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b47      	ldr	r3, [pc, #284]	@ (8000f54 <HAL_DMA_Init+0x138>)
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d80f      	bhi.n	8000e5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b45      	ldr	r3, [pc, #276]	@ (8000f58 <HAL_DMA_Init+0x13c>)
 8000e42:	4413      	add	r3, r2
 8000e44:	4a45      	ldr	r2, [pc, #276]	@ (8000f5c <HAL_DMA_Init+0x140>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	009a      	lsls	r2, r3, #2
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a42      	ldr	r2, [pc, #264]	@ (8000f60 <HAL_DMA_Init+0x144>)
 8000e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e58:	e00e      	b.n	8000e78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b40      	ldr	r3, [pc, #256]	@ (8000f64 <HAL_DMA_Init+0x148>)
 8000e62:	4413      	add	r3, r2
 8000e64:	4a3d      	ldr	r2, [pc, #244]	@ (8000f5c <HAL_DMA_Init+0x140>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	009a      	lsls	r2, r3, #2
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a3c      	ldr	r2, [pc, #240]	@ (8000f68 <HAL_DMA_Init+0x14c>)
 8000e76:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 fa76 	bl	80013bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ed8:	d102      	bne.n	8000ee0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ef4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d010      	beq.n	8000f20 <HAL_DMA_Init+0x104>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d80c      	bhi.n	8000f20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fa96 	bl	8001438 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	e008      	b.n	8000f32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020407 	.word	0x40020407
 8000f58:	bffdfff8 	.word	0xbffdfff8
 8000f5c:	cccccccd 	.word	0xcccccccd
 8000f60:	40020000 	.word	0x40020000
 8000f64:	bffdfbf8 	.word	0xbffdfbf8
 8000f68:	40020400 	.word	0x40020400

08000f6c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_DMA_Start_IT+0x20>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e066      	b.n	800105a <HAL_DMA_Start_IT+0xee>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d155      	bne.n	800104c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2200      	movs	r2, #0
 8000fac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 f9bb 	bl	8001340 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d008      	beq.n	8000fe4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 020e 	orr.w	r2, r2, #14
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e00f      	b.n	8001004 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0204 	bic.w	r2, r2, #4
 8000ff2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 020a 	orr.w	r2, r2, #10
 8001002:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001020:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001038:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0201 	orr.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e005      	b.n	8001058 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001054:	2302      	movs	r3, #2
 8001056:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001058:	7dfb      	ldrb	r3, [r7, #23]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d005      	beq.n	8001086 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2204      	movs	r2, #4
 800107e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e037      	b.n	80010f6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 020e 	bic.w	r2, r2, #14
 8001094:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010a4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f003 021f 	and.w	r2, r3, #31
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010d2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00c      	beq.n	80010f6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010ea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010f4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d00d      	beq.n	8001148 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2204      	movs	r2, #4
 8001130:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e047      	b.n	80011d8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 020e 	bic.w	r2, r2, #14
 8001156:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001172:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001194:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	4798      	blx	r3
    }
  }
  return status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	2204      	movs	r2, #4
 8001204:	409a      	lsls	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d026      	beq.n	800125c <HAL_DMA_IRQHandler+0x7a>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d021      	beq.n	800125c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	2b00      	cmp	r3, #0
 8001224:	d107      	bne.n	8001236 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0204 	bic.w	r2, r2, #4
 8001234:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f003 021f 	and.w	r2, r3, #31
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	2104      	movs	r1, #4
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	2b00      	cmp	r3, #0
 8001250:	d071      	beq.n	8001336 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800125a:	e06c      	b.n	8001336 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	2202      	movs	r2, #2
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02e      	beq.n	80012ce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d029      	beq.n	80012ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10b      	bne.n	80012a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 020a 	bic.w	r2, r2, #10
 8001296:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	2102      	movs	r1, #2
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d038      	beq.n	8001336 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012cc:	e033      	b.n	8001336 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	2208      	movs	r2, #8
 80012d8:	409a      	lsls	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d02a      	beq.n	8001338 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d025      	beq.n	8001338 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 020e 	bic.w	r2, r2, #14
 80012fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001336:	bf00      	nop
 8001338:	bf00      	nop
}
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001356:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001368:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f003 021f 	and.w	r2, r3, #31
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b10      	cmp	r3, #16
 800138c:	d108      	bne.n	80013a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800139e:	e007      	b.n	80013b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d802      	bhi.n	80013d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e001      	b.n	80013da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80013d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	3b08      	subs	r3, #8
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	009a      	lsls	r2, r3, #2
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4413      	add	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001406:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2201      	movs	r2, #1
 8001410:	409a      	lsls	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40020407 	.word	0x40020407
 8001428:	40020800 	.word	0x40020800
 800142c:	40020820 	.word	0x40020820
 8001430:	cccccccd 	.word	0xcccccccd
 8001434:	40020880 	.word	0x40020880

08001438 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	461a      	mov	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a08      	ldr	r2, [pc, #32]	@ (800147c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800145a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b01      	subs	r3, #1
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2201      	movs	r2, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	1000823f 	.word	0x1000823f
 800147c:	40020940 	.word	0x40020940

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800148e:	e15a      	b.n	8001746 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 814c 	beq.w	8001740 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d005      	beq.n	80014c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d130      	bne.n	8001522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014f6:	2201      	movs	r2, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f003 0201 	and.w	r2, r3, #1
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b03      	cmp	r3, #3
 800152c:	d017      	beq.n	800155e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d123      	bne.n	80015b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	6939      	ldr	r1, [r7, #16]
 80015ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0203 	and.w	r2, r3, #3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80a6 	beq.w	8001740 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001764 <HAL_GPIO_Init+0x2e4>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001764 <HAL_GPIO_Init+0x2e4>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001600:	4b58      	ldr	r3, [pc, #352]	@ (8001764 <HAL_GPIO_Init+0x2e4>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160c:	4a56      	ldr	r2, [pc, #344]	@ (8001768 <HAL_GPIO_Init+0x2e8>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001636:	d01f      	beq.n	8001678 <HAL_GPIO_Init+0x1f8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4c      	ldr	r2, [pc, #304]	@ (800176c <HAL_GPIO_Init+0x2ec>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d019      	beq.n	8001674 <HAL_GPIO_Init+0x1f4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4b      	ldr	r2, [pc, #300]	@ (8001770 <HAL_GPIO_Init+0x2f0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1f0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4a      	ldr	r2, [pc, #296]	@ (8001774 <HAL_GPIO_Init+0x2f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1ec>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a49      	ldr	r2, [pc, #292]	@ (8001778 <HAL_GPIO_Init+0x2f8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1e8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a48      	ldr	r2, [pc, #288]	@ (800177c <HAL_GPIO_Init+0x2fc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1e4>
 8001660:	2305      	movs	r3, #5
 8001662:	e00a      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001664:	2306      	movs	r3, #6
 8001666:	e008      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001668:	2304      	movs	r3, #4
 800166a:	e006      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 800166c:	2303      	movs	r3, #3
 800166e:	e004      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001670:	2302      	movs	r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001678:	2300      	movs	r3, #0
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800168a:	4937      	ldr	r1, [pc, #220]	@ (8001768 <HAL_GPIO_Init+0x2e8>)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001698:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <HAL_GPIO_Init+0x300>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016bc:	4a30      	ldr	r2, [pc, #192]	@ (8001780 <HAL_GPIO_Init+0x300>)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <HAL_GPIO_Init+0x300>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016e6:	4a26      	ldr	r2, [pc, #152]	@ (8001780 <HAL_GPIO_Init+0x300>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016ec:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_GPIO_Init+0x300>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001710:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <HAL_GPIO_Init+0x300>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <HAL_GPIO_Init+0x300>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800173a:	4a11      	ldr	r2, [pc, #68]	@ (8001780 <HAL_GPIO_Init+0x300>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f ae9d 	bne.w	8001490 <HAL_GPIO_Init+0x10>
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	48000400 	.word	0x48000400
 8001770:	48000800 	.word	0x48000800
 8001774:	48000c00 	.word	0x48000c00
 8001778:	48001000 	.word	0x48001000
 800177c:	48001400 	.word	0x48001400
 8001780:	40010400 	.word	0x40010400

08001784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0c0      	b.n	8001978 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f007 ffa8 	bl	8009760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f004 fb28 	bl	8005e72 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
 8001826:	e03e      	b.n	80018a6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3311      	adds	r3, #17
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3310      	adds	r3, #16
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	3313      	adds	r3, #19
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	3320      	adds	r3, #32
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3324      	adds	r3, #36	@ 0x24
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	3301      	adds	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3bb      	bcc.n	8001828 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e044      	b.n	8001940 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	3301      	adds	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	791b      	ldrb	r3, [r3, #4]
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3b5      	bcc.n	80018b6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001956:	f004 faa7 	bl	8005ea8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7a9b      	ldrb	r3, [r3, #10]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f001 fc0e 	bl	8003192 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_PCD_Start+0x16>
 8001992:	2302      	movs	r3, #2
 8001994:	e012      	b.n	80019bc <HAL_PCD_Start+0x3c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 fa4e 	bl	8005e44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f006 f82b 	bl	8007a08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 f830 	bl	8007a36 <USB_ReadInterrupts>
 80019d6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fb06 	bl	8001ff4 <PCD_EP_ISR_Handler>

    return;
 80019e8:	e110      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a06:	b292      	uxth	r2, r2
 8001a08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f007 ff38 	bl	8009882 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a12:	2100      	movs	r1, #0
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8fc 	bl	8001c12 <HAL_PCD_SetAddress>

    return;
 8001a1a:	e0f7      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00c      	beq.n	8001a40 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a3e:	e0e5      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a62:	e0d3      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d034      	beq.n	8001ad8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0204 	bic.w	r2, r2, #4
 8001a80:	b292      	uxth	r2, r2
 8001a82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0208 	bic.w	r2, r2, #8
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d107      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f008 f8d8 	bl	8009c68 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f007 ff1b 	bl	80098f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ad6:	e099      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d027      	beq.n	8001b32 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0208 	orr.w	r2, r2, #8
 8001af4:	b292      	uxth	r2, r2
 8001af6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0204 	orr.w	r2, r2, #4
 8001b24:	b292      	uxth	r2, r2
 8001b26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f007 fec8 	bl	80098c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b30:	e06c      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d040      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b4e:	b292      	uxth	r2, r2
 8001b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d12b      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0204 	orr.w	r2, r2, #4
 8001b70:	b292      	uxth	r2, r2
 8001b72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0208 	orr.w	r2, r2, #8
 8001b88:	b292      	uxth	r2, r2
 8001b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001bac:	2101      	movs	r1, #1
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f008 f85a 	bl	8009c68 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001bb4:	e02a      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f007 fe82 	bl	80098c0 <HAL_PCD_SuspendCallback>
    return;
 8001bbc:	e026      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00f      	beq.n	8001be8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f007 fe40 	bl	8009866 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001be6:	e011      	b.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00c      	beq.n	8001c0c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c04:	b292      	uxth	r2, r2
 8001c06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c0a:	bf00      	nop
  }
}
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_SetAddress+0x1a>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e012      	b.n	8001c52 <HAL_PCD_SetAddress+0x40>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 fecc 	bl	80079e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	4608      	mov	r0, r1
 8001c64:	4611      	mov	r1, r2
 8001c66:	461a      	mov	r2, r3
 8001c68:	4603      	mov	r3, r0
 8001c6a:	70fb      	strb	r3, [r7, #3]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	803b      	strh	r3, [r7, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da0e      	bge.n	8001c9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 0207 	and.w	r2, r3, #7
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	3310      	adds	r3, #16
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	705a      	strb	r2, [r3, #1]
 8001c9c:	e00e      	b.n	8001cbc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 0207 	and.w	r2, r3, #7
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001cc8:	883b      	ldrh	r3, [r7, #0]
 8001cca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	78ba      	ldrb	r2, [r7, #2]
 8001cd6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d102      	bne.n	8001ce4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_PCD_EP_Open+0x98>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e00e      	b.n	8001d10 <HAL_PCD_EP_Open+0xb6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 f8ef 	bl	8005ee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da0e      	bge.n	8001d4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 0207 	and.w	r2, r3, #7
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	3310      	adds	r3, #16
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	705a      	strb	r2, [r3, #1]
 8001d48:	e00e      	b.n	8001d68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0207 	and.w	r2, r3, #7
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_PCD_EP_Close+0x6a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e00e      	b.n	8001da0 <HAL_PCD_EP_Close+0x88>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68f9      	ldr	r1, [r7, #12]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 fd8f 	bl	80068b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	f003 0207 	and.w	r2, r3, #7
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 ff47 	bl	8006c8e <USB_EPStartXfer>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	f003 0207 	and.w	r2, r3, #7
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001e2c:	681b      	ldr	r3, [r3, #0]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	460b      	mov	r3, r1
 8001e48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	f003 0207 	and.w	r2, r3, #7
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	3310      	adds	r3, #16
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2201      	movs	r2, #1
 8001e84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6979      	ldr	r1, [r7, #20]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 fef8 	bl	8006c8e <USB_EPStartXfer>

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	7912      	ldrb	r2, [r2, #4]
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e03e      	b.n	8001f44 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0e      	bge.n	8001eec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 0207 	and.w	r2, r3, #7
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	3310      	adds	r3, #16
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	705a      	strb	r2, [r3, #1]
 8001eea:	e00c      	b.n	8001f06 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_EP_SetStall+0x7e>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e00e      	b.n	8001f44 <HAL_PCD_EP_SetStall+0x9c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f005 fc59 	bl	80077ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	7912      	ldrb	r2, [r2, #4]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e040      	b.n	8001fec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da0e      	bge.n	8001f90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 0207 	and.w	r2, r3, #7
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	3310      	adds	r3, #16
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
 8001f8e:	e00e      	b.n	8001fae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 0207 	and.w	r2, r3, #7
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_PCD_EP_ClrStall+0x82>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e00e      	b.n	8001fec <HAL_PCD_EP_ClrStall+0xa0>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f005 fc56 	bl	800788e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b092      	sub	sp, #72	@ 0x48
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ffc:	e333      	b.n	8002666 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002006:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002008:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002014:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 8108 	bne.w	800222e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800201e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d14c      	bne.n	80020c2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002038:	813b      	strh	r3, [r7, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	893b      	ldrh	r3, [r7, #8]
 8002040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002048:	b29b      	uxth	r3, r3
 800204a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3310      	adds	r3, #16
 8002050:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	4413      	add	r3, r2
 800206c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002078:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800207a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	441a      	add	r2, r3
 8002084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002086:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002088:	2100      	movs	r1, #0
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f007 fbd1 	bl	8009832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7b1b      	ldrb	r3, [r3, #12]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 82e5 	beq.w	8002666 <PCD_EP_ISR_Handler+0x672>
 800209c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 82e0 	bne.w	8002666 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7b1b      	ldrb	r3, [r3, #12]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	731a      	strb	r2, [r3, #12]
 80020c0:	e2d1      	b.n	8002666 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80020d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d032      	beq.n	8002142 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002102:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800210e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002110:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002114:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002116:	b29b      	uxth	r3, r3
 8002118:	f005 fce0 	bl	8007adc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29a      	uxth	r2, r3
 8002124:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002128:	4013      	ands	r3, r2
 800212a:	817b      	strh	r3, [r7, #10]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	897a      	ldrh	r2, [r7, #10]
 8002132:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002136:	b292      	uxth	r2, r2
 8002138:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f007 fb4c 	bl	80097d8 <HAL_PCD_SetupStageCallback>
 8002140:	e291      	b.n	8002666 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002142:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002146:	2b00      	cmp	r3, #0
 8002148:	f280 828d 	bge.w	8002666 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29a      	uxth	r2, r3
 8002154:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002158:	4013      	ands	r3, r2
 800215a:	81fb      	strh	r3, [r7, #14]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	89fa      	ldrh	r2, [r7, #14]
 8002162:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002166:	b292      	uxth	r2, r2
 8002168:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	4413      	add	r3, r2
 8002184:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800218e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002190:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <PCD_EP_ISR_Handler+0x1da>
 800219a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a8:	6959      	ldr	r1, [r3, #20]
 80021aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f005 fc92 	bl	8007adc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	441a      	add	r2, r3
 80021c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021c6:	2100      	movs	r1, #0
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f007 fb17 	bl	80097fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80021d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80021d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f040 8242 	bne.w	8002666 <PCD_EP_ISR_Handler+0x672>
 80021e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80021e4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021ec:	f000 823b 	beq.w	8002666 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002200:	81bb      	strh	r3, [r7, #12]
 8002202:	89bb      	ldrh	r3, [r7, #12]
 8002204:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002208:	81bb      	strh	r3, [r7, #12]
 800220a:	89bb      	ldrh	r3, [r7, #12]
 800220c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002210:	81bb      	strh	r3, [r7, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	89bb      	ldrh	r3, [r7, #12]
 8002218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800221c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002228:	b29b      	uxth	r3, r3
 800222a:	8013      	strh	r3, [r2, #0]
 800222c:	e21b      	b.n	8002666 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002240:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002244:	2b00      	cmp	r3, #0
 8002246:	f280 80f1 	bge.w	800242c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002260:	4013      	ands	r3, r2
 8002262:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002274:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002278:	b292      	uxth	r2, r2
 800227a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800227c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002294:	7b1b      	ldrb	r3, [r3, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d123      	bne.n	80022e2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80022c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 808b 	beq.w	80023e2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d2:	6959      	ldr	r1, [r3, #20]
 80022d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d6:	88da      	ldrh	r2, [r3, #6]
 80022d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022dc:	f005 fbfe 	bl	8007adc <USB_ReadPMA>
 80022e0:	e07f      	b.n	80023e2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e4:	78db      	ldrb	r3, [r3, #3]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d109      	bne.n	80022fe <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022ec:	461a      	mov	r2, r3
 80022ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f9c6 	bl	8002682 <HAL_PCD_EP_DB_Receive>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80022fc:	e071      	b.n	80023e2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002318:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	441a      	add	r2, r3
 8002328:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800232a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800232e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002336:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800233a:	b29b      	uxth	r3, r3
 800233c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d022      	beq.n	800239e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002380:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02c      	beq.n	80023e2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800238e:	6959      	ldr	r1, [r3, #20]
 8002390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002392:	891a      	ldrh	r2, [r3, #8]
 8002394:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002398:	f005 fba0 	bl	8007adc <USB_ReadPMA>
 800239c:	e021      	b.n	80023e2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80023c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d4:	6959      	ldr	r1, [r3, #20]
 80023d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d8:	895a      	ldrh	r2, [r3, #10]
 80023da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80023de:	f005 fb7d 	bl	8007adc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80023e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80023ea:	441a      	add	r2, r3
 80023ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80023f8:	441a      	add	r2, r3
 80023fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <PCD_EP_ISR_Handler+0x41e>
 8002406:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800240a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	429a      	cmp	r2, r3
 8002410:	d206      	bcs.n	8002420 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f007 f9ef 	bl	80097fc <HAL_PCD_DataOutStageCallback>
 800241e:	e005      	b.n	800242c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002426:	4618      	mov	r0, r3
 8002428:	f004 fc31 	bl	8006c8e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800242c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800242e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8117 	beq.w	8002666 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002438:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	3310      	adds	r3, #16
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002466:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	441a      	add	r2, r3
 8002476:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002480:	b29b      	uxth	r3, r3
 8002482:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 80a1 	bne.w	80025d0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800248e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002496:	7b1b      	ldrb	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8092 	beq.w	80025c2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800249e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d046      	beq.n	8002536 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d126      	bne.n	80024fe <PCD_EP_ISR_Handler+0x50a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	00da      	lsls	r2, r3, #3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4413      	add	r3, r2
 80024d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	801a      	strh	r2, [r3, #0]
 80024fc:	e061      	b.n	80025c2 <PCD_EP_ISR_Handler+0x5ce>
 80024fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d15d      	bne.n	80025c2 <PCD_EP_ISR_Handler+0x5ce>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	00da      	lsls	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2200      	movs	r2, #0
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	e045      	b.n	80025c2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800253c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800253e:	785b      	ldrb	r3, [r3, #1]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d126      	bne.n	8002592 <PCD_EP_ISR_Handler+0x59e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	4413      	add	r3, r2
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
 800255c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	00da      	lsls	r2, r3, #3
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	4413      	add	r3, r2
 8002566:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002576:	b29a      	uxth	r2, r3
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258a:	b29a      	uxth	r2, r3
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	e017      	b.n	80025c2 <PCD_EP_ISR_Handler+0x5ce>
 8002592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d113      	bne.n	80025c2 <PCD_EP_ISR_Handler+0x5ce>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	4413      	add	r3, r2
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	00da      	lsls	r2, r3, #3
 80025b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b4:	4413      	add	r3, r2
 80025b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025be:	2200      	movs	r2, #0
 80025c0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f007 f932 	bl	8009832 <HAL_PCD_DataInStageCallback>
 80025ce:	e04a      	b.n	8002666 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80025d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80025d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d13f      	bne.n	800265a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fe:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002606:	429a      	cmp	r2, r3
 8002608:	d906      	bls.n	8002618 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800260a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002610:	1ad2      	subs	r2, r2, r3
 8002612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002614:	619a      	str	r2, [r3, #24]
 8002616:	e002      	b.n	800261e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800261e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f007 f900 	bl	8009832 <HAL_PCD_DataInStageCallback>
 8002632:	e018      	b.n	8002666 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800263a:	441a      	add	r2, r3
 800263c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002646:	441a      	add	r2, r3
 8002648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800264a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002652:	4618      	mov	r0, r3
 8002654:	f004 fb1b 	bl	8006c8e <USB_EPStartXfer>
 8002658:	e005      	b.n	8002666 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800265a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800265c:	461a      	mov	r2, r3
 800265e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f917 	bl	8002894 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800266e:	b29b      	uxth	r3, r3
 8002670:	b21b      	sxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	f6ff acc3 	blt.w	8001ffe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3748      	adds	r7, #72	@ 0x48
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b088      	sub	sp, #32
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d07c      	beq.n	8002794 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	8b7b      	ldrh	r3, [r7, #26]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d306      	bcc.n	80026d8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	8b7b      	ldrh	r3, [r7, #26]
 80026d0:	1ad2      	subs	r2, r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	619a      	str	r2, [r3, #24]
 80026d6:	e002      	b.n	80026de <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d123      	bne.n	800272e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002700:	833b      	strh	r3, [r7, #24]
 8002702:	8b3b      	ldrh	r3, [r7, #24]
 8002704:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002708:	833b      	strh	r3, [r7, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	441a      	add	r2, r3
 8002718:	8b3b      	ldrh	r3, [r7, #24]
 800271a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800271e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272a:	b29b      	uxth	r3, r3
 800272c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01f      	beq.n	8002778 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800274e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002752:	82fb      	strh	r3, [r7, #22]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	8afb      	ldrh	r3, [r7, #22]
 8002764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800276c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002774:	b29b      	uxth	r3, r3
 8002776:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002778:	8b7b      	ldrh	r3, [r7, #26]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8085 	beq.w	800288a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6959      	ldr	r1, [r3, #20]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	891a      	ldrh	r2, [r3, #8]
 800278c:	8b7b      	ldrh	r3, [r7, #26]
 800278e:	f005 f9a5 	bl	8007adc <USB_ReadPMA>
 8002792:	e07a      	b.n	800288a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	8b7b      	ldrh	r3, [r7, #26]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d306      	bcc.n	80027d2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	8b7b      	ldrh	r3, [r7, #26]
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	619a      	str	r2, [r3, #24]
 80027d0:	e002      	b.n	80027d8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d123      	bne.n	8002828 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027fa:	83fb      	strh	r3, [r7, #30]
 80027fc:	8bfb      	ldrh	r3, [r7, #30]
 80027fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002802:	83fb      	strh	r3, [r7, #30]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	8bfb      	ldrh	r3, [r7, #30]
 8002814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800281c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002824:	b29b      	uxth	r3, r3
 8002826:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d11f      	bne.n	8002872 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284c:	83bb      	strh	r3, [r7, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	441a      	add	r2, r3
 800285c:	8bbb      	ldrh	r3, [r7, #28]
 800285e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800286a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800286e:	b29b      	uxth	r3, r3
 8002870:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002872:	8b7b      	ldrh	r3, [r7, #26]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6959      	ldr	r1, [r3, #20]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	895a      	ldrh	r2, [r3, #10]
 8002884:	8b7b      	ldrh	r3, [r7, #26]
 8002886:	f005 f929 	bl	8007adc <USB_ReadPMA>
    }
  }

  return count;
 800288a:	8b7b      	ldrh	r3, [r7, #26]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0a6      	sub	sp, #152	@ 0x98
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 81f7 	beq.w	8002c9c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80028de:	429a      	cmp	r2, r3
 80028e0:	d907      	bls.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80028ea:	1ad2      	subs	r2, r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	619a      	str	r2, [r3, #24]
 80028f0:	e002      	b.n	80028f8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 80e1 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d126      	bne.n	8002958 <HAL_PCD_EP_DB_Transmit+0xc4>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002918:	b29b      	uxth	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291e:	4413      	add	r3, r2
 8002920:	633b      	str	r3, [r7, #48]	@ 0x30
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00da      	lsls	r2, r3, #3
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	4413      	add	r3, r2
 800292c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293c:	b29a      	uxth	r2, r3
 800293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002950:	b29a      	uxth	r2, r3
 8002952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e01a      	b.n	800298e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d116      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002974:	4413      	add	r3, r2
 8002976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00da      	lsls	r2, r3, #3
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	4413      	add	r3, r2
 8002982:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002986:	637b      	str	r3, [r7, #52]	@ 0x34
 8002988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298a:	2200      	movs	r2, #0
 800298c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d126      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x156>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	4413      	add	r3, r2
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	00da      	lsls	r2, r3, #3
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	4413      	add	r3, r2
 80029be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e017      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x186>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d113      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x186>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	4413      	add	r3, r2
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00da      	lsls	r2, r3, #3
 8002a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	78db      	ldrb	r3, [r3, #3]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d123      	bne.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a3c:	837b      	strh	r3, [r7, #26]
 8002a3e:	8b7b      	ldrh	r3, [r7, #26]
 8002a40:	f083 0320 	eor.w	r3, r3, #32
 8002a44:	837b      	strh	r3, [r7, #26]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	8b7b      	ldrh	r3, [r7, #26]
 8002a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f006 fede 	bl	8009832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01f      	beq.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a9a:	833b      	strh	r3, [r7, #24]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	8b3b      	ldrh	r3, [r7, #24]
 8002aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ab4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e31f      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d021      	beq.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	441a      	add	r2, r3
 8002afa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002afe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 82ca 	bne.w	80030b2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002b26:	441a      	add	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002b34:	441a      	add	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d309      	bcc.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b52:	1ad2      	subs	r2, r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	621a      	str	r2, [r3, #32]
 8002b58:	e015      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002b62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002b66:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b70:	e009      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d15f      	bne.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba2:	4413      	add	r3, r2
 8002ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	00da      	lsls	r2, r3, #3
 8002bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bae:	4413      	add	r3, r2
 8002bb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x34e>
 8002bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	e051      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002be6:	d816      	bhi.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x382>
 8002be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x36a>
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	029b      	lsls	r3, r3, #10
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	e037      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x398>
 8002c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	029b      	lsls	r3, r3, #10
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	e01b      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d117      	bne.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c6a:	4413      	add	r3, r2
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	00da      	lsls	r2, r3, #3
 8002c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c76:	4413      	add	r3, r2
 8002c78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6959      	ldr	r1, [r3, #20]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	891a      	ldrh	r2, [r3, #8]
 8002c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f004 fede 	bl	8007a56 <USB_WritePMA>
 8002c9a:	e20a      	b.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d307      	bcc.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002cd8:	1ad2      	subs	r2, r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	619a      	str	r2, [r3, #24]
 8002cde:	e002      	b.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 80f6 	bne.w	8002edc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d126      	bne.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d0c:	4413      	add	r3, r2
 8002d0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	00da      	lsls	r2, r3, #3
 8002d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d18:	4413      	add	r3, r2
 8002d1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	e01a      	b.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	785b      	ldrb	r3, [r3, #1]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d116      	bne.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d62:	4413      	add	r3, r2
 8002d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	00da      	lsls	r2, r3, #3
 8002d6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d6e:	4413      	add	r3, r2
 8002d70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d78:	2200      	movs	r2, #0
 8002d7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d12f      	bne.n	8002dec <HAL_PCD_EP_DB_Transmit+0x558>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da4:	4413      	add	r3, r2
 8002da6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002db4:	4413      	add	r3, r2
 8002db6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e01c      	b.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x592>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d118      	bne.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x592>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e04:	4413      	add	r3, r2
 8002e06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	00da      	lsls	r2, r3, #3
 8002e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e14:	4413      	add	r3, r2
 8002e16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e22:	2200      	movs	r2, #0
 8002e24:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	78db      	ldrb	r3, [r3, #3]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d127      	bne.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e48:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002e4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002e50:	f083 0320 	eor.w	r3, r3, #32
 8002e54:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f006 fcd4 	bl	8009832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d121      	bne.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eae:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ecc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e113      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d121      	bne.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f00:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f040 80be 	bne.w	80030b2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002f3e:	441a      	add	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002f4c:	441a      	add	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	6a1a      	ldr	r2, [r3, #32]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d309      	bcc.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	621a      	str	r2, [r3, #32]
 8002f70:	e015      	b.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d107      	bne.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002f7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f88:	e009      	b.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d15f      	bne.n	800306c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fc0:	4413      	add	r3, r2
 8002fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	00da      	lsls	r2, r3, #3
 8002fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fcc:	4413      	add	r3, r2
 8002fce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	e04e      	b.n	800309e <HAL_PCD_EP_DB_Transmit+0x80a>
 8003000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003002:	2b3e      	cmp	r3, #62	@ 0x3e
 8003004:	d816      	bhi.n	8003034 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	663b      	str	r3, [r7, #96]	@ 0x60
 800300c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_PCD_EP_DB_Transmit+0x788>
 8003016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003018:	3301      	adds	r3, #1
 800301a:	663b      	str	r3, [r7, #96]	@ 0x60
 800301c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29a      	uxth	r2, r3
 8003022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003024:	b29b      	uxth	r3, r3
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	b29b      	uxth	r3, r3
 800302a:	4313      	orrs	r3, r2
 800302c:	b29a      	uxth	r2, r3
 800302e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	e034      	b.n	800309e <HAL_PCD_EP_DB_Transmit+0x80a>
 8003034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	663b      	str	r3, [r7, #96]	@ 0x60
 800303a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003044:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003046:	3b01      	subs	r3, #1
 8003048:	663b      	str	r3, [r7, #96]	@ 0x60
 800304a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29a      	uxth	r2, r3
 8003050:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003052:	b29b      	uxth	r3, r3
 8003054:	029b      	lsls	r3, r3, #10
 8003056:	b29b      	uxth	r3, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003064:	b29a      	uxth	r2, r3
 8003066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003068:	801a      	strh	r2, [r3, #0]
 800306a:	e018      	b.n	800309e <HAL_PCD_EP_DB_Transmit+0x80a>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d114      	bne.n	800309e <HAL_PCD_EP_DB_Transmit+0x80a>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800307c:	b29b      	uxth	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003082:	4413      	add	r3, r2
 8003084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	00da      	lsls	r2, r3, #3
 800308c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800308e:	4413      	add	r3, r2
 8003090:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003094:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003098:	b29a      	uxth	r2, r3
 800309a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800309c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6959      	ldr	r1, [r3, #20]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	895a      	ldrh	r2, [r3, #10]
 80030aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f004 fcd2 	bl	8007a56 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030cc:	82fb      	strh	r3, [r7, #22]
 80030ce:	8afb      	ldrh	r3, [r7, #22]
 80030d0:	f083 0310 	eor.w	r3, r3, #16
 80030d4:	82fb      	strh	r3, [r7, #22]
 80030d6:	8afb      	ldrh	r3, [r7, #22]
 80030d8:	f083 0320 	eor.w	r3, r3, #32
 80030dc:	82fb      	strh	r3, [r7, #22]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	441a      	add	r2, r3
 80030ec:	8afb      	ldrh	r3, [r7, #22]
 80030ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fe:	b29b      	uxth	r3, r3
 8003100:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3798      	adds	r7, #152	@ 0x98
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	817b      	strh	r3, [r7, #10]
 800311a:	4613      	mov	r3, r2
 800311c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	f003 0207 	and.w	r2, r3, #7
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	3310      	adds	r3, #16
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e009      	b.n	8003156 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003142:	897a      	ldrh	r2, [r7, #10]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2200      	movs	r2, #0
 8003160:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	b29a      	uxth	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	80da      	strh	r2, [r3, #6]
 800316a:	e00b      	b.n	8003184 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2201      	movs	r2, #1
 8003170:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	b29a      	uxth	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b29a      	uxth	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d141      	bne.n	800327a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003202:	d131      	bne.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003204:	4b47      	ldr	r3, [pc, #284]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800320a:	4a46      	ldr	r2, [pc, #280]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003210:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003214:	4b43      	ldr	r3, [pc, #268]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800321c:	4a41      	ldr	r2, [pc, #260]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003224:	4b40      	ldr	r3, [pc, #256]	@ (8003328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2232      	movs	r2, #50	@ 0x32
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	4a3f      	ldr	r2, [pc, #252]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	0c9b      	lsrs	r3, r3, #18
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323a:	e002      	b.n	8003242 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3b01      	subs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003242:	4b38      	ldr	r3, [pc, #224]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324e:	d102      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f2      	bne.n	800323c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003256:	4b33      	ldr	r3, [pc, #204]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003262:	d158      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e057      	b.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003268:	4b2e      	ldr	r3, [pc, #184]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800326e:	4a2d      	ldr	r2, [pc, #180]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003278:	e04d      	b.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003280:	d141      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003282:	4b28      	ldr	r3, [pc, #160]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328e:	d131      	bne.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003290:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003296:	4a23      	ldr	r2, [pc, #140]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a0:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2232      	movs	r2, #50	@ 0x32
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	4a1c      	ldr	r2, [pc, #112]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	0c9b      	lsrs	r3, r3, #18
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c6:	e002      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ce:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032da:	d102      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f2      	bne.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ee:	d112      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e011      	b.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003304:	e007      	b.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003306:	4b07      	ldr	r3, [pc, #28]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800330e:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003314:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40007000 	.word	0x40007000
 8003328:	20000000 	.word	0x20000000
 800332c:	431bde83 	.word	0x431bde83

08003330 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a04      	ldr	r2, [pc, #16]	@ (800334c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800333a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800333e:	6093      	str	r3, [r2, #8]
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40007000 	.word	0x40007000

08003350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e2fe      	b.n	8003960 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336e:	4b97      	ldr	r3, [pc, #604]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003378:	4b94      	ldr	r3, [pc, #592]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d102      	bne.n	800338e <HAL_RCC_OscConfig+0x3e>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d002      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b8d      	ldr	r3, [pc, #564]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e2d9      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4b85      	ldr	r3, [pc, #532]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a84      	ldr	r2, [pc, #528]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b7f      	ldr	r3, [pc, #508]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7e      	ldr	r2, [pc, #504]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b7c      	ldr	r3, [pc, #496]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7b      	ldr	r2, [pc, #492]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4b78      	ldr	r3, [pc, #480]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a77      	ldr	r2, [pc, #476]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b75      	ldr	r3, [pc, #468]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a74      	ldr	r2, [pc, #464]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd fbca 	bl	8000ba0 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fd fbc6 	bl	8000ba0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e29e      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003422:	4b6a      	ldr	r3, [pc, #424]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fd fbb6 	bl	8000ba0 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fd fbb2 	bl	8000ba0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e28a      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344a:	4b60      	ldr	r3, [pc, #384]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d075      	beq.n	8003552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	4b56      	ldr	r3, [pc, #344]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d102      	bne.n	8003486 <HAL_RCC_OscConfig+0x136>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d002      	beq.n	800348c <HAL_RCC_OscConfig+0x13c>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d11f      	bne.n	80034cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800348c:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_OscConfig+0x154>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e25d      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	4946      	ldr	r1, [pc, #280]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034b8:	4b45      	ldr	r3, [pc, #276]	@ (80035d0 <HAL_RCC_OscConfig+0x280>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fb23 	bl	8000b08 <HAL_InitTick>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d043      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e249      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d023      	beq.n	800351c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b3d      	ldr	r3, [pc, #244]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3c      	ldr	r2, [pc, #240]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fd fb5e 	bl	8000ba0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fd fb5a 	bl	8000ba0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e232      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034fa:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b31      	ldr	r3, [pc, #196]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	492d      	ldr	r1, [pc, #180]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
 800351a:	e01a      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351c:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2a      	ldr	r2, [pc, #168]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003522:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd fb3a 	bl	8000ba0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003530:	f7fd fb36 	bl	8000ba0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e20e      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003542:	4b22      	ldr	r3, [pc, #136]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1e0>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d041      	beq.n	80035e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356c:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fd fb13 	bl	8000ba0 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357e:	f7fd fb0f 	bl	8000ba0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1e7      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003590:	4b0e      	ldr	r3, [pc, #56]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0ef      	beq.n	800357e <HAL_RCC_OscConfig+0x22e>
 800359e:	e020      	b.n	80035e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a0:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a6:	4a09      	ldr	r2, [pc, #36]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fd faf6 	bl	8000ba0 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035b6:	e00d      	b.n	80035d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fd faf2 	bl	8000ba0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d906      	bls.n	80035d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1ca      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80035d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ea      	bne.n	80035b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80a6 	beq.w	800373c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035f4:	4b84      	ldr	r3, [pc, #528]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x2b4>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x2b6>
 8003604:	2300      	movs	r3, #0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	4b7f      	ldr	r3, [pc, #508]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	4a7e      	ldr	r2, [pc, #504]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6593      	str	r3, [r2, #88]	@ 0x58
 8003616:	4b7c      	ldr	r3, [pc, #496]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003626:	4b79      	ldr	r3, [pc, #484]	@ (800380c <HAL_RCC_OscConfig+0x4bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003632:	4b76      	ldr	r3, [pc, #472]	@ (800380c <HAL_RCC_OscConfig+0x4bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a75      	ldr	r2, [pc, #468]	@ (800380c <HAL_RCC_OscConfig+0x4bc>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fd faaf 	bl	8000ba0 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fd faab 	bl	8000ba0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e183      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003658:	4b6c      	ldr	r3, [pc, #432]	@ (800380c <HAL_RCC_OscConfig+0x4bc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <HAL_RCC_OscConfig+0x32e>
 800366c:	4b66      	ldr	r3, [pc, #408]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	4a65      	ldr	r2, [pc, #404]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800367c:	e024      	b.n	80036c8 <HAL_RCC_OscConfig+0x378>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b05      	cmp	r3, #5
 8003684:	d110      	bne.n	80036a8 <HAL_RCC_OscConfig+0x358>
 8003686:	4b60      	ldr	r3, [pc, #384]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368c:	4a5e      	ldr	r2, [pc, #376]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003696:	4b5c      	ldr	r3, [pc, #368]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	4a5a      	ldr	r2, [pc, #360]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036a6:	e00f      	b.n	80036c8 <HAL_RCC_OscConfig+0x378>
 80036a8:	4b57      	ldr	r3, [pc, #348]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	4a56      	ldr	r2, [pc, #344]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036b8:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	4a52      	ldr	r2, [pc, #328]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d016      	beq.n	80036fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fa66 	bl	8000ba0 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fd fa62 	bl	8000ba0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e138      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ee:	4b46      	ldr	r3, [pc, #280]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ed      	beq.n	80036d8 <HAL_RCC_OscConfig+0x388>
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fd fa4f 	bl	8000ba0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fd fa4b 	bl	8000ba0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e121      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800371c:	4b3a      	ldr	r3, [pc, #232]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ed      	bne.n	8003706 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800372a:	7ffb      	ldrb	r3, [r7, #31]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b35      	ldr	r3, [pc, #212]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003734:	4a34      	ldr	r2, [pc, #208]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01c      	beq.n	800378a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003750:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003752:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003756:	4a2c      	ldr	r2, [pc, #176]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fd fa1e 	bl	8000ba0 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003768:	f7fd fa1a 	bl	8000ba0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0f2      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800377a:	4b23      	ldr	r3, [pc, #140]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 800377c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ef      	beq.n	8003768 <HAL_RCC_OscConfig+0x418>
 8003788:	e01b      	b.n	80037c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800378a:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 800378c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003790:	4a1d      	ldr	r2, [pc, #116]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fd fa01 	bl	8000ba0 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a2:	f7fd f9fd 	bl	8000ba0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0d5      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ef      	bne.n	80037a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80c9 	beq.w	800395e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	f000 8083 	beq.w	80038e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d15e      	bne.n	80038a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a08      	ldr	r2, [pc, #32]	@ (8003808 <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fd f9d7 	bl	8000ba0 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f4:	e00c      	b.n	8003810 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fd f9d3 	bl	8000ba0 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d905      	bls.n	8003810 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0ab      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
 8003808:	40021000 	.word	0x40021000
 800380c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003810:	4b55      	ldr	r3, [pc, #340]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ec      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381c:	4b52      	ldr	r3, [pc, #328]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	4b52      	ldr	r3, [pc, #328]	@ (800396c <HAL_RCC_OscConfig+0x61c>)
 8003822:	4013      	ands	r3, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6a11      	ldr	r1, [r2, #32]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800382c:	3a01      	subs	r2, #1
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	4311      	orrs	r1, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003836:	0212      	lsls	r2, r2, #8
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800383e:	0852      	lsrs	r2, r2, #1
 8003840:	3a01      	subs	r2, #1
 8003842:	0552      	lsls	r2, r2, #21
 8003844:	4311      	orrs	r1, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800384a:	0852      	lsrs	r2, r2, #1
 800384c:	3a01      	subs	r2, #1
 800384e:	0652      	lsls	r2, r2, #25
 8003850:	4311      	orrs	r1, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003856:	06d2      	lsls	r2, r2, #27
 8003858:	430a      	orrs	r2, r1
 800385a:	4943      	ldr	r1, [pc, #268]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 800385c:	4313      	orrs	r3, r2
 800385e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003860:	4b41      	ldr	r3, [pc, #260]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a40      	ldr	r2, [pc, #256]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 8003866:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800386a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800386c:	4b3e      	ldr	r3, [pc, #248]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4a3d      	ldr	r2, [pc, #244]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 8003872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003876:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd f992 	bl	8000ba0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd f98e 	bl	8000ba0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e066      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003892:	4b35      	ldr	r3, [pc, #212]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x530>
 800389e:	e05e      	b.n	800395e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a0:	4b31      	ldr	r3, [pc, #196]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 80038a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd f978 	bl	8000ba0 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd f974 	bl	8000ba0 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e04c      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c6:	4b28      	ldr	r3, [pc, #160]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038d2:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	4924      	ldr	r1, [pc, #144]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 80038d8:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <HAL_RCC_OscConfig+0x620>)
 80038da:	4013      	ands	r3, r2
 80038dc:	60cb      	str	r3, [r1, #12]
 80038de:	e03e      	b.n	800395e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e039      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <HAL_RCC_OscConfig+0x618>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d12c      	bne.n	800395a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d123      	bne.n	800395a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d11b      	bne.n	800395a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d113      	bne.n	800395a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d109      	bne.n	800395a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	019f800c 	.word	0x019f800c
 8003970:	feeefffc 	.word	0xfeeefffc

08003974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e11e      	b.n	8003bca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b91      	ldr	r3, [pc, #580]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d910      	bls.n	80039bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b8e      	ldr	r3, [pc, #568]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 020f 	bic.w	r2, r3, #15
 80039a2:	498c      	ldr	r1, [pc, #560]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b8a      	ldr	r3, [pc, #552]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e106      	b.n	8003bca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d073      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d129      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d0:	4b81      	ldr	r3, [pc, #516]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0f4      	b.n	8003bca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039e0:	f000 f99e 	bl	8003d20 <RCC_GetSysClockFreqFromPLLSource>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bdc <HAL_RCC_ClockConfig+0x268>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d93f      	bls.n	8003a6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ee:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d033      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d12f      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a0e:	4b72      	ldr	r3, [pc, #456]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a16:	4a70      	ldr	r2, [pc, #448]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e024      	b.n	8003a6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0c6      	b.n	8003bca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3c:	4b66      	ldr	r3, [pc, #408]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0be      	b.n	8003bca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a4c:	f000 f8ce 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4a61      	ldr	r2, [pc, #388]	@ (8003bdc <HAL_RCC_ClockConfig+0x268>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d909      	bls.n	8003a6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a62:	4a5d      	ldr	r2, [pc, #372]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4957      	ldr	r1, [pc, #348]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fd f88e 	bl	8000ba0 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fd f88a 	bl	8000ba0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e095      	b.n	8003bca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 020c 	and.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1eb      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d023      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac8:	4b43      	ldr	r3, [pc, #268]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a42      	ldr	r2, [pc, #264]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003ace:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ad2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af0:	4b39      	ldr	r3, [pc, #228]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4936      	ldr	r1, [pc, #216]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d105      	bne.n	8003b16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b0a:	4b33      	ldr	r3, [pc, #204]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	4a32      	ldr	r2, [pc, #200]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003b10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b16:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d21d      	bcs.n	8003b60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b24:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 020f 	bic.w	r2, r3, #15
 8003b2c:	4929      	ldr	r1, [pc, #164]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b34:	f7fd f834 	bl	8000ba0 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fd f830 	bl	8000ba0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e03b      	b.n	8003bca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1ed      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4917      	ldr	r1, [pc, #92]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8a:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	490f      	ldr	r1, [pc, #60]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b9e:	f000 f825 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	490c      	ldr	r1, [pc, #48]	@ (8003be0 <HAL_RCC_ClockConfig+0x26c>)
 8003bb0:	5ccb      	ldrb	r3, [r1, r3]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a0a      	ldr	r2, [pc, #40]	@ (8003be4 <HAL_RCC_ClockConfig+0x270>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <HAL_RCC_ClockConfig+0x274>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fc ffa0 	bl	8000b08 <HAL_InitTick>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	04c4b400 	.word	0x04c4b400
 8003be0:	0800a3ec 	.word	0x0800a3ec
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d102      	bne.n	8003c04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e047      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c04:	4b27      	ldr	r3, [pc, #156]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d102      	bne.n	8003c16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c10:	4b26      	ldr	r3, [pc, #152]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e03e      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c16:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b0c      	cmp	r3, #12
 8003c20:	d136      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c22:	4b20      	ldr	r3, [pc, #128]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3301      	adds	r3, #1
 8003c38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c40:	4a1a      	ldr	r2, [pc, #104]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	4a16      	ldr	r2, [pc, #88]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4a:	68d2      	ldr	r2, [r2, #12]
 8003c4c:	0a12      	lsrs	r2, r2, #8
 8003c4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	617b      	str	r3, [r7, #20]
      break;
 8003c58:	e00c      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c5a:	4a13      	ldr	r2, [pc, #76]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	4a10      	ldr	r2, [pc, #64]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	0a12      	lsrs	r2, r2, #8
 8003c68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
      break;
 8003c72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0e5b      	lsrs	r3, r3, #25
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e001      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c94:	693b      	ldr	r3, [r7, #16]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200

08003cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000000 	.word	0x20000000

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ccc:	f7ff fff0 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4904      	ldr	r1, [pc, #16]	@ (8003cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	0800a3fc 	.word	0x0800a3fc

08003cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf8:	f7ff ffda 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0adb      	lsrs	r3, r3, #11
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4904      	ldr	r1, [pc, #16]	@ (8003d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	0800a3fc 	.word	0x0800a3fc

08003d20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d26:	4b1e      	ldr	r3, [pc, #120]	@ (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d10c      	bne.n	8003d5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d44:	4a17      	ldr	r2, [pc, #92]	@ (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	4a14      	ldr	r2, [pc, #80]	@ (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4e:	68d2      	ldr	r2, [r2, #12]
 8003d50:	0a12      	lsrs	r2, r2, #8
 8003d52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]
    break;
 8003d5c:	e00c      	b.n	8003d78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5e:	4a12      	ldr	r2, [pc, #72]	@ (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	4a0e      	ldr	r2, [pc, #56]	@ (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d68:	68d2      	ldr	r2, [r2, #12]
 8003d6a:	0a12      	lsrs	r2, r2, #8
 8003d6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
    break;
 8003d76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d78:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0e5b      	lsrs	r3, r3, #25
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d92:	687b      	ldr	r3, [r7, #4]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40021000 	.word	0x40021000
 8003da4:	007a1200 	.word	0x007a1200
 8003da8:	00f42400 	.word	0x00f42400

08003dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db4:	2300      	movs	r3, #0
 8003db6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db8:	2300      	movs	r3, #0
 8003dba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8098 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dce:	4b43      	ldr	r3, [pc, #268]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	4b40      	ldr	r3, [pc, #256]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	4a3f      	ldr	r2, [pc, #252]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de6:	4b3d      	ldr	r3, [pc, #244]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df2:	2301      	movs	r3, #1
 8003df4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a39      	ldr	r2, [pc, #228]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e02:	f7fc fecd 	bl	8000ba0 <HAL_GetTick>
 8003e06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e08:	e009      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fc fec9 	bl	8000ba0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d902      	bls.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	74fb      	strb	r3, [r7, #19]
        break;
 8003e1c:	e005      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ef      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d159      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e30:	4b2a      	ldr	r3, [pc, #168]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01e      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d019      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e4c:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e58:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e68:	4b1c      	ldr	r3, [pc, #112]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e78:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fc fe89 	bl	8000ba0 <HAL_GetTick>
 8003e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e90:	e00b      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fc fe85 	bl	8000ba0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d902      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea8:	e006      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ec      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ebe:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	4903      	ldr	r1, [pc, #12]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
 8003eda:	e005      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee8:	7c7b      	ldrb	r3, [r7, #17]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4ba6      	ldr	r3, [pc, #664]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	4aa5      	ldr	r2, [pc, #660]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f06:	4ba0      	ldr	r3, [pc, #640]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	f023 0203 	bic.w	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	499c      	ldr	r1, [pc, #624]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f28:	4b97      	ldr	r3, [pc, #604]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f023 020c 	bic.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4994      	ldr	r1, [pc, #592]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	498b      	ldr	r1, [pc, #556]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f6c:	4b86      	ldr	r3, [pc, #536]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4983      	ldr	r1, [pc, #524]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f8e:	4b7e      	ldr	r3, [pc, #504]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	497a      	ldr	r1, [pc, #488]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb0:	4b75      	ldr	r3, [pc, #468]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	4972      	ldr	r1, [pc, #456]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4969      	ldr	r1, [pc, #420]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff4:	4b64      	ldr	r3, [pc, #400]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4961      	ldr	r1, [pc, #388]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004016:	4b5c      	ldr	r3, [pc, #368]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	4958      	ldr	r1, [pc, #352]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d015      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004038:	4b53      	ldr	r3, [pc, #332]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	4950      	ldr	r1, [pc, #320]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004056:	d105      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004058:	4b4b      	ldr	r3, [pc, #300]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a4a      	ldr	r2, [pc, #296]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004062:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004070:	4b45      	ldr	r3, [pc, #276]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	4942      	ldr	r1, [pc, #264]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004090:	4b3d      	ldr	r3, [pc, #244]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a3c      	ldr	r2, [pc, #240]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040a8:	4b37      	ldr	r3, [pc, #220]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	4934      	ldr	r1, [pc, #208]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040c6:	d105      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e0:	4b29      	ldr	r3, [pc, #164]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ee:	4926      	ldr	r1, [pc, #152]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040fe:	d105      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004100:	4b21      	ldr	r3, [pc, #132]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800410a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004118:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	4918      	ldr	r1, [pc, #96]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004138:	4b13      	ldr	r3, [pc, #76]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a12      	ldr	r2, [pc, #72]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004150:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	490a      	ldr	r1, [pc, #40]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800417c:	7cbb      	ldrb	r3, [r7, #18]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000

0800418c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e042      	b.n	8004224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fc fb41 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2224      	movs	r2, #36	@ 0x24
 80041ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f001 f82a 	bl	8005230 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fd5b 	bl	8004c98 <UART_SetConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e01b      	b.n	8004224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800420a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f001 f8a9 	bl	8005374 <UART_CheckIdleState>
 8004222:	4603      	mov	r3, r0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	@ 0x28
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	2b20      	cmp	r3, #32
 8004244:	d17b      	bne.n	800433e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_UART_Transmit+0x26>
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e074      	b.n	8004340 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2221      	movs	r2, #33	@ 0x21
 8004262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004266:	f7fc fc9b 	bl	8000ba0 <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004284:	d108      	bne.n	8004298 <HAL_UART_Transmit+0x6c>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	e003      	b.n	80042a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042a0:	e030      	b.n	8004304 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2180      	movs	r1, #128	@ 0x80
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f001 f90b 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e03d      	b.n	8004340 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	3302      	adds	r3, #2
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	e007      	b.n	80042f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3301      	adds	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1c8      	bne.n	80042a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2200      	movs	r2, #0
 8004318:	2140      	movs	r1, #64	@ 0x40
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f001 f8d4 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e006      	b.n	8004340 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	@ 0x28
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435e:	2b20      	cmp	r3, #32
 8004360:	f040 80b5 	bne.w	80044ce <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_UART_Receive+0x28>
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ad      	b.n	80044d0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2222      	movs	r2, #34	@ 0x22
 8004380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800438a:	f7fc fc09 	bl	8000ba0 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a8:	d10e      	bne.n	80043c8 <HAL_UART_Receive+0x80>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <HAL_UART_Receive+0x76>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80043b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043bc:	e02d      	b.n	800441a <HAL_UART_Receive+0xd2>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22ff      	movs	r2, #255	@ 0xff
 80043c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043c6:	e028      	b.n	800441a <HAL_UART_Receive+0xd2>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <HAL_UART_Receive+0xa4>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_UART_Receive+0x9a>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	22ff      	movs	r2, #255	@ 0xff
 80043dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043e0:	e01b      	b.n	800441a <HAL_UART_Receive+0xd2>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	227f      	movs	r2, #127	@ 0x7f
 80043e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043ea:	e016      	b.n	800441a <HAL_UART_Receive+0xd2>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043f4:	d10d      	bne.n	8004412 <HAL_UART_Receive+0xca>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_UART_Receive+0xc0>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	227f      	movs	r2, #127	@ 0x7f
 8004402:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004406:	e008      	b.n	800441a <HAL_UART_Receive+0xd2>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	223f      	movs	r2, #63	@ 0x3f
 800440c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004410:	e003      	b.n	800441a <HAL_UART_Receive+0xd2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004420:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442a:	d108      	bne.n	800443e <HAL_UART_Receive+0xf6>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e003      	b.n	8004446 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004446:	e036      	b.n	80044b6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2200      	movs	r2, #0
 8004450:	2120      	movs	r1, #32
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f001 f838 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e032      	b.n	80044d0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10c      	bne.n	800448a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	b29a      	uxth	r2, r3
 8004478:	8a7b      	ldrh	r3, [r7, #18]
 800447a:	4013      	ands	r3, r2
 800447c:	b29a      	uxth	r2, r3
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3302      	adds	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e00c      	b.n	80044a4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	b2da      	uxtb	r2, r3
 8004492:	8a7b      	ldrh	r3, [r7, #18]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4013      	ands	r3, r2
 8004498:	b2da      	uxtb	r2, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3301      	adds	r3, #1
 80044a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1c2      	bne.n	8004448 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	@ 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d167      	bne.n	80045c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_UART_Transmit_DMA+0x24>
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e060      	b.n	80045c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2221      	movs	r2, #33	@ 0x21
 8004522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d028      	beq.n	8004580 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004532:	4a26      	ldr	r2, [pc, #152]	@ (80045cc <HAL_UART_Transmit_DMA+0xf4>)
 8004534:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800453a:	4a25      	ldr	r2, [pc, #148]	@ (80045d0 <HAL_UART_Transmit_DMA+0xf8>)
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004542:	4a24      	ldr	r2, [pc, #144]	@ (80045d4 <HAL_UART_Transmit_DMA+0xfc>)
 8004544:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800454a:	2200      	movs	r2, #0
 800454c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004556:	4619      	mov	r1, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3328      	adds	r3, #40	@ 0x28
 800455e:	461a      	mov	r2, r3
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	f7fc fd03 	bl	8000f6c <HAL_DMA_Start_IT>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2210      	movs	r2, #16
 8004570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e020      	b.n	80045c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2240      	movs	r2, #64	@ 0x40
 8004586:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	613b      	str	r3, [r7, #16]
   return(result);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3308      	adds	r3, #8
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	623a      	str	r2, [r7, #32]
 80045aa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	69f9      	ldr	r1, [r7, #28]
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e5      	bne.n	8004588 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	e000      	b.n	80045c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3728      	adds	r7, #40	@ 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	0800583f 	.word	0x0800583f
 80045d0:	080058d9 	.word	0x080058d9
 80045d4:	08005a5f 	.word	0x08005a5f

080045d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0ba      	sub	sp, #232	@ 0xe8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004602:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004606:	4013      	ands	r3, r2
 8004608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800460c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11b      	bne.n	800464c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d015      	beq.n	800464c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800462c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8300 	beq.w	8004c42 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
      }
      return;
 800464a:	e2fa      	b.n	8004c42 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800464c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8123 	beq.w	800489c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004656:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800465a:	4b8d      	ldr	r3, [pc, #564]	@ (8004890 <HAL_UART_IRQHandler+0x2b8>)
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004662:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004666:	4b8b      	ldr	r3, [pc, #556]	@ (8004894 <HAL_UART_IRQHandler+0x2bc>)
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8116 	beq.w	800489c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d011      	beq.n	80046a0 <HAL_UART_IRQHandler+0xc8>
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2201      	movs	r2, #1
 800468e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d011      	beq.n	80046d0 <HAL_UART_IRQHandler+0xf8>
 80046ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2202      	movs	r2, #2
 80046be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f043 0204 	orr.w	r2, r3, #4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d011      	beq.n	8004700 <HAL_UART_IRQHandler+0x128>
 80046dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2204      	movs	r2, #4
 80046ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f043 0202 	orr.w	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d017      	beq.n	800473c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004718:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800471c:	4b5c      	ldr	r3, [pc, #368]	@ (8004890 <HAL_UART_IRQHandler+0x2b8>)
 800471e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2208      	movs	r2, #8
 800472a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f043 0208 	orr.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004744:	2b00      	cmp	r3, #0
 8004746:	d012      	beq.n	800476e <HAL_UART_IRQHandler+0x196>
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800475c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8266 	beq.w	8004c46 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b40      	cmp	r3, #64	@ 0x40
 80047c4:	d005      	beq.n	80047d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d054      	beq.n	800487c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 ffcd 	bl	8005772 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d146      	bne.n	8004874 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3308      	adds	r3, #8
 800480e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004812:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800481e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800482a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1d9      	bne.n	80047e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004842:	4a15      	ldr	r2, [pc, #84]	@ (8004898 <HAL_UART_IRQHandler+0x2c0>)
 8004844:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484c:	4618      	mov	r0, r3
 800484e:	f7fc fc61 	bl	8001114 <HAL_DMA_Abort_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d019      	beq.n	800488c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004866:	4610      	mov	r0, r2
 8004868:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486a:	e00f      	b.n	800488c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f005 fd2d 	bl	800a2cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004872:	e00b      	b.n	800488c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f005 fd29 	bl	800a2cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487a:	e007      	b.n	800488c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f005 fd25 	bl	800a2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800488a:	e1dc      	b.n	8004c46 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	bf00      	nop
    return;
 800488e:	e1da      	b.n	8004c46 <HAL_UART_IRQHandler+0x66e>
 8004890:	10000001 	.word	0x10000001
 8004894:	04000120 	.word	0x04000120
 8004898:	08005adf 	.word	0x08005adf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 8170 	bne.w	8004b86 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8169 	beq.w	8004b86 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8162 	beq.w	8004b86 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2210      	movs	r2, #16
 80048c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	f040 80d8 	bne.w	8004a8a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80af 	beq.w	8004a50 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80048f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048fc:	429a      	cmp	r2, r3
 80048fe:	f080 80a7 	bcs.w	8004a50 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004908:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 8087 	bne.w	8004a2e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800493c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800494a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800494e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004956:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1da      	bne.n	8004920 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800497a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800498e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004992:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004996:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e1      	bne.n	800496a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3308      	adds	r3, #8
 80049ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e3      	bne.n	80049a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049fc:	f023 0310 	bic.w	r3, r3, #16
 8004a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e4      	bne.n	80049ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fc fb1a 	bl	8001062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f005 fbf9 	bl	800a240 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a4e:	e0fc      	b.n	8004c4a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	f040 80f5 	bne.w	8004c4a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	f040 80eb 	bne.w	8004c4a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f005 fbdc 	bl	800a240 <HAL_UARTEx_RxEventCallback>
      return;
 8004a88:	e0df      	b.n	8004c4a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80d1 	beq.w	8004c4e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80cc 	beq.w	8004c4e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ada:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e4      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	623b      	str	r3, [r7, #32]
   return(result);
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b14:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e1      	bne.n	8004aec <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f023 0310 	bic.w	r3, r3, #16
 8004b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	69b9      	ldr	r1, [r7, #24]
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e4      	bne.n	8004b3c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f005 fb5e 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b84:	e063      	b.n	8004c4e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00e      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x5d8>
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 ffd5 	bl	8005b58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bae:	e051      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d014      	beq.n	8004be6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d03a      	beq.n	8004c52 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
    }
    return;
 8004be4:	e035      	b.n	8004c52 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_UART_IRQHandler+0x62e>
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 ff7f 	bl	8005b02 <UART_EndTransmit_IT>
    return;
 8004c04:	e026      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_UART_IRQHandler+0x64e>
 8004c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 ffae 	bl	8005b80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c24:	e016      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_UART_IRQHandler+0x67c>
 8004c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	da0c      	bge.n	8004c54 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 ff96 	bl	8005b6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c40:	e008      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
      return;
 8004c42:	bf00      	nop
 8004c44:	e006      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
    return;
 8004c46:	bf00      	nop
 8004c48:	e004      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
      return;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
      return;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_UART_IRQHandler+0x67c>
    return;
 8004c52:	bf00      	nop
  }
}
 8004c54:	37e8      	adds	r7, #232	@ 0xe8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop

08004c5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c9c:	b08c      	sub	sp, #48	@ 0x30
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4bab      	ldr	r3, [pc, #684]	@ (8004f74 <UART_SetConfig+0x2dc>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4aa0      	ldr	r2, [pc, #640]	@ (8004f78 <UART_SetConfig+0x2e0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d00:	4313      	orrs	r3, r2
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004d0e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	f023 010f 	bic.w	r1, r3, #15
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a91      	ldr	r2, [pc, #580]	@ (8004f7c <UART_SetConfig+0x2e4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d125      	bne.n	8004d88 <UART_SetConfig+0xf0>
 8004d3c:	4b90      	ldr	r3, [pc, #576]	@ (8004f80 <UART_SetConfig+0x2e8>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d81a      	bhi.n	8004d80 <UART_SetConfig+0xe8>
 8004d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d50 <UART_SetConfig+0xb8>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004d71 	.word	0x08004d71
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d79 	.word	0x08004d79
 8004d60:	2301      	movs	r3, #1
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d66:	e0d6      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	e0d2      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004d70:	2304      	movs	r3, #4
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d76:	e0ce      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7e:	e0ca      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004d80:	2310      	movs	r3, #16
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	e0c6      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a7d      	ldr	r2, [pc, #500]	@ (8004f84 <UART_SetConfig+0x2ec>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d138      	bne.n	8004e04 <UART_SetConfig+0x16c>
 8004d92:	4b7b      	ldr	r3, [pc, #492]	@ (8004f80 <UART_SetConfig+0x2e8>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d98:	f003 030c 	and.w	r3, r3, #12
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d82d      	bhi.n	8004dfc <UART_SetConfig+0x164>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <UART_SetConfig+0x110>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004ddd 	.word	0x08004ddd
 8004dac:	08004dfd 	.word	0x08004dfd
 8004db0:	08004dfd 	.word	0x08004dfd
 8004db4:	08004dfd 	.word	0x08004dfd
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004dfd 	.word	0x08004dfd
 8004dc0:	08004dfd 	.word	0x08004dfd
 8004dc4:	08004dfd 	.word	0x08004dfd
 8004dc8:	08004de5 	.word	0x08004de5
 8004dcc:	08004dfd 	.word	0x08004dfd
 8004dd0:	08004dfd 	.word	0x08004dfd
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de2:	e098      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004de4:	2302      	movs	r3, #2
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dea:	e094      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004dec:	2304      	movs	r3, #4
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df2:	e090      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004df4:	2308      	movs	r3, #8
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfa:	e08c      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e02:	e088      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5f      	ldr	r2, [pc, #380]	@ (8004f88 <UART_SetConfig+0x2f0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d125      	bne.n	8004e5a <UART_SetConfig+0x1c2>
 8004e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004f80 <UART_SetConfig+0x2e8>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e18:	2b30      	cmp	r3, #48	@ 0x30
 8004e1a:	d016      	beq.n	8004e4a <UART_SetConfig+0x1b2>
 8004e1c:	2b30      	cmp	r3, #48	@ 0x30
 8004e1e:	d818      	bhi.n	8004e52 <UART_SetConfig+0x1ba>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d00a      	beq.n	8004e3a <UART_SetConfig+0x1a2>
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d814      	bhi.n	8004e52 <UART_SetConfig+0x1ba>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <UART_SetConfig+0x19a>
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d008      	beq.n	8004e42 <UART_SetConfig+0x1aa>
 8004e30:	e00f      	b.n	8004e52 <UART_SetConfig+0x1ba>
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e38:	e06d      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e40:	e069      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e42:	2304      	movs	r3, #4
 8004e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e48:	e065      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e50:	e061      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e52:	2310      	movs	r3, #16
 8004e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e58:	e05d      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8004f8c <UART_SetConfig+0x2f4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d125      	bne.n	8004eb0 <UART_SetConfig+0x218>
 8004e64:	4b46      	ldr	r3, [pc, #280]	@ (8004f80 <UART_SetConfig+0x2e8>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e70:	d016      	beq.n	8004ea0 <UART_SetConfig+0x208>
 8004e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e74:	d818      	bhi.n	8004ea8 <UART_SetConfig+0x210>
 8004e76:	2b80      	cmp	r3, #128	@ 0x80
 8004e78:	d00a      	beq.n	8004e90 <UART_SetConfig+0x1f8>
 8004e7a:	2b80      	cmp	r3, #128	@ 0x80
 8004e7c:	d814      	bhi.n	8004ea8 <UART_SetConfig+0x210>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <UART_SetConfig+0x1f0>
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	d008      	beq.n	8004e98 <UART_SetConfig+0x200>
 8004e86:	e00f      	b.n	8004ea8 <UART_SetConfig+0x210>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8e:	e042      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e90:	2302      	movs	r3, #2
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	e03e      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e03a      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e036      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eae:	e032      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a30      	ldr	r2, [pc, #192]	@ (8004f78 <UART_SetConfig+0x2e0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d12a      	bne.n	8004f10 <UART_SetConfig+0x278>
 8004eba:	4b31      	ldr	r3, [pc, #196]	@ (8004f80 <UART_SetConfig+0x2e8>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ec4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ec8:	d01a      	beq.n	8004f00 <UART_SetConfig+0x268>
 8004eca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ece:	d81b      	bhi.n	8004f08 <UART_SetConfig+0x270>
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed4:	d00c      	beq.n	8004ef0 <UART_SetConfig+0x258>
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eda:	d815      	bhi.n	8004f08 <UART_SetConfig+0x270>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <UART_SetConfig+0x250>
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee4:	d008      	beq.n	8004ef8 <UART_SetConfig+0x260>
 8004ee6:	e00f      	b.n	8004f08 <UART_SetConfig+0x270>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eee:	e012      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef6:	e00e      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efe:	e00a      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f06:	e006      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0e:	e002      	b.n	8004f16 <UART_SetConfig+0x27e>
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <UART_SetConfig+0x2e0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	f040 80a8 	bne.w	8005072 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d834      	bhi.n	8004f94 <UART_SetConfig+0x2fc>
 8004f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <UART_SetConfig+0x298>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f95 	.word	0x08004f95
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f95 	.word	0x08004f95
 8004f40:	08004f63 	.word	0x08004f63
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004f95 	.word	0x08004f95
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f6b 	.word	0x08004f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fe feb8 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8004f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f5a:	e021      	b.n	8004fa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f90 <UART_SetConfig+0x2f8>)
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f60:	e01e      	b.n	8004fa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7fe fe43 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004f66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f68:	e01a      	b.n	8004fa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f70:	e016      	b.n	8004fa0 <UART_SetConfig+0x308>
 8004f72:	bf00      	nop
 8004f74:	cfff69f3 	.word	0xcfff69f3
 8004f78:	40008000 	.word	0x40008000
 8004f7c:	40013800 	.word	0x40013800
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40004400 	.word	0x40004400
 8004f88:	40004800 	.word	0x40004800
 8004f8c:	40004c00 	.word	0x40004c00
 8004f90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 812a 	beq.w	80051fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	4a9e      	ldr	r2, [pc, #632]	@ (8005228 <UART_SetConfig+0x590>)
 8004fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d305      	bcc.n	8004fd8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d903      	bls.n	8004fe0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fde:	e10d      	b.n	80051fc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	60fa      	str	r2, [r7, #12]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	4a8e      	ldr	r2, [pc, #568]	@ (8005228 <UART_SetConfig+0x590>)
 8004fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005002:	f7fb f909 	bl	8000218 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	020b      	lsls	r3, r1, #8
 8005018:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800501c:	0202      	lsls	r2, r0, #8
 800501e:	6979      	ldr	r1, [r7, #20]
 8005020:	6849      	ldr	r1, [r1, #4]
 8005022:	0849      	lsrs	r1, r1, #1
 8005024:	2000      	movs	r0, #0
 8005026:	460c      	mov	r4, r1
 8005028:	4605      	mov	r5, r0
 800502a:	eb12 0804 	adds.w	r8, r2, r4
 800502e:	eb43 0905 	adc.w	r9, r3, r5
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	469a      	mov	sl, r3
 800503a:	4693      	mov	fp, r2
 800503c:	4652      	mov	r2, sl
 800503e:	465b      	mov	r3, fp
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb f8e8 	bl	8000218 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4613      	mov	r3, r2
 800504e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005056:	d308      	bcc.n	800506a <UART_SetConfig+0x3d2>
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800505e:	d204      	bcs.n	800506a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e0c8      	b.n	80051fc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005070:	e0c4      	b.n	80051fc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507a:	d167      	bne.n	800514c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800507c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005080:	2b08      	cmp	r3, #8
 8005082:	d828      	bhi.n	80050d6 <UART_SetConfig+0x43e>
 8005084:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <UART_SetConfig+0x3f4>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050c1 	.word	0x080050c1
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050c7 	.word	0x080050c7
 80050a0:	080050d7 	.word	0x080050d7
 80050a4:	080050d7 	.word	0x080050d7
 80050a8:	080050d7 	.word	0x080050d7
 80050ac:	080050cf 	.word	0x080050cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b0:	f7fe fe0a 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 80050b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050b6:	e014      	b.n	80050e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7fe fe1c 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050be:	e010      	b.n	80050e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c0:	4b5a      	ldr	r3, [pc, #360]	@ (800522c <UART_SetConfig+0x594>)
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050c4:	e00d      	b.n	80050e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c6:	f7fe fd91 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 80050ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050cc:	e009      	b.n	80050e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050d4:	e005      	b.n	80050e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8089 	beq.w	80051fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	4a4e      	ldr	r2, [pc, #312]	@ (8005228 <UART_SetConfig+0x590>)
 80050f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050fc:	005a      	lsls	r2, r3, #1
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	441a      	add	r2, r3
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2b0f      	cmp	r3, #15
 8005114:	d916      	bls.n	8005144 <UART_SetConfig+0x4ac>
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511c:	d212      	bcs.n	8005144 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f023 030f 	bic.w	r3, r3, #15
 8005126:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	b29a      	uxth	r2, r3
 8005134:	8bfb      	ldrh	r3, [r7, #30]
 8005136:	4313      	orrs	r3, r2
 8005138:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	8bfa      	ldrh	r2, [r7, #30]
 8005140:	60da      	str	r2, [r3, #12]
 8005142:	e05b      	b.n	80051fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800514a:	e057      	b.n	80051fc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800514c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005150:	2b08      	cmp	r3, #8
 8005152:	d828      	bhi.n	80051a6 <UART_SetConfig+0x50e>
 8005154:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <UART_SetConfig+0x4c4>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005181 	.word	0x08005181
 8005160:	08005189 	.word	0x08005189
 8005164:	08005191 	.word	0x08005191
 8005168:	080051a7 	.word	0x080051a7
 800516c:	08005197 	.word	0x08005197
 8005170:	080051a7 	.word	0x080051a7
 8005174:	080051a7 	.word	0x080051a7
 8005178:	080051a7 	.word	0x080051a7
 800517c:	0800519f 	.word	0x0800519f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005180:	f7fe fda2 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8005184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005186:	e014      	b.n	80051b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005188:	f7fe fdb4 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 800518c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800518e:	e010      	b.n	80051b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005190:	4b26      	ldr	r3, [pc, #152]	@ (800522c <UART_SetConfig+0x594>)
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005194:	e00d      	b.n	80051b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005196:	f7fe fd29 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 800519a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800519c:	e009      	b.n	80051b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051a4:	e005      	b.n	80051b2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051b0:	bf00      	nop
    }

    if (pclk != 0U)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d021      	beq.n	80051fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005228 <UART_SetConfig+0x590>)
 80051be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c2:	461a      	mov	r2, r3
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	441a      	add	r2, r3
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d909      	bls.n	80051f6 <UART_SetConfig+0x55e>
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d205      	bcs.n	80051f6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60da      	str	r2, [r3, #12]
 80051f4:	e002      	b.n	80051fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2201      	movs	r2, #1
 8005200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2201      	movs	r2, #1
 8005208:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2200      	movs	r2, #0
 8005210:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2200      	movs	r2, #0
 8005216:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005218:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800521c:	4618      	mov	r0, r3
 800521e:	3730      	adds	r7, #48	@ 0x30
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	0800a404 	.word	0x0800a404
 800522c:	00f42400 	.word	0x00f42400

08005230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800532e:	d10a      	bne.n	8005346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b098      	sub	sp, #96	@ 0x60
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005384:	f7fb fc0c 	bl	8000ba0 <HAL_GetTick>
 8005388:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d12f      	bne.n	80053f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f88e 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d022      	beq.n	80053f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e6      	bne.n	80053b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e063      	b.n	80054c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b04      	cmp	r3, #4
 8005404:	d149      	bne.n	800549a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005406:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540e:	2200      	movs	r2, #0
 8005410:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f857 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d03c      	beq.n	800549a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	623b      	str	r3, [r7, #32]
   return(result);
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800543e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005440:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e6      	bne.n	8005420 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	60fb      	str	r3, [r7, #12]
   return(result);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	64bb      	str	r3, [r7, #72]	@ 0x48
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3308      	adds	r3, #8
 8005470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005472:	61fa      	str	r2, [r7, #28]
 8005474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	617b      	str	r3, [r7, #20]
   return(result);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e5      	bne.n	8005452 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e012      	b.n	80054c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3758      	adds	r7, #88	@ 0x58
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d8:	e04f      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d04b      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e2:	f7fb fb5d 	bl	8000ba0 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d302      	bcc.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e04e      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d037      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0xb2>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b80      	cmp	r3, #128	@ 0x80
 800550e:	d034      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b40      	cmp	r3, #64	@ 0x40
 8005514:	d031      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d110      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2208      	movs	r2, #8
 800552a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f920 	bl	8005772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2208      	movs	r2, #8
 8005536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e029      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005554:	d111      	bne.n	800557a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800555e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f906 	bl	8005772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e00f      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	429a      	cmp	r2, r3
 8005596:	d0a0      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b096      	sub	sp, #88	@ 0x58
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2222      	movs	r2, #34	@ 0x22
 80055cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02d      	beq.n	8005636 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e0:	4a40      	ldr	r2, [pc, #256]	@ (80056e4 <UART_Start_Receive_DMA+0x140>)
 80055e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ea:	4a3f      	ldr	r2, [pc, #252]	@ (80056e8 <UART_Start_Receive_DMA+0x144>)
 80055ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f4:	4a3d      	ldr	r2, [pc, #244]	@ (80056ec <UART_Start_Receive_DMA+0x148>)
 80055f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055fe:	2200      	movs	r2, #0
 8005600:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3324      	adds	r3, #36	@ 0x24
 800560e:	4619      	mov	r1, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005614:	461a      	mov	r2, r3
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	f7fb fca8 	bl	8000f6c <HAL_DMA_Start_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2210      	movs	r2, #16
 8005626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e051      	b.n	80056da <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d018      	beq.n	8005670 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005652:	657b      	str	r3, [r7, #84]	@ 0x54
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800565e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800566a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e6      	bne.n	800563e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	653b      	str	r3, [r7, #80]	@ 0x50
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005690:	637a      	str	r2, [r7, #52]	@ 0x34
 8005692:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005696:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800569e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e5      	bne.n	8005670 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	613b      	str	r3, [r7, #16]
   return(result);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056c4:	623a      	str	r2, [r7, #32]
 80056c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3758      	adds	r7, #88	@ 0x58
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	080058f5 	.word	0x080058f5
 80056e8:	08005a21 	.word	0x08005a21
 80056ec:	08005a5f 	.word	0x08005a5f

080056f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b08f      	sub	sp, #60	@ 0x3c
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	61fb      	str	r3, [r7, #28]
   return(result);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800570c:	637b      	str	r3, [r7, #52]	@ 0x34
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005718:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800571c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e6      	bne.n	80056f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3308      	adds	r3, #8
 8005730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	60bb      	str	r3, [r7, #8]
   return(result);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800574a:	61ba      	str	r2, [r7, #24]
 800574c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	613b      	str	r3, [r7, #16]
   return(result);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e5      	bne.n	800572a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005766:	bf00      	nop
 8005768:	373c      	adds	r7, #60	@ 0x3c
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005772:	b480      	push	{r7}
 8005774:	b095      	sub	sp, #84	@ 0x54
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800578e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005798:	643b      	str	r3, [r7, #64]	@ 0x40
 800579a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800579e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e6      	bne.n	800577a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3308      	adds	r3, #8
 80057ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e3      	bne.n	80057ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d118      	bne.n	800581e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f023 0310 	bic.w	r3, r3, #16
 8005800:	647b      	str	r3, [r7, #68]	@ 0x44
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6979      	ldr	r1, [r7, #20]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	613b      	str	r3, [r7, #16]
   return(result);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e6      	bne.n	80057ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005832:	bf00      	nop
 8005834:	3754      	adds	r7, #84	@ 0x54
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b090      	sub	sp, #64	@ 0x40
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d137      	bne.n	80058ca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800585a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585c:	2200      	movs	r2, #0
 800585e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	623b      	str	r3, [r7, #32]
   return(result);
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800587a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005882:	633a      	str	r2, [r7, #48]	@ 0x30
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	617b      	str	r3, [r7, #20]
   return(result);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e6      	bne.n	8005896 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058c8:	e002      	b.n	80058d0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058ca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80058cc:	f004 fcdc 	bl	800a288 <HAL_UART_TxCpltCallback>
}
 80058d0:	bf00      	nop
 80058d2:	3740      	adds	r7, #64	@ 0x40
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff f9b8 	bl	8004c5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b09c      	sub	sp, #112	@ 0x70
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d171      	bne.n	80059f4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005912:	2200      	movs	r2, #0
 8005914:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800592c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800592e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005936:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005938:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800593c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e6      	bne.n	8005918 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3308      	adds	r3, #8
 8005950:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800595a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	667b      	str	r3, [r7, #100]	@ 0x64
 8005962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800596a:	647a      	str	r2, [r7, #68]	@ 0x44
 800596c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005970:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e5      	bne.n	800594a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	623b      	str	r3, [r7, #32]
   return(result);
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005994:	663b      	str	r3, [r7, #96]	@ 0x60
 8005996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800599e:	633a      	str	r2, [r7, #48]	@ 0x30
 80059a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059b4:	2220      	movs	r2, #32
 80059b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d118      	bne.n	80059f4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	69b9      	ldr	r1, [r7, #24]
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	617b      	str	r3, [r7, #20]
   return(result);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059f6:	2200      	movs	r2, #0
 80059f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d107      	bne.n	8005a12 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a0c:	f004 fc18 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a10:	e002      	b.n	8005a18 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a14:	f7ff f92c 	bl	8004c70 <HAL_UART_RxCpltCallback>
}
 8005a18:	bf00      	nop
 8005a1a:	3770      	adds	r7, #112	@ 0x70
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d109      	bne.n	8005a50 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4619      	mov	r1, r3
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f004 fbf9 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a4e:	e002      	b.n	8005a56 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff f917 	bl	8004c84 <HAL_UART_RxHalfCpltCallback>
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b80      	cmp	r3, #128	@ 0x80
 8005a88:	d109      	bne.n	8005a9e <UART_DMAError+0x40>
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b21      	cmp	r3, #33	@ 0x21
 8005a8e:	d106      	bne.n	8005a9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005a98:	6978      	ldr	r0, [r7, #20]
 8005a9a:	f7ff fe29 	bl	80056f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d109      	bne.n	8005ac0 <UART_DMAError+0x62>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b22      	cmp	r3, #34	@ 0x22
 8005ab0:	d106      	bne.n	8005ac0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005aba:	6978      	ldr	r0, [r7, #20]
 8005abc:	f7ff fe59 	bl	8005772 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac6:	f043 0210 	orr.w	r2, r3, #16
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad0:	6978      	ldr	r0, [r7, #20]
 8005ad2:	f004 fbfb 	bl	800a2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad6:	bf00      	nop
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f004 fbe9 	bl	800a2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6979      	ldr	r1, [r7, #20]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	613b      	str	r3, [r7, #16]
   return(result);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e6      	bne.n	8005b0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f004 fb9c 	bl	800a288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b50:	bf00      	nop
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_UARTEx_DisableFifoMode+0x16>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e027      	b.n	8005bfa <HAL_UARTEx_DisableFifoMode+0x66>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2224      	movs	r2, #36	@ 0x24
 8005bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e02d      	b.n	8005c7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2224      	movs	r2, #36	@ 0x24
 8005c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f8a4 	bl	8005da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e02d      	b.n	8005cf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2224      	movs	r2, #36	@ 0x24
 8005ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f866 	bl	8005da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b08c      	sub	sp, #48	@ 0x30
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d142      	bne.n	8005d9c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e03b      	b.n	8005d9e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	461a      	mov	r2, r3
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fc33 	bl	80055a4 <UART_Start_Receive_DMA>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d124      	bne.n	8005d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d11d      	bne.n	8005d90 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f043 0310 	orr.w	r3, r3, #16
 8005d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6a39      	ldr	r1, [r7, #32]
 8005d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e6      	bne.n	8005d5c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8005d8e:	e002      	b.n	8005d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005d96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d9a:	e000      	b.n	8005d9e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3730      	adds	r7, #48	@ 0x30
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d108      	bne.n	8005dca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dc8:	e031      	b.n	8005e2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dca:	2308      	movs	r3, #8
 8005dcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dce:	2308      	movs	r3, #8
 8005dd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	0e5b      	lsrs	r3, r3, #25
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	0f5b      	lsrs	r3, r3, #29
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	7b3a      	ldrb	r2, [r7, #12]
 8005df6:	4911      	ldr	r1, [pc, #68]	@ (8005e3c <UARTEx_SetNbDataToProcess+0x94>)
 8005df8:	5c8a      	ldrb	r2, [r1, r2]
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dfe:	7b3a      	ldrb	r2, [r7, #12]
 8005e00:	490f      	ldr	r1, [pc, #60]	@ (8005e40 <UARTEx_SetNbDataToProcess+0x98>)
 8005e02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e04:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	7b7a      	ldrb	r2, [r7, #13]
 8005e14:	4909      	ldr	r1, [pc, #36]	@ (8005e3c <UARTEx_SetNbDataToProcess+0x94>)
 8005e16:	5c8a      	ldrb	r2, [r1, r2]
 8005e18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e1c:	7b7a      	ldrb	r2, [r7, #13]
 8005e1e:	4908      	ldr	r1, [pc, #32]	@ (8005e40 <UARTEx_SetNbDataToProcess+0x98>)
 8005e20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e22:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	0800a41c 	.word	0x0800a41c
 8005e40:	0800a424 	.word	0x0800a424

08005e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e54:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e7a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	4013      	ands	r3, r2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	1d3b      	adds	r3, r7, #4
 8005eb2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b0a7      	sub	sp, #156	@ 0x9c
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	78db      	ldrb	r3, [r3, #3]
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d81f      	bhi.n	8005f56 <USB_ActivateEndpoint+0x72>
 8005f16:	a201      	add	r2, pc, #4	@ (adr r2, 8005f1c <USB_ActivateEndpoint+0x38>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f49 	.word	0x08005f49
 8005f24:	08005f5f 	.word	0x08005f5f
 8005f28:	08005f3b 	.word	0x08005f3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f2c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f34:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f38:	e012      	b.n	8005f60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f3a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f3e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005f42:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f46:	e00b      	b.n	8005f60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f48:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f50:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f54:	e004      	b.n	8005f60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005f5c:	e000      	b.n	8005f60 <USB_ActivateEndpoint+0x7c>
      break;
 8005f5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	b21b      	sxth	r3, r3
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9a:	b21a      	sxth	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b21b      	sxth	r3, r3
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	b21b      	sxth	r3, r3
 8005fa6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	7b1b      	ldrb	r3, [r3, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 8180 	bne.w	80062d6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8084 	beq.w	80060e8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	00da      	lsls	r2, r3, #3
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	88db      	ldrh	r3, [r3, #6]
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	b29b      	uxth	r3, r3
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	827b      	strh	r3, [r7, #18]
 8006022:	8a7b      	ldrh	r3, [r7, #18]
 8006024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01b      	beq.n	8006064 <USB_ActivateEndpoint+0x180>
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006042:	823b      	strh	r3, [r7, #16]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	8a3b      	ldrh	r3, [r7, #16]
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	78db      	ldrb	r3, [r3, #3]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d020      	beq.n	80060ae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006082:	81bb      	strh	r3, [r7, #12]
 8006084:	89bb      	ldrh	r3, [r7, #12]
 8006086:	f083 0320 	eor.w	r3, r3, #32
 800608a:	81bb      	strh	r3, [r7, #12]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	441a      	add	r2, r3
 8006096:	89bb      	ldrh	r3, [r7, #12]
 8006098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800609c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	8013      	strh	r3, [r2, #0]
 80060ac:	e3f9      	b.n	80068a2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c4:	81fb      	strh	r3, [r7, #14]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	441a      	add	r2, r3
 80060d0:	89fb      	ldrh	r3, [r7, #14]
 80060d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	8013      	strh	r3, [r2, #0]
 80060e6:	e3dc      	b.n	80068a2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	4413      	add	r3, r2
 80060fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	00da      	lsls	r2, r3, #3
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	4413      	add	r3, r2
 8006106:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800610a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	88db      	ldrh	r3, [r3, #6]
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	b29b      	uxth	r3, r3
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	4413      	add	r3, r2
 800612e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	00da      	lsls	r2, r3, #3
 8006136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006138:	4413      	add	r3, r2
 800613a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614a:	b29a      	uxth	r2, r3
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <USB_ActivateEndpoint+0x28a>
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006166:	b29a      	uxth	r2, r3
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e041      	b.n	80061f2 <USB_ActivateEndpoint+0x30e>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b3e      	cmp	r3, #62	@ 0x3e
 8006174:	d81c      	bhi.n	80061b0 <USB_ActivateEndpoint+0x2cc>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <USB_ActivateEndpoint+0x2b2>
 800618c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006190:	3301      	adds	r3, #1
 8006192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	029b      	lsls	r3, r3, #10
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4313      	orrs	r3, r2
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	e020      	b.n	80061f2 <USB_ActivateEndpoint+0x30e>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USB_ActivateEndpoint+0x2ec>
 80061c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061ca:	3b01      	subs	r3, #1
 80061cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006200:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <USB_ActivateEndpoint+0x35e>
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800621c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006220:	843b      	strh	r3, [r7, #32]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	441a      	add	r2, r3
 800622c:	8c3b      	ldrh	r3, [r7, #32]
 800622e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800623a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d124      	bne.n	8006294 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800625c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006260:	83bb      	strh	r3, [r7, #28]
 8006262:	8bbb      	ldrh	r3, [r7, #28]
 8006264:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006268:	83bb      	strh	r3, [r7, #28]
 800626a:	8bbb      	ldrh	r3, [r7, #28]
 800626c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006270:	83bb      	strh	r3, [r7, #28]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	441a      	add	r2, r3
 800627c:	8bbb      	ldrh	r3, [r7, #28]
 800627e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800628a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800628e:	b29b      	uxth	r3, r3
 8006290:	8013      	strh	r3, [r2, #0]
 8006292:	e306      	b.n	80068a2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062aa:	83fb      	strh	r3, [r7, #30]
 80062ac:	8bfb      	ldrh	r3, [r7, #30]
 80062ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062b2:	83fb      	strh	r3, [r7, #30]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	8bfb      	ldrh	r3, [r7, #30]
 80062c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	8013      	strh	r3, [r2, #0]
 80062d4:	e2e5      	b.n	80068a2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	78db      	ldrb	r3, [r3, #3]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d11e      	bne.n	800631c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800630e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]
 800631a:	e01d      	b.n	8006358 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800632e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006332:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006354:	b29b      	uxth	r3, r3
 8006356:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006368:	4413      	add	r3, r2
 800636a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00da      	lsls	r2, r3, #3
 8006372:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006374:	4413      	add	r3, r2
 8006376:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800637a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	891b      	ldrh	r3, [r3, #8]
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	b29b      	uxth	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800639c:	4413      	add	r3, r2
 800639e:	677b      	str	r3, [r7, #116]	@ 0x74
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00da      	lsls	r2, r3, #3
 80063a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063a8:	4413      	add	r3, r2
 80063aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	895b      	ldrh	r3, [r3, #10]
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 81af 	bne.w	8006728 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80063da:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80063de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01d      	beq.n	8006422 <USB_ActivateEndpoint+0x53e>
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063fc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	441a      	add	r2, r3
 800640a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006416:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800641a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006432:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01d      	beq.n	800647a <USB_ActivateEndpoint+0x596>
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006454:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006472:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d16b      	bne.n	800655a <USB_ActivateEndpoint+0x676>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648c:	b29b      	uxth	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006492:	4413      	add	r3, r2
 8006494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	00da      	lsls	r2, r3, #3
 800649c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649e:	4413      	add	r3, r2
 80064a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <USB_ActivateEndpoint+0x5f0>
 80064be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e05d      	b.n	8006590 <USB_ActivateEndpoint+0x6ac>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80064da:	d81c      	bhi.n	8006516 <USB_ActivateEndpoint+0x632>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <USB_ActivateEndpoint+0x618>
 80064f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f6:	3301      	adds	r3, #1
 80064f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006506:	b29b      	uxth	r3, r3
 8006508:	029b      	lsls	r3, r3, #10
 800650a:	b29b      	uxth	r3, r3
 800650c:	4313      	orrs	r3, r2
 800650e:	b29a      	uxth	r2, r3
 8006510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	e03c      	b.n	8006590 <USB_ActivateEndpoint+0x6ac>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <USB_ActivateEndpoint+0x652>
 800652c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006530:	3b01      	subs	r3, #1
 8006532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29b      	uxth	r3, r3
 8006546:	4313      	orrs	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006552:	b29a      	uxth	r2, r3
 8006554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e01a      	b.n	8006590 <USB_ActivateEndpoint+0x6ac>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d116      	bne.n	8006590 <USB_ActivateEndpoint+0x6ac>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	657b      	str	r3, [r7, #84]	@ 0x54
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800656c:	b29b      	uxth	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006572:	4413      	add	r3, r2
 8006574:	657b      	str	r3, [r7, #84]	@ 0x54
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	00da      	lsls	r2, r3, #3
 800657c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800657e:	4413      	add	r3, r2
 8006580:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006584:	653b      	str	r3, [r7, #80]	@ 0x50
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	b29a      	uxth	r2, r3
 800658c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	647b      	str	r3, [r7, #68]	@ 0x44
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d16b      	bne.n	8006674 <USB_ActivateEndpoint+0x790>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ac:	4413      	add	r3, r2
 80065ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	00da      	lsls	r2, r3, #3
 80065b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b8:	4413      	add	r3, r2
 80065ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <USB_ActivateEndpoint+0x70a>
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e05b      	b.n	80066a6 <USB_ActivateEndpoint+0x7c2>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80065f4:	d81c      	bhi.n	8006630 <USB_ActivateEndpoint+0x74c>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <USB_ActivateEndpoint+0x732>
 800660c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006610:	3301      	adds	r3, #1
 8006612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29b      	uxth	r3, r3
 8006626:	4313      	orrs	r3, r2
 8006628:	b29a      	uxth	r2, r3
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	e03a      	b.n	80066a6 <USB_ActivateEndpoint+0x7c2>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <USB_ActivateEndpoint+0x76c>
 8006646:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800664a:	3b01      	subs	r3, #1
 800664c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800665a:	b29b      	uxth	r3, r3
 800665c:	029b      	lsls	r3, r3, #10
 800665e:	b29b      	uxth	r3, r3
 8006660:	4313      	orrs	r3, r2
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666c:	b29a      	uxth	r2, r3
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	e018      	b.n	80066a6 <USB_ActivateEndpoint+0x7c2>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d114      	bne.n	80066a6 <USB_ActivateEndpoint+0x7c2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006682:	b29b      	uxth	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006688:	4413      	add	r3, r2
 800668a:	647b      	str	r3, [r7, #68]	@ 0x44
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	00da      	lsls	r2, r3, #3
 8006692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006694:	4413      	add	r3, r2
 8006696:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800669a:	643b      	str	r3, [r7, #64]	@ 0x40
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80066be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80066c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006704:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]
 8006726:	e0bc      	b.n	80068a2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006738:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800673c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01d      	beq.n	8006780 <USB_ActivateEndpoint+0x89c>
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006790:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01d      	beq.n	80067d8 <USB_ActivateEndpoint+0x8f4>
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80067c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	78db      	ldrb	r3, [r3, #3]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d024      	beq.n	800682a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067fe:	f083 0320 	eor.w	r3, r3, #32
 8006802:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]
 8006828:	e01d      	b.n	8006866 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006840:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	441a      	add	r2, r3
 800688a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80068a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	379c      	adds	r7, #156	@ 0x9c
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop

080068b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b08d      	sub	sp, #52	@ 0x34
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	7b1b      	ldrb	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 808e 	bne.w	80069e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d044      	beq.n	800695a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	81bb      	strh	r3, [r7, #12]
 80068de:	89bb      	ldrh	r3, [r7, #12]
 80068e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01b      	beq.n	8006920 <USB_DeactivateEndpoint+0x6c>
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fe:	817b      	strh	r3, [r7, #10]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	897b      	ldrh	r3, [r7, #10]
 800690c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006918:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800691c:	b29b      	uxth	r3, r3
 800691e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006936:	813b      	strh	r3, [r7, #8]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	893b      	ldrh	r3, [r7, #8]
 8006944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006954:	b29b      	uxth	r3, r3
 8006956:	8013      	strh	r3, [r2, #0]
 8006958:	e192      	b.n	8006c80 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	827b      	strh	r3, [r7, #18]
 8006968:	8a7b      	ldrh	r3, [r7, #18]
 800696a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01b      	beq.n	80069aa <USB_DeactivateEndpoint+0xf6>
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006988:	823b      	strh	r3, [r7, #16]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	8a3b      	ldrh	r3, [r7, #16]
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c0:	81fb      	strh	r3, [r7, #14]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	89fb      	ldrh	r3, [r7, #14]
 80069ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069de:	b29b      	uxth	r3, r3
 80069e0:	8013      	strh	r3, [r2, #0]
 80069e2:	e14d      	b.n	8006c80 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f040 80a5 	bne.w	8006b38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	843b      	strh	r3, [r7, #32]
 80069fc:	8c3b      	ldrh	r3, [r7, #32]
 80069fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01b      	beq.n	8006a3e <USB_DeactivateEndpoint+0x18a>
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a1c:	83fb      	strh	r3, [r7, #30]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	8bfb      	ldrh	r3, [r7, #30]
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	83bb      	strh	r3, [r7, #28]
 8006a4c:	8bbb      	ldrh	r3, [r7, #28]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01b      	beq.n	8006a8e <USB_DeactivateEndpoint+0x1da>
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6c:	837b      	strh	r3, [r7, #26]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	8b7b      	ldrh	r3, [r7, #26]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa4:	833b      	strh	r3, [r7, #24]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	8b3b      	ldrh	r3, [r7, #24]
 8006ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006adc:	82fb      	strh	r3, [r7, #22]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	441a      	add	r2, r3
 8006ae8:	8afb      	ldrh	r3, [r7, #22]
 8006aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b14:	82bb      	strh	r3, [r7, #20]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	8abb      	ldrh	r3, [r7, #20]
 8006b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	8013      	strh	r3, [r2, #0]
 8006b36:	e0a3      	b.n	8006c80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006b46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01b      	beq.n	8006b88 <USB_DeactivateEndpoint+0x2d4>
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006b96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01b      	beq.n	8006bd8 <USB_DeactivateEndpoint+0x324>
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c26:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3734      	adds	r7, #52	@ 0x34
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b0ac      	sub	sp, #176	@ 0xb0
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	f040 84ca 	bne.w	8007636 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d904      	bls.n	8006cb8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cb6:	e003      	b.n	8006cc0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	7b1b      	ldrb	r3, [r3, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d122      	bne.n	8006d0e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	6959      	ldr	r1, [r3, #20]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	88da      	ldrh	r2, [r3, #6]
 8006cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 febd 	bl	8007a56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	00da      	lsls	r2, r3, #3
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	f000 bc6f 	b.w	80075ec <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	78db      	ldrb	r3, [r3, #3]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	f040 831e 	bne.w	8007354 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	6a1a      	ldr	r2, [r3, #32]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	f240 82cf 	bls.w	80072c4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d56:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6a1a      	ldr	r2, [r3, #32]
 8006d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 814f 	beq.w	8007026 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d16b      	bne.n	8006e6c <USB_EPStartXfer+0x1de>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	4413      	add	r3, r2
 8006da6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00da      	lsls	r2, r3, #3
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <USB_EPStartXfer+0x158>
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e05b      	b.n	8006e9e <USB_EPStartXfer+0x210>
 8006de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dea:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dec:	d81c      	bhi.n	8006e28 <USB_EPStartXfer+0x19a>
 8006dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <USB_EPStartXfer+0x180>
 8006e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	029b      	lsls	r3, r3, #10
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e03a      	b.n	8006e9e <USB_EPStartXfer+0x210>
 8006e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <USB_EPStartXfer+0x1ba>
 8006e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e42:	3b01      	subs	r3, #1
 8006e44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e018      	b.n	8006e9e <USB_EPStartXfer+0x210>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d114      	bne.n	8006e9e <USB_EPStartXfer+0x210>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	4413      	add	r3, r2
 8006e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	00da      	lsls	r2, r3, #3
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	895b      	ldrh	r3, [r3, #10]
 8006ea2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6959      	ldr	r1, [r3, #20]
 8006eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fdce 	bl	8007a56 <USB_WritePMA>
            ep->xfer_buff += len;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695a      	ldr	r2, [r3, #20]
 8006ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ec2:	441a      	add	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d907      	bls.n	8006ee4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6a1a      	ldr	r2, [r3, #32]
 8006ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006edc:	1ad2      	subs	r2, r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	621a      	str	r2, [r3, #32]
 8006ee2:	e006      	b.n	8006ef2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d16b      	bne.n	8006fd2 <USB_EPStartXfer+0x344>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	00da      	lsls	r2, r3, #3
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	4413      	add	r3, r2
 8006f18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <USB_EPStartXfer+0x2be>
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	e05d      	b.n	8007008 <USB_EPStartXfer+0x37a>
 8006f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f50:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f52:	d81c      	bhi.n	8006f8e <USB_EPStartXfer+0x300>
 8006f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f58:	085b      	lsrs	r3, r3, #1
 8006f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <USB_EPStartXfer+0x2e6>
 8006f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f6e:	3301      	adds	r3, #1
 8006f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	029b      	lsls	r3, r3, #10
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	e03c      	b.n	8007008 <USB_EPStartXfer+0x37a>
 8006f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <USB_EPStartXfer+0x320>
 8006fa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	029b      	lsls	r3, r3, #10
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e01a      	b.n	8007008 <USB_EPStartXfer+0x37a>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d116      	bne.n	8007008 <USB_EPStartXfer+0x37a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	623b      	str	r3, [r7, #32]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	4413      	add	r3, r2
 8006fec:	623b      	str	r3, [r7, #32]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	00da      	lsls	r2, r3, #3
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007002:	b29a      	uxth	r2, r3
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	891b      	ldrh	r3, [r3, #8]
 800700c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6959      	ldr	r1, [r3, #20]
 8007014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007018:	b29b      	uxth	r3, r3
 800701a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fd19 	bl	8007a56 <USB_WritePMA>
 8007024:	e2e2      	b.n	80075ec <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d16b      	bne.n	8007106 <USB_EPStartXfer+0x478>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007038:	b29b      	uxth	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800703e:	4413      	add	r3, r2
 8007040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	00da      	lsls	r2, r3, #3
 8007048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800704a:	4413      	add	r3, r2
 800704c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007050:	647b      	str	r3, [r7, #68]	@ 0x44
 8007052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800705c:	b29a      	uxth	r2, r3
 800705e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <USB_EPStartXfer+0x3f2>
 800706a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007078:	b29a      	uxth	r2, r3
 800707a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	e05d      	b.n	800713c <USB_EPStartXfer+0x4ae>
 8007080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007084:	2b3e      	cmp	r3, #62	@ 0x3e
 8007086:	d81c      	bhi.n	80070c2 <USB_EPStartXfer+0x434>
 8007088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800708c:	085b      	lsrs	r3, r3, #1
 800708e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <USB_EPStartXfer+0x41a>
 800709e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070a2:	3301      	adds	r3, #1
 80070a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e03c      	b.n	800713c <USB_EPStartXfer+0x4ae>
 80070c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070d0:	f003 031f 	and.w	r3, r3, #31
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <USB_EPStartXfer+0x454>
 80070d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070dc:	3b01      	subs	r3, #1
 80070de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	4313      	orrs	r3, r2
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fe:	b29a      	uxth	r2, r3
 8007100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e01a      	b.n	800713c <USB_EPStartXfer+0x4ae>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	785b      	ldrb	r3, [r3, #1]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d116      	bne.n	800713c <USB_EPStartXfer+0x4ae>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	653b      	str	r3, [r7, #80]	@ 0x50
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800711e:	4413      	add	r3, r2
 8007120:	653b      	str	r3, [r7, #80]	@ 0x50
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	00da      	lsls	r2, r3, #3
 8007128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800712a:	4413      	add	r3, r2
 800712c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007130:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007136:	b29a      	uxth	r2, r3
 8007138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	891b      	ldrh	r3, [r3, #8]
 8007140:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	6959      	ldr	r1, [r3, #20]
 8007148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800714c:	b29b      	uxth	r3, r3
 800714e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc7f 	bl	8007a56 <USB_WritePMA>
            ep->xfer_buff += len;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007160:	441a      	add	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6a1a      	ldr	r2, [r3, #32]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	429a      	cmp	r2, r3
 8007170:	d907      	bls.n	8007182 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6a1a      	ldr	r2, [r3, #32]
 8007176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800717a:	1ad2      	subs	r2, r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	621a      	str	r2, [r3, #32]
 8007180:	e006      	b.n	8007190 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	643b      	str	r3, [r7, #64]	@ 0x40
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	785b      	ldrb	r3, [r3, #1]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d16b      	bne.n	8007274 <USB_EPStartXfer+0x5e6>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	4413      	add	r3, r2
 80071ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	00da      	lsls	r2, r3, #3
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <USB_EPStartXfer+0x560>
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e05b      	b.n	80072a6 <USB_EPStartXfer+0x618>
 80071ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80071f4:	d81c      	bhi.n	8007230 <USB_EPStartXfer+0x5a2>
 80071f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <USB_EPStartXfer+0x588>
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007210:	3301      	adds	r3, #1
 8007212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29a      	uxth	r2, r3
 800721c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007220:	b29b      	uxth	r3, r3
 8007222:	029b      	lsls	r3, r3, #10
 8007224:	b29b      	uxth	r3, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	b29a      	uxth	r2, r3
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	e03a      	b.n	80072a6 <USB_EPStartXfer+0x618>
 8007230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800723a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	2b00      	cmp	r3, #0
 8007244:	d104      	bne.n	8007250 <USB_EPStartXfer+0x5c2>
 8007246:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800724a:	3b01      	subs	r3, #1
 800724c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29a      	uxth	r2, r3
 8007256:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800725a:	b29b      	uxth	r3, r3
 800725c:	029b      	lsls	r3, r3, #10
 800725e:	b29b      	uxth	r3, r3
 8007260:	4313      	orrs	r3, r2
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	e018      	b.n	80072a6 <USB_EPStartXfer+0x618>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d114      	bne.n	80072a6 <USB_EPStartXfer+0x618>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007288:	4413      	add	r3, r2
 800728a:	643b      	str	r3, [r7, #64]	@ 0x40
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	00da      	lsls	r2, r3, #3
 8007292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007294:	4413      	add	r3, r2
 8007296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800729a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800729c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	895b      	ldrh	r3, [r3, #10]
 80072aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6959      	ldr	r1, [r3, #20]
 80072b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fbca 	bl	8007a56 <USB_WritePMA>
 80072c2:	e193      	b.n	80075ec <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80072de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	441a      	add	r2, r3
 80072f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80072f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007304:	b29b      	uxth	r3, r3
 8007306:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007312:	b29b      	uxth	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007318:	4413      	add	r3, r2
 800731a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	00da      	lsls	r2, r3, #3
 8007322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007324:	4413      	add	r3, r2
 8007326:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800732a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800732c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007330:	b29a      	uxth	r2, r3
 8007332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007334:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	891b      	ldrh	r3, [r3, #8]
 800733a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	6959      	ldr	r1, [r3, #20]
 8007342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007346:	b29b      	uxth	r3, r3
 8007348:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb82 	bl	8007a56 <USB_WritePMA>
 8007352:	e14b      	b.n	80075ec <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 809a 	beq.w	80074ae <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	673b      	str	r3, [r7, #112]	@ 0x70
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d16b      	bne.n	800745e <USB_EPStartXfer+0x7d0>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007390:	b29b      	uxth	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007396:	4413      	add	r3, r2
 8007398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	00da      	lsls	r2, r3, #3
 80073a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073a2:	4413      	add	r3, r2
 80073a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <USB_EPStartXfer+0x74a>
 80073c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e05b      	b.n	8007490 <USB_EPStartXfer+0x802>
 80073d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80073de:	d81c      	bhi.n	800741a <USB_EPStartXfer+0x78c>
 80073e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <USB_EPStartXfer+0x772>
 80073f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073fa:	3301      	adds	r3, #1
 80073fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007400:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800740a:	b29b      	uxth	r3, r3
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	b29b      	uxth	r3, r3
 8007410:	4313      	orrs	r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	e03a      	b.n	8007490 <USB_EPStartXfer+0x802>
 800741a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007428:	f003 031f 	and.w	r3, r3, #31
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <USB_EPStartXfer+0x7ac>
 8007430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007434:	3b01      	subs	r3, #1
 8007436:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800743a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29a      	uxth	r2, r3
 8007440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007444:	b29b      	uxth	r3, r3
 8007446:	029b      	lsls	r3, r3, #10
 8007448:	b29b      	uxth	r3, r3
 800744a:	4313      	orrs	r3, r2
 800744c:	b29b      	uxth	r3, r3
 800744e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007456:	b29a      	uxth	r2, r3
 8007458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	e018      	b.n	8007490 <USB_EPStartXfer+0x802>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d114      	bne.n	8007490 <USB_EPStartXfer+0x802>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800746c:	b29b      	uxth	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007472:	4413      	add	r3, r2
 8007474:	673b      	str	r3, [r7, #112]	@ 0x70
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	00da      	lsls	r2, r3, #3
 800747c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800747e:	4413      	add	r3, r2
 8007480:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007484:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800748a:	b29a      	uxth	r2, r3
 800748c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800748e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	895b      	ldrh	r3, [r3, #10]
 8007494:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	6959      	ldr	r1, [r3, #20]
 800749c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fad5 	bl	8007a56 <USB_WritePMA>
 80074ac:	e09e      	b.n	80075ec <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d16b      	bne.n	800758e <USB_EPStartXfer+0x900>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074c6:	4413      	add	r3, r2
 80074c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	00da      	lsls	r2, r3, #3
 80074d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074d2:	4413      	add	r3, r2
 80074d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <USB_EPStartXfer+0x87a>
 80074f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007500:	b29a      	uxth	r2, r3
 8007502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007504:	801a      	strh	r2, [r3, #0]
 8007506:	e063      	b.n	80075d0 <USB_EPStartXfer+0x942>
 8007508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800750c:	2b3e      	cmp	r3, #62	@ 0x3e
 800750e:	d81c      	bhi.n	800754a <USB_EPStartXfer+0x8bc>
 8007510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007514:	085b      	lsrs	r3, r3, #1
 8007516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800751a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <USB_EPStartXfer+0x8a2>
 8007526:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800752a:	3301      	adds	r3, #1
 800752c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29a      	uxth	r2, r3
 8007536:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800753a:	b29b      	uxth	r3, r3
 800753c:	029b      	lsls	r3, r3, #10
 800753e:	b29b      	uxth	r3, r3
 8007540:	4313      	orrs	r3, r2
 8007542:	b29a      	uxth	r2, r3
 8007544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e042      	b.n	80075d0 <USB_EPStartXfer+0x942>
 800754a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <USB_EPStartXfer+0x8dc>
 8007560:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007564:	3b01      	subs	r3, #1
 8007566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800756a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29a      	uxth	r2, r3
 8007570:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29b      	uxth	r3, r3
 800757a:	4313      	orrs	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007586:	b29a      	uxth	r2, r3
 8007588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e020      	b.n	80075d0 <USB_EPStartXfer+0x942>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d11c      	bne.n	80075d0 <USB_EPStartXfer+0x942>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075aa:	4413      	add	r3, r2
 80075ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	00da      	lsls	r2, r3, #3
 80075b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075ba:	4413      	add	r3, r2
 80075bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	891b      	ldrh	r3, [r3, #8]
 80075d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	6959      	ldr	r1, [r3, #20]
 80075dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa35 	bl	8007a56 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007602:	817b      	strh	r3, [r7, #10]
 8007604:	897b      	ldrh	r3, [r7, #10]
 8007606:	f083 0310 	eor.w	r3, r3, #16
 800760a:	817b      	strh	r3, [r7, #10]
 800760c:	897b      	ldrh	r3, [r7, #10]
 800760e:	f083 0320 	eor.w	r3, r3, #32
 8007612:	817b      	strh	r3, [r7, #10]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	897b      	ldrh	r3, [r7, #10]
 8007620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800762c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007630:	b29b      	uxth	r3, r3
 8007632:	8013      	strh	r3, [r2, #0]
 8007634:	e0d5      	b.n	80077e2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	7b1b      	ldrb	r3, [r3, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d156      	bne.n	80076ec <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d122      	bne.n	800768c <USB_EPStartXfer+0x9fe>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	78db      	ldrb	r3, [r3, #3]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d11e      	bne.n	800768c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007664:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	441a      	add	r2, r3
 8007672:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800767a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800767e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	b29b      	uxth	r3, r3
 8007688:	8013      	strh	r3, [r2, #0]
 800768a:	e01d      	b.n	80076c8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29b      	uxth	r3, r3
 800769a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800769e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	441a      	add	r2, r3
 80076b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80076b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	699a      	ldr	r2, [r3, #24]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d907      	bls.n	80076e4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699a      	ldr	r2, [r3, #24]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	1ad2      	subs	r2, r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	619a      	str	r2, [r3, #24]
 80076e2:	e054      	b.n	800778e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	619a      	str	r2, [r3, #24]
 80076ea:	e050      	b.n	800778e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	78db      	ldrb	r3, [r3, #3]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d142      	bne.n	800777a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d048      	beq.n	800778e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800770c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <USB_EPStartXfer+0xa96>
 8007718:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800771c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007724:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800772c:	2b00      	cmp	r3, #0
 800772e:	d12e      	bne.n	800778e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007730:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d128      	bne.n	800778e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007752:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]
 8007778:	e009      	b.n	800778e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	78db      	ldrb	r3, [r3, #3]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d103      	bne.n	800778a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2200      	movs	r2, #0
 8007786:	619a      	str	r2, [r3, #24]
 8007788:	e001      	b.n	800778e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e02a      	b.n	80077e4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	441a      	add	r2, r3
 80077ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	37b0      	adds	r7, #176	@ 0xb0
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d020      	beq.n	8007840 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007814:	81bb      	strh	r3, [r7, #12]
 8007816:	89bb      	ldrh	r3, [r7, #12]
 8007818:	f083 0310 	eor.w	r3, r3, #16
 800781c:	81bb      	strh	r3, [r7, #12]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	441a      	add	r2, r3
 8007828:	89bb      	ldrh	r3, [r7, #12]
 800782a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800782e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783a:	b29b      	uxth	r3, r3
 800783c:	8013      	strh	r3, [r2, #0]
 800783e:	e01f      	b.n	8007880 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007856:	81fb      	strh	r3, [r7, #14]
 8007858:	89fb      	ldrh	r3, [r7, #14]
 800785a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800785e:	81fb      	strh	r3, [r7, #14]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	441a      	add	r2, r3
 800786a:	89fb      	ldrh	r3, [r7, #14]
 800786c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787c:	b29b      	uxth	r3, r3
 800787e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800788e:	b480      	push	{r7}
 8007890:	b087      	sub	sp, #28
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d04c      	beq.n	800793a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	823b      	strh	r3, [r7, #16]
 80078ae:	8a3b      	ldrh	r3, [r7, #16]
 80078b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01b      	beq.n	80078f0 <USB_EPClearStall+0x62>
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	81fb      	strh	r3, [r7, #14]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	441a      	add	r2, r3
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	78db      	ldrb	r3, [r3, #3]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d06c      	beq.n	80079d2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800790a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800790e:	81bb      	strh	r3, [r7, #12]
 8007910:	89bb      	ldrh	r3, [r7, #12]
 8007912:	f083 0320 	eor.w	r3, r3, #32
 8007916:	81bb      	strh	r3, [r7, #12]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	441a      	add	r2, r3
 8007922:	89bb      	ldrh	r3, [r7, #12]
 8007924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800792c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007934:	b29b      	uxth	r3, r3
 8007936:	8013      	strh	r3, [r2, #0]
 8007938:	e04b      	b.n	80079d2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	82fb      	strh	r3, [r7, #22]
 8007948:	8afb      	ldrh	r3, [r7, #22]
 800794a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01b      	beq.n	800798a <USB_EPClearStall+0xfc>
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007968:	82bb      	strh	r3, [r7, #20]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	441a      	add	r2, r3
 8007974:	8abb      	ldrh	r3, [r7, #20]
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800799c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a0:	827b      	strh	r3, [r7, #18]
 80079a2:	8a7b      	ldrh	r3, [r7, #18]
 80079a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80079a8:	827b      	strh	r3, [r7, #18]
 80079aa:	8a7b      	ldrh	r3, [r7, #18]
 80079ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80079b0:	827b      	strh	r3, [r7, #18]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	8a7b      	ldrh	r3, [r7, #18]
 80079be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2280      	movs	r2, #128	@ 0x80
 80079f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b085      	sub	sp, #20
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a48:	68fb      	ldr	r3, [r7, #12]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b08b      	sub	sp, #44	@ 0x2c
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	4611      	mov	r1, r2
 8007a62:	461a      	mov	r2, r3
 8007a64:	460b      	mov	r3, r1
 8007a66:	80fb      	strh	r3, [r7, #6]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a6c:	88bb      	ldrh	r3, [r7, #4]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a7c:	88fa      	ldrh	r2, [r7, #6]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a86:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a8c:	e01c      	b.n	8007ac8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	b21a      	sxth	r2, r3
 8007aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b21b      	sxth	r3, r3
 8007aa8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	8a7a      	ldrh	r2, [r7, #18]
 8007aae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	3302      	adds	r3, #2
 8007ab4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1df      	bne.n	8007a8e <USB_WritePMA+0x38>
  }
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	372c      	adds	r7, #44	@ 0x2c
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b08b      	sub	sp, #44	@ 0x2c
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	460b      	mov	r3, r1
 8007aec:	80fb      	strh	r3, [r7, #6]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007af2:	88bb      	ldrh	r3, [r7, #4]
 8007af4:	085b      	lsrs	r3, r3, #1
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b02:	88fa      	ldrh	r2, [r7, #6]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b0c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b12:	e018      	b.n	8007b46 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	3302      	adds	r3, #2
 8007b20:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b42:	3b01      	subs	r3, #1
 8007b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e3      	bne.n	8007b14 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007b4c:	88bb      	ldrh	r3, [r7, #4]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	701a      	strb	r2, [r3, #0]
  }
}
 8007b68:	bf00      	nop
 8007b6a:	372c      	adds	r7, #44	@ 0x2c
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b80:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b84:	f002 f8a6 	bl	8009cd4 <USBD_static_malloc>
 8007b88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e066      	b.n	8007c6a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7c1b      	ldrb	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d119      	bne.n	8007be0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	2181      	movs	r1, #129	@ 0x81
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 ff34 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 ff2a 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2210      	movs	r2, #16
 8007bda:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007bde:	e016      	b.n	8007c0e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007be0:	2340      	movs	r3, #64	@ 0x40
 8007be2:	2202      	movs	r2, #2
 8007be4:	2181      	movs	r1, #129	@ 0x81
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 ff1b 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bf2:	2340      	movs	r3, #64	@ 0x40
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 ff12 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2210      	movs	r2, #16
 8007c0a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c0e:	2308      	movs	r3, #8
 8007c10:	2203      	movs	r2, #3
 8007c12:	2182      	movs	r1, #130	@ 0x82
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 ff04 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7c1b      	ldrb	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d109      	bne.n	8007c58 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c4e:	2101      	movs	r1, #1
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 ffd5 	bl	8009c00 <USBD_LL_PrepareReceive>
 8007c56:	e007      	b.n	8007c68 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c5e:	2340      	movs	r3, #64	@ 0x40
 8007c60:	2101      	movs	r1, #1
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 ffcc 	bl	8009c00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c7e:	2181      	movs	r1, #129	@ 0x81
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fef4 	bl	8009a6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 feed 	bl	8009a6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c9c:	2182      	movs	r1, #130	@ 0x82
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fee5 	bl	8009a6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00e      	beq.n	8007cdc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f002 f80e 	bl	8009cf0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cf8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e0af      	b.n	8007e70 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d03f      	beq.n	8007d9c <USBD_CDC_Setup+0xb4>
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	f040 809f 	bne.w	8007e60 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d02e      	beq.n	8007d88 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b25b      	sxtb	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	da16      	bge.n	8007d62 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007d40:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	88d2      	ldrh	r2, [r2, #6]
 8007d46:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88db      	ldrh	r3, [r3, #6]
 8007d4c:	2b07      	cmp	r3, #7
 8007d4e:	bf28      	it	cs
 8007d50:	2307      	movcs	r3, #7
 8007d52:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	89fa      	ldrh	r2, [r7, #14]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fa9f 	bl	800929e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007d60:	e085      	b.n	8007e6e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785a      	ldrb	r2, [r3, #1]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	88db      	ldrh	r3, [r3, #6]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d78:	6939      	ldr	r1, [r7, #16]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	88db      	ldrh	r3, [r3, #6]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fab8 	bl	80092f6 <USBD_CtlPrepareRx>
      break;
 8007d86:	e072      	b.n	8007e6e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	7850      	ldrb	r0, [r2, #1]
 8007d94:	2200      	movs	r2, #0
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	4798      	blx	r3
      break;
 8007d9a:	e068      	b.n	8007e6e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	2b0b      	cmp	r3, #11
 8007da2:	d852      	bhi.n	8007e4a <USBD_CDC_Setup+0x162>
 8007da4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <USBD_CDC_Setup+0xc4>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007ddd 	.word	0x08007ddd
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e4b 	.word	0x08007e4b
 8007db8:	08007e4b 	.word	0x08007e4b
 8007dbc:	08007e4b 	.word	0x08007e4b
 8007dc0:	08007e4b 	.word	0x08007e4b
 8007dc4:	08007e4b 	.word	0x08007e4b
 8007dc8:	08007e4b 	.word	0x08007e4b
 8007dcc:	08007e4b 	.word	0x08007e4b
 8007dd0:	08007e4b 	.word	0x08007e4b
 8007dd4:	08007e07 	.word	0x08007e07
 8007dd8:	08007e31 	.word	0x08007e31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d107      	bne.n	8007df8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007de8:	f107 030a 	add.w	r3, r7, #10
 8007dec:	2202      	movs	r2, #2
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fa54 	bl	800929e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007df6:	e032      	b.n	8007e5e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f9de 	bl	80091bc <USBD_CtlError>
            ret = USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	75fb      	strb	r3, [r7, #23]
          break;
 8007e04:	e02b      	b.n	8007e5e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d107      	bne.n	8007e22 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e12:	f107 030d 	add.w	r3, r7, #13
 8007e16:	2201      	movs	r2, #1
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fa3f 	bl	800929e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e20:	e01d      	b.n	8007e5e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 f9c9 	bl	80091bc <USBD_CtlError>
            ret = USBD_FAIL;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e2e:	e016      	b.n	8007e5e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d00f      	beq.n	8007e5c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f9bc 	bl	80091bc <USBD_CtlError>
            ret = USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e48:	e008      	b.n	8007e5c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 f9b5 	bl	80091bc <USBD_CtlError>
          ret = USBD_FAIL;
 8007e52:	2303      	movs	r3, #3
 8007e54:	75fb      	strb	r3, [r7, #23]
          break;
 8007e56:	e002      	b.n	8007e5e <USBD_CDC_Setup+0x176>
          break;
 8007e58:	bf00      	nop
 8007e5a:	e008      	b.n	8007e6e <USBD_CDC_Setup+0x186>
          break;
 8007e5c:	bf00      	nop
      }
      break;
 8007e5e:	e006      	b.n	8007e6e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 f9aa 	bl	80091bc <USBD_CtlError>
      ret = USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007e8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e04f      	b.n	8007f3a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ea0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	3318      	adds	r3, #24
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d029      	beq.n	8007f0c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007eb8:	78fa      	ldrb	r2, [r7, #3]
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3318      	adds	r3, #24
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	78f9      	ldrb	r1, [r7, #3]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	4403      	add	r3, r0
 8007ed8:	3320      	adds	r3, #32
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d110      	bne.n	8007f0c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3318      	adds	r3, #24
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007efe:	78f9      	ldrb	r1, [r7, #3]
 8007f00:	2300      	movs	r3, #0
 8007f02:	2200      	movs	r2, #0
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 fe5a 	bl	8009bbe <USBD_LL_Transmit>
 8007f0a:	e015      	b.n	8007f38 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e015      	b.n	8007f90 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 fe6a 	bl	8009c42 <USBD_LL_GetRxDataSize>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fa6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e01a      	b.n	8007fe8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d014      	beq.n	8007fe6 <USBD_CDC_EP0_RxReady+0x4e>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007fc2:	2bff      	cmp	r3, #255	@ 0xff
 8007fc4:	d00f      	beq.n	8007fe6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007fd4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	22ff      	movs	r2, #255	@ 0xff
 8007fe2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2243      	movs	r2, #67	@ 0x43
 8007ffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007ffe:	4b03      	ldr	r3, [pc, #12]	@ (800800c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	20000094 	.word	0x20000094

08008010 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2243      	movs	r2, #67	@ 0x43
 800801c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800801e:	4b03      	ldr	r3, [pc, #12]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	20000050 	.word	0x20000050

08008030 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2243      	movs	r2, #67	@ 0x43
 800803c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800803e:	4b03      	ldr	r3, [pc, #12]	@ (800804c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	200000d8 	.word	0x200000d8

08008050 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	220a      	movs	r2, #10
 800805c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800805e:	4b03      	ldr	r3, [pc, #12]	@ (800806c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	2000000c 	.word	0x2000000c

08008070 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e004      	b.n	800808e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800809a:	b480      	push	{r7}
 800809c:	b087      	sub	sp, #28
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e008      	b.n	80080ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e004      	b.n	80080fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008116:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008122:	2303      	movs	r3, #3
 8008124:	e016      	b.n	8008154 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7c1b      	ldrb	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008138:	2101      	movs	r1, #1
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fd60 	bl	8009c00 <USBD_LL_PrepareReceive>
 8008140:	e007      	b.n	8008152 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008148:	2340      	movs	r3, #64	@ 0x40
 800814a:	2101      	movs	r1, #1
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 fd57 	bl	8009c00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008170:	2303      	movs	r3, #3
 8008172:	e01f      	b.n	80081b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	79fa      	ldrb	r2, [r7, #7]
 80081a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f001 fbbf 	bl	800992c <USBD_LL_Init>
 80081ae:	4603      	mov	r3, r0
 80081b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e016      	b.n	8008202 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f0:	f107 020e 	add.w	r2, r7, #14
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	4602      	mov	r2, r0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fbea 	bl	80099ec <USBD_LL_Start>
 8008218:	4603      	mov	r3, r0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	78fa      	ldrb	r2, [r7, #3]
 800825c:	4611      	mov	r1, r2
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	4611      	mov	r1, r2
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
  }

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 ff48 	bl	8009148 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d01a      	beq.n	8008312 <USBD_LL_SetupStage+0x72>
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d822      	bhi.n	8008326 <USBD_LL_SetupStage+0x86>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <USBD_LL_SetupStage+0x4a>
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d00a      	beq.n	80082fe <USBD_LL_SetupStage+0x5e>
 80082e8:	e01d      	b.n	8008326 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f9f0 	bl	80086d8 <USBD_StdDevReq>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
      break;
 80082fc:	e020      	b.n	8008340 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa54 	bl	80087b4 <USBD_StdItfReq>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e016      	b.n	8008340 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa93 	bl	8008846 <USBD_StdEPReq>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e00c      	b.n	8008340 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800832c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fbb9 	bl	8009aac <USBD_LL_StallEP>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
      break;
 800833e:	bf00      	nop
  }

  return ret;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	460b      	mov	r3, r1
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d138      	bne.n	80083d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008364:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800836c:	2b03      	cmp	r3, #3
 800836e:	d14a      	bne.n	8008406 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	429a      	cmp	r2, r3
 800837a:	d913      	bls.n	80083a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	1ad2      	subs	r2, r2, r3
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	4293      	cmp	r3, r2
 8008394:	bf28      	it	cs
 8008396:	4613      	movcs	r3, r2
 8008398:	461a      	mov	r2, r3
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 ffc7 	bl	8009330 <USBD_CtlContinueRx>
 80083a2:	e030      	b.n	8008406 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d10b      	bne.n	80083c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 ffc2 	bl	8009352 <USBD_CtlSendStatus>
 80083ce:	e01a      	b.n	8008406 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d114      	bne.n	8008406 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00e      	beq.n	8008406 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	7afa      	ldrb	r2, [r7, #11]
 80083f2:	4611      	mov	r1, r2
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	e000      	b.n	8008408 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	460b      	mov	r3, r1
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800841e:	7afb      	ldrb	r3, [r7, #11]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d16b      	bne.n	80084fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3314      	adds	r3, #20
 8008428:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008430:	2b02      	cmp	r3, #2
 8008432:	d156      	bne.n	80084e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	429a      	cmp	r2, r3
 800843e:	d914      	bls.n	800846a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	1ad2      	subs	r2, r2, r3
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	461a      	mov	r2, r3
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 ff3c 	bl	80092d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800845c:	2300      	movs	r3, #0
 800845e:	2200      	movs	r2, #0
 8008460:	2100      	movs	r1, #0
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f001 fbcc 	bl	8009c00 <USBD_LL_PrepareReceive>
 8008468:	e03b      	b.n	80084e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	429a      	cmp	r2, r3
 8008474:	d11c      	bne.n	80084b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800847e:	429a      	cmp	r2, r3
 8008480:	d316      	bcc.n	80084b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800848c:	429a      	cmp	r2, r3
 800848e:	d20f      	bcs.n	80084b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008490:	2200      	movs	r2, #0
 8008492:	2100      	movs	r1, #0
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 ff1d 	bl	80092d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a2:	2300      	movs	r3, #0
 80084a4:	2200      	movs	r2, #0
 80084a6:	2100      	movs	r1, #0
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f001 fba9 	bl	8009c00 <USBD_LL_PrepareReceive>
 80084ae:	e018      	b.n	80084e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d10b      	bne.n	80084d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084d4:	2180      	movs	r1, #128	@ 0x80
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f001 fae8 	bl	8009aac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 ff4b 	bl	8009378 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d122      	bne.n	8008532 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fe98 	bl	8008222 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80084fa:	e01a      	b.n	8008532 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b03      	cmp	r3, #3
 8008506:	d114      	bne.n	8008532 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	7afa      	ldrb	r2, [r7, #11]
 800851e:	4611      	mov	r1, r2
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	e000      	b.n	8008534 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	e02f      	b.n	80085d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00f      	beq.n	800859a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d009      	beq.n	800859a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6852      	ldr	r2, [r2, #4]
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	4611      	mov	r1, r2
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800859a:	2340      	movs	r3, #64	@ 0x40
 800859c:	2200      	movs	r2, #0
 800859e:	2100      	movs	r1, #0
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fa3e 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2240      	movs	r2, #64	@ 0x40
 80085b2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085b6:	2340      	movs	r3, #64	@ 0x40
 80085b8:	2200      	movs	r2, #0
 80085ba:	2180      	movs	r1, #128	@ 0x80
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 fa30 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2240      	movs	r2, #64	@ 0x40
 80085cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008606:	b2da      	uxtb	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2204      	movs	r2, #4
 8008612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b04      	cmp	r3, #4
 8008636:	d106      	bne.n	8008646 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800863e:	b2da      	uxtb	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008666:	2303      	movs	r3, #3
 8008668:	e012      	b.n	8008690 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b03      	cmp	r3, #3
 8008674:	d10b      	bne.n	800868e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	3301      	adds	r3, #1
 80086ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80086ba:	021b      	lsls	r3, r3, #8
 80086bc:	b21a      	sxth	r2, r3
 80086be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	b21b      	sxth	r3, r3
 80086c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086c8:	89fb      	ldrh	r3, [r7, #14]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
	...

080086d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086ee:	2b40      	cmp	r3, #64	@ 0x40
 80086f0:	d005      	beq.n	80086fe <USBD_StdDevReq+0x26>
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d853      	bhi.n	800879e <USBD_StdDevReq+0xc6>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <USBD_StdDevReq+0x3a>
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	d14f      	bne.n	800879e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]
      break;
 8008710:	e04a      	b.n	80087a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b09      	cmp	r3, #9
 8008718:	d83b      	bhi.n	8008792 <USBD_StdDevReq+0xba>
 800871a:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <USBD_StdDevReq+0x48>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008775 	.word	0x08008775
 8008724:	08008789 	.word	0x08008789
 8008728:	08008793 	.word	0x08008793
 800872c:	0800877f 	.word	0x0800877f
 8008730:	08008793 	.word	0x08008793
 8008734:	08008753 	.word	0x08008753
 8008738:	08008749 	.word	0x08008749
 800873c:	08008793 	.word	0x08008793
 8008740:	0800876b 	.word	0x0800876b
 8008744:	0800875d 	.word	0x0800875d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9de 	bl	8008b0c <USBD_GetDescriptor>
          break;
 8008750:	e024      	b.n	800879c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fb6d 	bl	8008e34 <USBD_SetAddress>
          break;
 800875a:	e01f      	b.n	800879c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fbac 	bl	8008ebc <USBD_SetConfig>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
          break;
 8008768:	e018      	b.n	800879c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc4b 	bl	8009008 <USBD_GetConfig>
          break;
 8008772:	e013      	b.n	800879c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fc7c 	bl	8009074 <USBD_GetStatus>
          break;
 800877c:	e00e      	b.n	800879c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fcab 	bl	80090dc <USBD_SetFeature>
          break;
 8008786:	e009      	b.n	800879c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fcba 	bl	8009104 <USBD_ClrFeature>
          break;
 8008790:	e004      	b.n	800879c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fd11 	bl	80091bc <USBD_CtlError>
          break;
 800879a:	bf00      	nop
      }
      break;
 800879c:	e004      	b.n	80087a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fd0b 	bl	80091bc <USBD_CtlError>
      break;
 80087a6:	bf00      	nop
  }

  return ret;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop

080087b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087ca:	2b40      	cmp	r3, #64	@ 0x40
 80087cc:	d005      	beq.n	80087da <USBD_StdItfReq+0x26>
 80087ce:	2b40      	cmp	r3, #64	@ 0x40
 80087d0:	d82f      	bhi.n	8008832 <USBD_StdItfReq+0x7e>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <USBD_StdItfReq+0x26>
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d12b      	bne.n	8008832 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d81d      	bhi.n	8008824 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	889b      	ldrh	r3, [r3, #4]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d813      	bhi.n	800881a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	4798      	blx	r3
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	88db      	ldrh	r3, [r3, #6]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d110      	bne.n	800882e <USBD_StdItfReq+0x7a>
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10d      	bne.n	800882e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fd9d 	bl	8009352 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008818:	e009      	b.n	800882e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fccd 	bl	80091bc <USBD_CtlError>
          break;
 8008822:	e004      	b.n	800882e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fcc8 	bl	80091bc <USBD_CtlError>
          break;
 800882c:	e000      	b.n	8008830 <USBD_StdItfReq+0x7c>
          break;
 800882e:	bf00      	nop
      }
      break;
 8008830:	e004      	b.n	800883c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fcc1 	bl	80091bc <USBD_CtlError>
      break;
 800883a:	bf00      	nop
  }

  return ret;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	889b      	ldrh	r3, [r3, #4]
 8008858:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008862:	2b40      	cmp	r3, #64	@ 0x40
 8008864:	d007      	beq.n	8008876 <USBD_StdEPReq+0x30>
 8008866:	2b40      	cmp	r3, #64	@ 0x40
 8008868:	f200 8145 	bhi.w	8008af6 <USBD_StdEPReq+0x2b0>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00c      	beq.n	800888a <USBD_StdEPReq+0x44>
 8008870:	2b20      	cmp	r3, #32
 8008872:	f040 8140 	bne.w	8008af6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
 8008884:	4603      	mov	r3, r0
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	e13a      	b.n	8008b00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	2b03      	cmp	r3, #3
 8008890:	d007      	beq.n	80088a2 <USBD_StdEPReq+0x5c>
 8008892:	2b03      	cmp	r3, #3
 8008894:	f300 8129 	bgt.w	8008aea <USBD_StdEPReq+0x2a4>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d07f      	beq.n	800899c <USBD_StdEPReq+0x156>
 800889c:	2b01      	cmp	r3, #1
 800889e:	d03c      	beq.n	800891a <USBD_StdEPReq+0xd4>
 80088a0:	e123      	b.n	8008aea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d002      	beq.n	80088b4 <USBD_StdEPReq+0x6e>
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d016      	beq.n	80088e0 <USBD_StdEPReq+0x9a>
 80088b2:	e02c      	b.n	800890e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00d      	beq.n	80088d6 <USBD_StdEPReq+0x90>
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b80      	cmp	r3, #128	@ 0x80
 80088be:	d00a      	beq.n	80088d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f8f1 	bl	8009aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ca:	2180      	movs	r1, #128	@ 0x80
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f8ed 	bl	8009aac <USBD_LL_StallEP>
 80088d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088d4:	e020      	b.n	8008918 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc6f 	bl	80091bc <USBD_CtlError>
              break;
 80088de:	e01b      	b.n	8008918 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10e      	bne.n	8008906 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00b      	beq.n	8008906 <USBD_StdEPReq+0xc0>
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	2b80      	cmp	r3, #128	@ 0x80
 80088f2:	d008      	beq.n	8008906 <USBD_StdEPReq+0xc0>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	88db      	ldrh	r3, [r3, #6]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d104      	bne.n	8008906 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f8d3 	bl	8009aac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fd23 	bl	8009352 <USBD_CtlSendStatus>

              break;
 800890c:	e004      	b.n	8008918 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fc53 	bl	80091bc <USBD_CtlError>
              break;
 8008916:	bf00      	nop
          }
          break;
 8008918:	e0ec      	b.n	8008af4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d002      	beq.n	800892c <USBD_StdEPReq+0xe6>
 8008926:	2b03      	cmp	r3, #3
 8008928:	d016      	beq.n	8008958 <USBD_StdEPReq+0x112>
 800892a:	e030      	b.n	800898e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00d      	beq.n	800894e <USBD_StdEPReq+0x108>
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b80      	cmp	r3, #128	@ 0x80
 8008936:	d00a      	beq.n	800894e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 f8b5 	bl	8009aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008942:	2180      	movs	r1, #128	@ 0x80
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 f8b1 	bl	8009aac <USBD_LL_StallEP>
 800894a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800894c:	e025      	b.n	800899a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fc33 	bl	80091bc <USBD_CtlError>
              break;
 8008956:	e020      	b.n	800899a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	885b      	ldrh	r3, [r3, #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d11b      	bne.n	8008998 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f8bb 	bl	8009aea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fcec 	bl	8009352 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800898c:	e004      	b.n	8008998 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fc13 	bl	80091bc <USBD_CtlError>
              break;
 8008996:	e000      	b.n	800899a <USBD_StdEPReq+0x154>
              break;
 8008998:	bf00      	nop
          }
          break;
 800899a:	e0ab      	b.n	8008af4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d002      	beq.n	80089ae <USBD_StdEPReq+0x168>
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d032      	beq.n	8008a12 <USBD_StdEPReq+0x1cc>
 80089ac:	e097      	b.n	8008ade <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d007      	beq.n	80089c4 <USBD_StdEPReq+0x17e>
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b80      	cmp	r3, #128	@ 0x80
 80089b8:	d004      	beq.n	80089c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fbfd 	bl	80091bc <USBD_CtlError>
                break;
 80089c2:	e091      	b.n	8008ae8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	da0b      	bge.n	80089e4 <USBD_StdEPReq+0x19e>
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	3310      	adds	r3, #16
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	4413      	add	r3, r2
 80089e0:	3304      	adds	r3, #4
 80089e2:	e00b      	b.n	80089fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	4413      	add	r3, r2
 80089fa:	3304      	adds	r3, #4
 80089fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2202      	movs	r2, #2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fc47 	bl	800929e <USBD_CtlSendData>
              break;
 8008a10:	e06a      	b.n	8008ae8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da11      	bge.n	8008a3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	f003 020f 	and.w	r2, r3, #15
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3324      	adds	r3, #36	@ 0x24
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d117      	bne.n	8008a64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fbc0 	bl	80091bc <USBD_CtlError>
                  break;
 8008a3c:	e054      	b.n	8008ae8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fbad 	bl	80091bc <USBD_CtlError>
                  break;
 8008a62:	e041      	b.n	8008ae8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da0b      	bge.n	8008a84 <USBD_StdEPReq+0x23e>
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	3310      	adds	r3, #16
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	3304      	adds	r3, #4
 8008a82:	e00b      	b.n	8008a9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <USBD_StdEPReq+0x264>
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b80      	cmp	r3, #128	@ 0x80
 8008aa8:	d103      	bne.n	8008ab2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	e00e      	b.n	8008ad0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 f836 	bl	8009b28 <USBD_LL_IsStallEP>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	e002      	b.n	8008ad0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fbe1 	bl	800929e <USBD_CtlSendData>
              break;
 8008adc:	e004      	b.n	8008ae8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fb6b 	bl	80091bc <USBD_CtlError>
              break;
 8008ae6:	bf00      	nop
          }
          break;
 8008ae8:	e004      	b.n	8008af4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fb65 	bl	80091bc <USBD_CtlError>
          break;
 8008af2:	bf00      	nop
      }
      break;
 8008af4:	e004      	b.n	8008b00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fb5f 	bl	80091bc <USBD_CtlError>
      break;
 8008afe:	bf00      	nop
  }

  return ret;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	885b      	ldrh	r3, [r3, #2]
 8008b26:	0a1b      	lsrs	r3, r3, #8
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	2b0e      	cmp	r3, #14
 8008b2e:	f200 8152 	bhi.w	8008dd6 <USBD_GetDescriptor+0x2ca>
 8008b32:	a201      	add	r2, pc, #4	@ (adr r2, 8008b38 <USBD_GetDescriptor+0x2c>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008ba9 	.word	0x08008ba9
 8008b3c:	08008bc1 	.word	0x08008bc1
 8008b40:	08008c01 	.word	0x08008c01
 8008b44:	08008dd7 	.word	0x08008dd7
 8008b48:	08008dd7 	.word	0x08008dd7
 8008b4c:	08008d77 	.word	0x08008d77
 8008b50:	08008da3 	.word	0x08008da3
 8008b54:	08008dd7 	.word	0x08008dd7
 8008b58:	08008dd7 	.word	0x08008dd7
 8008b5c:	08008dd7 	.word	0x08008dd7
 8008b60:	08008dd7 	.word	0x08008dd7
 8008b64:	08008dd7 	.word	0x08008dd7
 8008b68:	08008dd7 	.word	0x08008dd7
 8008b6c:	08008dd7 	.word	0x08008dd7
 8008b70:	08008b75 	.word	0x08008b75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	7c12      	ldrb	r2, [r2, #16]
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b96:	e126      	b.n	8008de6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fb0e 	bl	80091bc <USBD_CtlError>
        err++;
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ba6:	e11e      	b.n	8008de6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	7c12      	ldrb	r2, [r2, #16]
 8008bb4:	f107 0108 	add.w	r1, r7, #8
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4798      	blx	r3
 8008bbc:	60f8      	str	r0, [r7, #12]
      break;
 8008bbe:	e112      	b.n	8008de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	7c1b      	ldrb	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10d      	bne.n	8008be4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd0:	f107 0208 	add.w	r2, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	2202      	movs	r2, #2
 8008be0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008be2:	e100      	b.n	8008de6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	f107 0208 	add.w	r2, r7, #8
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
 8008bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	701a      	strb	r2, [r3, #0]
      break;
 8008bfe:	e0f2      	b.n	8008de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	885b      	ldrh	r3, [r3, #2]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	f200 80ac 	bhi.w	8008d64 <USBD_GetDescriptor+0x258>
 8008c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c14 <USBD_GetDescriptor+0x108>)
 8008c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c12:	bf00      	nop
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c61 	.word	0x08008c61
 8008c1c:	08008c95 	.word	0x08008c95
 8008c20:	08008cc9 	.word	0x08008cc9
 8008c24:	08008cfd 	.word	0x08008cfd
 8008c28:	08008d31 	.word	0x08008d31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	7c12      	ldrb	r2, [r2, #16]
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
 8008c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4e:	e091      	b.n	8008d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fab2 	bl	80091bc <USBD_CtlError>
            err++;
 8008c58:	7afb      	ldrb	r3, [r7, #11]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5e:	e089      	b.n	8008d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	7c12      	ldrb	r2, [r2, #16]
 8008c78:	f107 0108 	add.w	r1, r7, #8
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
 8008c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c82:	e077      	b.n	8008d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa98 	bl	80091bc <USBD_CtlError>
            err++;
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	72fb      	strb	r3, [r7, #11]
          break;
 8008c92:	e06f      	b.n	8008d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cb6:	e05d      	b.n	8008d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa7e 	bl	80091bc <USBD_CtlError>
            err++;
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cc6:	e055      	b.n	8008d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	7c12      	ldrb	r2, [r2, #16]
 8008ce0:	f107 0108 	add.w	r1, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cea:	e043      	b.n	8008d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fa64 	bl	80091bc <USBD_CtlError>
            err++;
 8008cf4:	7afb      	ldrb	r3, [r7, #11]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cfa:	e03b      	b.n	8008d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	7c12      	ldrb	r2, [r2, #16]
 8008d14:	f107 0108 	add.w	r1, r7, #8
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
 8008d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d1e:	e029      	b.n	8008d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa4a 	bl	80091bc <USBD_CtlError>
            err++;
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d2e:	e021      	b.n	8008d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	7c12      	ldrb	r2, [r2, #16]
 8008d48:	f107 0108 	add.w	r1, r7, #8
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3
 8008d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d52:	e00f      	b.n	8008d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa30 	bl	80091bc <USBD_CtlError>
            err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
          break;
 8008d62:	e007      	b.n	8008d74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa28 	bl	80091bc <USBD_CtlError>
          err++;
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d72:	bf00      	nop
      }
      break;
 8008d74:	e037      	b.n	8008de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	7c1b      	ldrb	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d109      	bne.n	8008d92 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d86:	f107 0208 	add.w	r2, r7, #8
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	4798      	blx	r3
 8008d8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d90:	e029      	b.n	8008de6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa11 	bl	80091bc <USBD_CtlError>
        err++;
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008da0:	e021      	b.n	8008de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	7c1b      	ldrb	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10d      	bne.n	8008dc6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db2:	f107 0208 	add.w	r2, r7, #8
 8008db6:	4610      	mov	r0, r2
 8008db8:	4798      	blx	r3
 8008dba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	2207      	movs	r2, #7
 8008dc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dc4:	e00f      	b.n	8008de6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9f7 	bl	80091bc <USBD_CtlError>
        err++;
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd4:	e007      	b.n	8008de6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f9ef 	bl	80091bc <USBD_CtlError>
      err++;
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	3301      	adds	r3, #1
 8008de2:	72fb      	strb	r3, [r7, #11]
      break;
 8008de4:	bf00      	nop
  }

  if (err != 0U)
 8008de6:	7afb      	ldrb	r3, [r7, #11]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d11e      	bne.n	8008e2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	88db      	ldrh	r3, [r3, #6]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d016      	beq.n	8008e22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008df4:	893b      	ldrh	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00e      	beq.n	8008e18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	88da      	ldrh	r2, [r3, #6]
 8008dfe:	893b      	ldrh	r3, [r7, #8]
 8008e00:	4293      	cmp	r3, r2
 8008e02:	bf28      	it	cs
 8008e04:	4613      	movcs	r3, r2
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e0a:	893b      	ldrh	r3, [r7, #8]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	68f9      	ldr	r1, [r7, #12]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fa44 	bl	800929e <USBD_CtlSendData>
 8008e16:	e009      	b.n	8008e2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f9ce 	bl	80091bc <USBD_CtlError>
 8008e20:	e004      	b.n	8008e2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fa95 	bl	8009352 <USBD_CtlSendStatus>
 8008e28:	e000      	b.n	8008e2c <USBD_GetDescriptor+0x320>
    return;
 8008e2a:	bf00      	nop
  }
}
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop

08008e34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	889b      	ldrh	r3, [r3, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d131      	bne.n	8008eaa <USBD_SetAddress+0x76>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	88db      	ldrh	r3, [r3, #6]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d12d      	bne.n	8008eaa <USBD_SetAddress+0x76>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	885b      	ldrh	r3, [r3, #2]
 8008e52:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e54:	d829      	bhi.n	8008eaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	885b      	ldrh	r3, [r3, #2]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d104      	bne.n	8008e78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f9a3 	bl	80091bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e76:	e01d      	b.n	8008eb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7bfa      	ldrb	r2, [r7, #15]
 8008e7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fe7b 	bl	8009b80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fa61 	bl	8009352 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d004      	beq.n	8008ea0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9e:	e009      	b.n	8008eb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea8:	e004      	b.n	8008eb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f985 	bl	80091bc <USBD_CtlError>
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	885b      	ldrh	r3, [r3, #2]
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8009004 <USBD_SetConfig+0x148>)
 8008ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8009004 <USBD_SetConfig+0x148>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d905      	bls.n	8008ee8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f96c 	bl	80091bc <USBD_CtlError>
    return USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e088      	b.n	8008ffa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d002      	beq.n	8008efa <USBD_SetConfig+0x3e>
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d025      	beq.n	8008f44 <USBD_SetConfig+0x88>
 8008ef8:	e071      	b.n	8008fde <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008efa:	4b42      	ldr	r3, [pc, #264]	@ (8009004 <USBD_SetConfig+0x148>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01c      	beq.n	8008f3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f02:	4b40      	ldr	r3, [pc, #256]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff f990 	bl	8008238 <USBD_SetClassConfig>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d004      	beq.n	8008f2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f949 	bl	80091bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f2a:	e065      	b.n	8008ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fa10 	bl	8009352 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2203      	movs	r2, #3
 8008f36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f3a:	e05d      	b.n	8008ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fa08 	bl	8009352 <USBD_CtlSendStatus>
      break;
 8008f42:	e059      	b.n	8008ff8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f44:	4b2f      	ldr	r3, [pc, #188]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d112      	bne.n	8008f72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f54:	4b2b      	ldr	r3, [pc, #172]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f5e:	4b29      	ldr	r3, [pc, #164]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff f983 	bl	8008270 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f9f1 	bl	8009352 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f70:	e042      	b.n	8008ff8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f72:	4b24      	ldr	r3, [pc, #144]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d02a      	beq.n	8008fd6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff f971 	bl	8008270 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f98:	4b1a      	ldr	r3, [pc, #104]	@ (8009004 <USBD_SetConfig+0x148>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f94a 	bl	8008238 <USBD_SetClassConfig>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00f      	beq.n	8008fce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f903 	bl	80091bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff f956 	bl	8008270 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fcc:	e014      	b.n	8008ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f9bf 	bl	8009352 <USBD_CtlSendStatus>
      break;
 8008fd4:	e010      	b.n	8008ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9bb 	bl	8009352 <USBD_CtlSendStatus>
      break;
 8008fdc:	e00c      	b.n	8008ff8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f8eb 	bl	80091bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fe6:	4b07      	ldr	r3, [pc, #28]	@ (8009004 <USBD_SetConfig+0x148>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff f93f 	bl	8008270 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff6:	bf00      	nop
  }

  return ret;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	200002f8 	.word	0x200002f8

08009008 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d004      	beq.n	8009024 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8cd 	bl	80091bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009022:	e023      	b.n	800906c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	dc02      	bgt.n	8009036 <USBD_GetConfig+0x2e>
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc03      	bgt.n	800903c <USBD_GetConfig+0x34>
 8009034:	e015      	b.n	8009062 <USBD_GetConfig+0x5a>
 8009036:	2b03      	cmp	r3, #3
 8009038:	d00b      	beq.n	8009052 <USBD_GetConfig+0x4a>
 800903a:	e012      	b.n	8009062 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3308      	adds	r3, #8
 8009046:	2201      	movs	r2, #1
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f927 	bl	800929e <USBD_CtlSendData>
        break;
 8009050:	e00c      	b.n	800906c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3304      	adds	r3, #4
 8009056:	2201      	movs	r2, #1
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f91f 	bl	800929e <USBD_CtlSendData>
        break;
 8009060:	e004      	b.n	800906c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f8a9 	bl	80091bc <USBD_CtlError>
        break;
 800906a:	bf00      	nop
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009084:	b2db      	uxtb	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	2b02      	cmp	r3, #2
 800908a:	d81e      	bhi.n	80090ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	88db      	ldrh	r3, [r3, #6]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d004      	beq.n	800909e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f890 	bl	80091bc <USBD_CtlError>
        break;
 800909c:	e01a      	b.n	80090d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f043 0202 	orr.w	r2, r3, #2
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	330c      	adds	r3, #12
 80090be:	2202      	movs	r2, #2
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f8eb 	bl	800929e <USBD_CtlSendData>
      break;
 80090c8:	e004      	b.n	80090d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f875 	bl	80091bc <USBD_CtlError>
      break;
 80090d2:	bf00      	nop
  }
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d106      	bne.n	80090fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f92b 	bl	8009352 <USBD_CtlSendStatus>
  }
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	3b01      	subs	r3, #1
 8009118:	2b02      	cmp	r3, #2
 800911a:	d80b      	bhi.n	8009134 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	885b      	ldrh	r3, [r3, #2]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d10c      	bne.n	800913e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f910 	bl	8009352 <USBD_CtlSendStatus>
      }
      break;
 8009132:	e004      	b.n	800913e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f840 	bl	80091bc <USBD_CtlError>
      break;
 800913c:	e000      	b.n	8009140 <USBD_ClrFeature+0x3c>
      break;
 800913e:	bf00      	nop
  }
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	781a      	ldrb	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3301      	adds	r3, #1
 8009170:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff fa90 	bl	8008698 <SWAPBYTE>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff fa83 	bl	8008698 <SWAPBYTE>
 8009192:	4603      	mov	r3, r0
 8009194:	461a      	mov	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3301      	adds	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff fa76 	bl	8008698 <SWAPBYTE>
 80091ac:	4603      	mov	r3, r0
 80091ae:	461a      	mov	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	80da      	strh	r2, [r3, #6]
}
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091c6:	2180      	movs	r1, #128	@ 0x80
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fc6f 	bl	8009aac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091ce:	2100      	movs	r1, #0
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fc6b 	bl	8009aac <USBD_LL_StallEP>
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d036      	beq.n	8009262 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091f8:	6938      	ldr	r0, [r7, #16]
 80091fa:	f000 f836 	bl	800926a <USBD_GetLen>
 80091fe:	4603      	mov	r3, r0
 8009200:	3301      	adds	r3, #1
 8009202:	b29b      	uxth	r3, r3
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	4413      	add	r3, r2
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	7812      	ldrb	r2, [r2, #0]
 8009216:	701a      	strb	r2, [r3, #0]
  idx++;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	3301      	adds	r3, #1
 800921c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	4413      	add	r3, r2
 8009224:	2203      	movs	r2, #3
 8009226:	701a      	strb	r2, [r3, #0]
  idx++;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	3301      	adds	r3, #1
 800922c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800922e:	e013      	b.n	8009258 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	4413      	add	r3, r2
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	7812      	ldrb	r2, [r2, #0]
 800923a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	3301      	adds	r3, #1
 8009240:	613b      	str	r3, [r7, #16]
    idx++;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	3301      	adds	r3, #1
 8009246:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	2200      	movs	r2, #0
 8009250:	701a      	strb	r2, [r3, #0]
    idx++;
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	3301      	adds	r3, #1
 8009256:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e7      	bne.n	8009230 <USBD_GetString+0x52>
 8009260:	e000      	b.n	8009264 <USBD_GetString+0x86>
    return;
 8009262:	bf00      	nop
  }
}
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800927a:	e005      	b.n	8009288 <USBD_GetLen+0x1e>
  {
    len++;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	3301      	adds	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	3301      	adds	r3, #1
 8009286:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1f5      	bne.n	800927c <USBD_GetLen+0x12>
  }

  return len;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	2100      	movs	r1, #0
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fc7a 	bl	8009bbe <USBD_LL_Transmit>

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	2100      	movs	r1, #0
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fc69 	bl	8009bbe <USBD_LL_Transmit>

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2203      	movs	r2, #3
 8009306:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	2100      	movs	r1, #0
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 fc6d 	bl	8009c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	2100      	movs	r1, #0
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 fc5c 	bl	8009c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2204      	movs	r2, #4
 800935e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009362:	2300      	movs	r3, #0
 8009364:	2200      	movs	r2, #0
 8009366:	2100      	movs	r1, #0
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fc28 	bl	8009bbe <USBD_LL_Transmit>

  return USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2205      	movs	r2, #5
 8009384:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009388:	2300      	movs	r3, #0
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fc36 	bl	8009c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80093a4:	2200      	movs	r2, #0
 80093a6:	4912      	ldr	r1, [pc, #72]	@ (80093f0 <MX_USB_Device_Init+0x50>)
 80093a8:	4812      	ldr	r0, [pc, #72]	@ (80093f4 <MX_USB_Device_Init+0x54>)
 80093aa:	f7fe fed7 	bl	800815c <USBD_Init>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80093b4:	f7f7 fa16 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80093b8:	490f      	ldr	r1, [pc, #60]	@ (80093f8 <MX_USB_Device_Init+0x58>)
 80093ba:	480e      	ldr	r0, [pc, #56]	@ (80093f4 <MX_USB_Device_Init+0x54>)
 80093bc:	f7fe fefe 	bl	80081bc <USBD_RegisterClass>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80093c6:	f7f7 fa0d 	bl	80007e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80093ca:	490c      	ldr	r1, [pc, #48]	@ (80093fc <MX_USB_Device_Init+0x5c>)
 80093cc:	4809      	ldr	r0, [pc, #36]	@ (80093f4 <MX_USB_Device_Init+0x54>)
 80093ce:	f7fe fe4f 	bl	8008070 <USBD_CDC_RegisterInterface>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80093d8:	f7f7 fa04 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80093dc:	4805      	ldr	r0, [pc, #20]	@ (80093f4 <MX_USB_Device_Init+0x54>)
 80093de:	f7fe ff14 	bl	800820a <USBD_Start>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80093e8:	f7f7 f9fc 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80093ec:	bf00      	nop
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	20000130 	.word	0x20000130
 80093f4:	200002fc 	.word	0x200002fc
 80093f8:	20000018 	.word	0x20000018
 80093fc:	2000011c 	.word	0x2000011c

08009400 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009404:	2200      	movs	r2, #0
 8009406:	4905      	ldr	r1, [pc, #20]	@ (800941c <CDC_Init_FS+0x1c>)
 8009408:	4805      	ldr	r0, [pc, #20]	@ (8009420 <CDC_Init_FS+0x20>)
 800940a:	f7fe fe46 	bl	800809a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800940e:	4905      	ldr	r1, [pc, #20]	@ (8009424 <CDC_Init_FS+0x24>)
 8009410:	4803      	ldr	r0, [pc, #12]	@ (8009420 <CDC_Init_FS+0x20>)
 8009412:	f7fe fe60 	bl	80080d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009416:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009418:	4618      	mov	r0, r3
 800941a:	bd80      	pop	{r7, pc}
 800941c:	200009cc 	.word	0x200009cc
 8009420:	200002fc 	.word	0x200002fc
 8009424:	200005cc 	.word	0x200005cc

08009428 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009428:	b480      	push	{r7}
 800942a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800942c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800942e:	4618      	mov	r0, r3
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	71fb      	strb	r3, [r7, #7]
 8009444:	4613      	mov	r3, r2
 8009446:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	2b23      	cmp	r3, #35	@ 0x23
 800944c:	d84a      	bhi.n	80094e4 <CDC_Control_FS+0xac>
 800944e:	a201      	add	r2, pc, #4	@ (adr r2, 8009454 <CDC_Control_FS+0x1c>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	080094e5 	.word	0x080094e5
 8009458:	080094e5 	.word	0x080094e5
 800945c:	080094e5 	.word	0x080094e5
 8009460:	080094e5 	.word	0x080094e5
 8009464:	080094e5 	.word	0x080094e5
 8009468:	080094e5 	.word	0x080094e5
 800946c:	080094e5 	.word	0x080094e5
 8009470:	080094e5 	.word	0x080094e5
 8009474:	080094e5 	.word	0x080094e5
 8009478:	080094e5 	.word	0x080094e5
 800947c:	080094e5 	.word	0x080094e5
 8009480:	080094e5 	.word	0x080094e5
 8009484:	080094e5 	.word	0x080094e5
 8009488:	080094e5 	.word	0x080094e5
 800948c:	080094e5 	.word	0x080094e5
 8009490:	080094e5 	.word	0x080094e5
 8009494:	080094e5 	.word	0x080094e5
 8009498:	080094e5 	.word	0x080094e5
 800949c:	080094e5 	.word	0x080094e5
 80094a0:	080094e5 	.word	0x080094e5
 80094a4:	080094e5 	.word	0x080094e5
 80094a8:	080094e5 	.word	0x080094e5
 80094ac:	080094e5 	.word	0x080094e5
 80094b0:	080094e5 	.word	0x080094e5
 80094b4:	080094e5 	.word	0x080094e5
 80094b8:	080094e5 	.word	0x080094e5
 80094bc:	080094e5 	.word	0x080094e5
 80094c0:	080094e5 	.word	0x080094e5
 80094c4:	080094e5 	.word	0x080094e5
 80094c8:	080094e5 	.word	0x080094e5
 80094cc:	080094e5 	.word	0x080094e5
 80094d0:	080094e5 	.word	0x080094e5
 80094d4:	080094e5 	.word	0x080094e5
 80094d8:	080094e5 	.word	0x080094e5
 80094dc:	080094e5 	.word	0x080094e5
 80094e0:	080094e5 	.word	0x080094e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094e4:	bf00      	nop
  }

  return (USBD_OK);
 80094e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	4805      	ldr	r0, [pc, #20]	@ (8009518 <CDC_Receive_FS+0x24>)
 8009502:	f7fe fde8 	bl	80080d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009506:	4804      	ldr	r0, [pc, #16]	@ (8009518 <CDC_Receive_FS+0x24>)
 8009508:	f7fe fdfe 	bl	8008108 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800950c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200002fc 	.word	0x200002fc

0800951c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4613      	mov	r3, r2
 8009528:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800952e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009532:	4618      	mov	r0, r3
 8009534:	371c      	adds	r7, #28
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
	...

08009540 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2212      	movs	r2, #18
 8009550:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009552:	4b03      	ldr	r3, [pc, #12]	@ (8009560 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	20000150 	.word	0x20000150

08009564 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2204      	movs	r2, #4
 8009574:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009576:	4b03      	ldr	r3, [pc, #12]	@ (8009584 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	20000164 	.word	0x20000164

08009588 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	4907      	ldr	r1, [pc, #28]	@ (80095bc <USBD_CDC_ProductStrDescriptor+0x34>)
 800959e:	4808      	ldr	r0, [pc, #32]	@ (80095c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80095a0:	f7ff fe1d 	bl	80091de <USBD_GetString>
 80095a4:	e004      	b.n	80095b0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	4904      	ldr	r1, [pc, #16]	@ (80095bc <USBD_CDC_ProductStrDescriptor+0x34>)
 80095aa:	4805      	ldr	r0, [pc, #20]	@ (80095c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80095ac:	f7ff fe17 	bl	80091de <USBD_GetString>
  }
  return USBD_StrDesc;
 80095b0:	4b02      	ldr	r3, [pc, #8]	@ (80095bc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000dcc 	.word	0x20000dcc
 80095c0:	0800a3a4 	.word	0x0800a3a4

080095c4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	4904      	ldr	r1, [pc, #16]	@ (80095e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80095d4:	4804      	ldr	r0, [pc, #16]	@ (80095e8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80095d6:	f7ff fe02 	bl	80091de <USBD_GetString>
  return USBD_StrDesc;
 80095da:	4b02      	ldr	r3, [pc, #8]	@ (80095e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000dcc 	.word	0x20000dcc
 80095e8:	0800a3bc 	.word	0x0800a3bc

080095ec <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	221a      	movs	r2, #26
 80095fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095fe:	f000 f843 	bl	8009688 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009602:	4b02      	ldr	r3, [pc, #8]	@ (800960c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000168 	.word	0x20000168

08009610 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	6039      	str	r1, [r7, #0]
 800961a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d105      	bne.n	800962e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4907      	ldr	r1, [pc, #28]	@ (8009644 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009626:	4808      	ldr	r0, [pc, #32]	@ (8009648 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009628:	f7ff fdd9 	bl	80091de <USBD_GetString>
 800962c:	e004      	b.n	8009638 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	4904      	ldr	r1, [pc, #16]	@ (8009644 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009632:	4805      	ldr	r0, [pc, #20]	@ (8009648 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009634:	f7ff fdd3 	bl	80091de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009638:	4b02      	ldr	r3, [pc, #8]	@ (8009644 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000dcc 	.word	0x20000dcc
 8009648:	0800a3d0 	.word	0x0800a3d0

0800964c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	6039      	str	r1, [r7, #0]
 8009656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d105      	bne.n	800966a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	4907      	ldr	r1, [pc, #28]	@ (8009680 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009662:	4808      	ldr	r0, [pc, #32]	@ (8009684 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009664:	f7ff fdbb 	bl	80091de <USBD_GetString>
 8009668:	e004      	b.n	8009674 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	4904      	ldr	r1, [pc, #16]	@ (8009680 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800966e:	4805      	ldr	r0, [pc, #20]	@ (8009684 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009670:	f7ff fdb5 	bl	80091de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009674:	4b02      	ldr	r3, [pc, #8]	@ (8009680 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000dcc 	.word	0x20000dcc
 8009684:	0800a3dc 	.word	0x0800a3dc

08009688 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800968e:	4b0f      	ldr	r3, [pc, #60]	@ (80096cc <Get_SerialNum+0x44>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009694:	4b0e      	ldr	r3, [pc, #56]	@ (80096d0 <Get_SerialNum+0x48>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800969a:	4b0e      	ldr	r3, [pc, #56]	@ (80096d4 <Get_SerialNum+0x4c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4413      	add	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d009      	beq.n	80096c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096ae:	2208      	movs	r2, #8
 80096b0:	4909      	ldr	r1, [pc, #36]	@ (80096d8 <Get_SerialNum+0x50>)
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 f814 	bl	80096e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096b8:	2204      	movs	r2, #4
 80096ba:	4908      	ldr	r1, [pc, #32]	@ (80096dc <Get_SerialNum+0x54>)
 80096bc:	68b8      	ldr	r0, [r7, #8]
 80096be:	f000 f80f 	bl	80096e0 <IntToUnicode>
  }
}
 80096c2:	bf00      	nop
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	1fff7590 	.word	0x1fff7590
 80096d0:	1fff7594 	.word	0x1fff7594
 80096d4:	1fff7598 	.word	0x1fff7598
 80096d8:	2000016a 	.word	0x2000016a
 80096dc:	2000017a 	.word	0x2000017a

080096e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	4613      	mov	r3, r2
 80096ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096f2:	2300      	movs	r3, #0
 80096f4:	75fb      	strb	r3, [r7, #23]
 80096f6:	e027      	b.n	8009748 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	0f1b      	lsrs	r3, r3, #28
 80096fc:	2b09      	cmp	r3, #9
 80096fe:	d80b      	bhi.n	8009718 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	0f1b      	lsrs	r3, r3, #28
 8009704:	b2da      	uxtb	r2, r3
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	4619      	mov	r1, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	440b      	add	r3, r1
 8009710:	3230      	adds	r2, #48	@ 0x30
 8009712:	b2d2      	uxtb	r2, r2
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	e00a      	b.n	800972e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	0f1b      	lsrs	r3, r3, #28
 800971c:	b2da      	uxtb	r2, r3
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	4619      	mov	r1, r3
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	440b      	add	r3, r1
 8009728:	3237      	adds	r2, #55	@ 0x37
 800972a:	b2d2      	uxtb	r2, r2
 800972c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	3301      	adds	r3, #1
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	4413      	add	r3, r2
 800973e:	2200      	movs	r2, #0
 8009740:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	3301      	adds	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
 8009748:	7dfa      	ldrb	r2, [r7, #23]
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	429a      	cmp	r2, r3
 800974e:	d3d3      	bcc.n	80096f8 <IntToUnicode+0x18>
  }
}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
	...

08009760 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b094      	sub	sp, #80	@ 0x50
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009768:	f107 030c 	add.w	r3, r7, #12
 800976c:	2244      	movs	r2, #68	@ 0x44
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fddf 	bl	800a334 <memset>
  if(pcdHandle->Instance==USB)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a15      	ldr	r2, [pc, #84]	@ (80097d0 <HAL_PCD_MspInit+0x70>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d122      	bne.n	80097c6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009784:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009786:	2300      	movs	r3, #0
 8009788:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800978a:	f107 030c 	add.w	r3, r7, #12
 800978e:	4618      	mov	r0, r3
 8009790:	f7fa fb0c 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800979a:	f7f7 f823 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800979e:	4b0d      	ldr	r3, [pc, #52]	@ (80097d4 <HAL_PCD_MspInit+0x74>)
 80097a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a2:	4a0c      	ldr	r2, [pc, #48]	@ (80097d4 <HAL_PCD_MspInit+0x74>)
 80097a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80097a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80097aa:	4b0a      	ldr	r3, [pc, #40]	@ (80097d4 <HAL_PCD_MspInit+0x74>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097b2:	60bb      	str	r3, [r7, #8]
 80097b4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	2014      	movs	r0, #20
 80097bc:	f7f7 faf9 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80097c0:	2014      	movs	r0, #20
 80097c2:	f7f7 fb10 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097c6:	bf00      	nop
 80097c8:	3750      	adds	r7, #80	@ 0x50
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	40005c00 	.word	0x40005c00
 80097d4:	40021000 	.word	0x40021000

080097d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80097ec:	4619      	mov	r1, r3
 80097ee:	4610      	mov	r0, r2
 80097f0:	f7fe fd56 	bl	80082a0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800980e:	78fa      	ldrb	r2, [r7, #3]
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	440b      	add	r3, r1
 800981c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	4619      	mov	r1, r3
 8009826:	f7fe fd90 	bl	800834a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009844:	78fa      	ldrb	r2, [r7, #3]
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	440b      	add	r3, r1
 8009852:	3324      	adds	r3, #36	@ 0x24
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	4619      	mov	r1, r3
 800985a:	f7fe fdd9 	bl	8008410 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe feed 	bl	8008654 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800987a:	bf00      	nop
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800988a:	2301      	movs	r3, #1
 800988c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	795b      	ldrb	r3, [r3, #5]
 8009892:	2b02      	cmp	r3, #2
 8009894:	d001      	beq.n	800989a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009896:	f7f6 ffa5 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098a0:	7bfa      	ldrb	r2, [r7, #15]
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fe97 	bl	80085d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fe43 	bl	800853c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fe92 	bl	80085f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	7a5b      	ldrb	r3, [r3, #9]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d005      	beq.n	80098e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098dc:	4b04      	ldr	r3, [pc, #16]	@ (80098f0 <HAL_PCD_SuspendCallback+0x30>)
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	4a03      	ldr	r2, [pc, #12]	@ (80098f0 <HAL_PCD_SuspendCallback+0x30>)
 80098e2:	f043 0306 	orr.w	r3, r3, #6
 80098e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	e000ed00 	.word	0xe000ed00

080098f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7a5b      	ldrb	r3, [r3, #9]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d007      	beq.n	8009914 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009904:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <HAL_PCD_ResumeCallback+0x34>)
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	4a07      	ldr	r2, [pc, #28]	@ (8009928 <HAL_PCD_ResumeCallback+0x34>)
 800990a:	f023 0306 	bic.w	r3, r3, #6
 800990e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009910:	f000 f9f8 	bl	8009d04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fe82 	bl	8008624 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed00 	.word	0xe000ed00

0800992c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009934:	4a2b      	ldr	r2, [pc, #172]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a29      	ldr	r2, [pc, #164]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009940:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009944:	4b27      	ldr	r3, [pc, #156]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009946:	4a28      	ldr	r2, [pc, #160]	@ (80099e8 <USBD_LL_Init+0xbc>)
 8009948:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800994a:	4b26      	ldr	r3, [pc, #152]	@ (80099e4 <USBD_LL_Init+0xb8>)
 800994c:	2208      	movs	r2, #8
 800994e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009950:	4b24      	ldr	r3, [pc, #144]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009952:	2202      	movs	r2, #2
 8009954:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009956:	4b23      	ldr	r3, [pc, #140]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009958:	2202      	movs	r2, #2
 800995a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800995c:	4b21      	ldr	r3, [pc, #132]	@ (80099e4 <USBD_LL_Init+0xb8>)
 800995e:	2200      	movs	r2, #0
 8009960:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009962:	4b20      	ldr	r3, [pc, #128]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009964:	2200      	movs	r2, #0
 8009966:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009968:	4b1e      	ldr	r3, [pc, #120]	@ (80099e4 <USBD_LL_Init+0xb8>)
 800996a:	2200      	movs	r2, #0
 800996c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800996e:	4b1d      	ldr	r3, [pc, #116]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009970:	2200      	movs	r2, #0
 8009972:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009974:	481b      	ldr	r0, [pc, #108]	@ (80099e4 <USBD_LL_Init+0xb8>)
 8009976:	f7f7 ff35 	bl	80017e4 <HAL_PCD_Init>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009980:	f7f6 ff30 	bl	80007e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800998a:	2318      	movs	r3, #24
 800998c:	2200      	movs	r2, #0
 800998e:	2100      	movs	r1, #0
 8009990:	f7f9 fbbc 	bl	800310c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800999a:	2358      	movs	r3, #88	@ 0x58
 800999c:	2200      	movs	r2, #0
 800999e:	2180      	movs	r1, #128	@ 0x80
 80099a0:	f7f9 fbb4 	bl	800310c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099aa:	23c0      	movs	r3, #192	@ 0xc0
 80099ac:	2200      	movs	r2, #0
 80099ae:	2181      	movs	r1, #129	@ 0x81
 80099b0:	f7f9 fbac 	bl	800310c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099ba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80099be:	2200      	movs	r2, #0
 80099c0:	2101      	movs	r1, #1
 80099c2:	f7f9 fba3 	bl	800310c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099d0:	2200      	movs	r2, #0
 80099d2:	2182      	movs	r1, #130	@ 0x82
 80099d4:	f7f9 fb9a 	bl	800310c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20000fcc 	.word	0x20000fcc
 80099e8:	40005c00 	.word	0x40005c00

080099ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7f7 ffbc 	bl	8001980 <HAL_PCD_Start>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 f97e 	bl	8009d10 <USBD_Get_USB_Status>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	4608      	mov	r0, r1
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	461a      	mov	r2, r3
 8009a30:	4603      	mov	r3, r0
 8009a32:	70fb      	strb	r3, [r7, #3]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70bb      	strb	r3, [r7, #2]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009a4a:	78bb      	ldrb	r3, [r7, #2]
 8009a4c:	883a      	ldrh	r2, [r7, #0]
 8009a4e:	78f9      	ldrb	r1, [r7, #3]
 8009a50:	f7f8 f903 	bl	8001c5a <HAL_PCD_EP_Open>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f958 	bl	8009d10 <USBD_Get_USB_Status>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f8 f943 	bl	8001d18 <HAL_PCD_EP_Close>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 f939 	bl	8009d10 <USBD_Get_USB_Status>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7f8 f9ec 	bl	8001ea8 <HAL_PCD_EP_SetStall>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f91a 	bl	8009d10 <USBD_Get_USB_Status>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f8 fa1f 	bl	8001f4c <HAL_PCD_EP_ClrStall>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 f8fb 	bl	8009d10 <USBD_Get_USB_Status>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da0b      	bge.n	8009b5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	440b      	add	r3, r1
 8009b56:	3312      	adds	r3, #18
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	e00b      	b.n	8009b74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b62:	68f9      	ldr	r1, [r7, #12]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	440b      	add	r3, r1
 8009b6e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009b72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7f8 f837 	bl	8001c12 <HAL_PCD_SetAddress>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f8b0 	bl	8009d10 <USBD_Get_USB_Status>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b086      	sub	sp, #24
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009bdc:	7af9      	ldrb	r1, [r7, #11]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	f7f8 f92a 	bl	8001e3a <HAL_PCD_EP_Transmit>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f88f 	bl	8009d10 <USBD_Get_USB_Status>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	607a      	str	r2, [r7, #4]
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009c1e:	7af9      	ldrb	r1, [r7, #11]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	f7f8 f8c0 	bl	8001da8 <HAL_PCD_EP_Receive>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f86e 	bl	8009d10 <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c38:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f8 f8d6 	bl	8001e0a <HAL_PCD_EP_GetRxCount>
 8009c5e:	4603      	mov	r3, r0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <HAL_PCDEx_LPM_Callback+0x18>
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d013      	beq.n	8009ca6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009c7e:	e023      	b.n	8009cc8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7a5b      	ldrb	r3, [r3, #9]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009c88:	f000 f83c 	bl	8009d04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c8c:	4b10      	ldr	r3, [pc, #64]	@ (8009cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	4a0f      	ldr	r2, [pc, #60]	@ (8009cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c92:	f023 0306 	bic.w	r3, r3, #6
 8009c96:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe fcc0 	bl	8008624 <USBD_LL_Resume>
    break;
 8009ca4:	e010      	b.n	8009cc8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fca3 	bl	80085f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7a5b      	ldrb	r3, [r3, #9]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cba:	4b05      	ldr	r3, [pc, #20]	@ (8009cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	4a04      	ldr	r2, [pc, #16]	@ (8009cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009cc0:	f043 0306 	orr.w	r3, r3, #6
 8009cc4:	6113      	str	r3, [r2, #16]
    break;
 8009cc6:	bf00      	nop
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	e000ed00 	.word	0xe000ed00

08009cd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cdc:	4b03      	ldr	r3, [pc, #12]	@ (8009cec <USBD_static_malloc+0x18>)
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	200012a8 	.word	0x200012a8

08009cf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]

}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009d08:	f7f6 fc38 	bl	800057c <SystemClock_Config>
}
 8009d0c:	bf00      	nop
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d817      	bhi.n	8009d54 <USBD_Get_USB_Status+0x44>
 8009d24:	a201      	add	r2, pc, #4	@ (adr r2, 8009d2c <USBD_Get_USB_Status+0x1c>)
 8009d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2a:	bf00      	nop
 8009d2c:	08009d3d 	.word	0x08009d3d
 8009d30:	08009d43 	.word	0x08009d43
 8009d34:	08009d49 	.word	0x08009d49
 8009d38:	08009d4f 	.word	0x08009d4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d40:	e00b      	b.n	8009d5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d42:	2303      	movs	r3, #3
 8009d44:	73fb      	strb	r3, [r7, #15]
    break;
 8009d46:	e008      	b.n	8009d5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4c:	e005      	b.n	8009d5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	73fb      	strb	r3, [r7, #15]
    break;
 8009d52:	e002      	b.n	8009d5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d54:	2303      	movs	r3, #3
 8009d56:	73fb      	strb	r3, [r7, #15]
    break;
 8009d58:	bf00      	nop
  }
  return usb_status;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <empty_cb>:
    pCB->head = 0;
    pCB->tail = 0;
    pCB->locked = 0;
}

void empty_cb(CircularBuffer* pCB) {
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
    if(pCB == NULL) return;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d028      	beq.n	8009dc8 <empty_cb+0x60>

    pCB->head = 0;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	721a      	strb	r2, [r3, #8]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	725a      	strb	r2, [r3, #9]
 8009d80:	2200      	movs	r2, #0
 8009d82:	729a      	strb	r2, [r3, #10]
 8009d84:	2200      	movs	r2, #0
 8009d86:	72da      	strb	r2, [r3, #11]
    pCB->tail = 0;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	731a      	strb	r2, [r3, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	735a      	strb	r2, [r3, #13]
 8009d92:	2200      	movs	r2, #0
 8009d94:	739a      	strb	r2, [r3, #14]
 8009d96:	2200      	movs	r2, #0
 8009d98:	73da      	strb	r2, [r3, #15]
    pCB->len  = 0;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	711a      	strb	r2, [r3, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	715a      	strb	r2, [r3, #5]
 8009da4:	2200      	movs	r2, #0
 8009da6:	719a      	strb	r2, [r3, #6]
 8009da8:	2200      	movs	r2, #0
 8009daa:	71da      	strb	r2, [r3, #7]
    pCB->locked = 0;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2268 	strb.w	r2, [r3, #616]	@ 0x268
    memset(pCB->data, 0, pCB->size);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f103 0010 	add.w	r0, r3, #16
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	f000 fab7 	bl	800a334 <memset>
 8009dc6:	e000      	b.n	8009dca <empty_cb+0x62>
    if(pCB == NULL) return;
 8009dc8:	bf00      	nop
}
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <updateIndices_cb>:
    }

    return 1;
}

uint8_t updateIndices_cb(CircularBuffer* pCB, uint32_t ullNewHeadIndex) {
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
    uint32_t ullReadBytes = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
    if(ullNewHeadIndex >= pCB->head) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d305      	bcc.n	8009df4 <updateIndices_cb+0x24>
        ullReadBytes = ullNewHeadIndex - pCB->head;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e007      	b.n	8009e04 <updateIndices_cb+0x34>
    }else {
        ullReadBytes = ullNewHeadIndex + pCB->size - pCB->head;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	441a      	add	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	60fb      	str	r3, [r7, #12]
    }

    // Is data being overwritten without being processed? 
    if((ullReadBytes + pCB->len) > pCB->size) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	441a      	add	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d918      	bls.n	8009e46 <updateIndices_cb+0x76>
        // Update the tail index too.
        pCB->tail += ullReadBytes - pCB->len;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	68f9      	ldr	r1, [r7, #12]
 8009e1e:	1acb      	subs	r3, r1, r3
 8009e20:	441a      	add	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	60da      	str	r2, [r3, #12]
        pCB->tail %= pCB->size;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	6812      	ldr	r2, [r2, #0]
 8009e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e32:	fb01 f202 	mul.w	r2, r1, r2
 8009e36:	1a9a      	subs	r2, r3, r2
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60da      	str	r2, [r3, #12]
        pCB->len = pCB->size;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]
 8009e44:	e005      	b.n	8009e52 <updateIndices_cb+0x82>
    }else {
        pCB->len += ullReadBytes;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	441a      	add	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	605a      	str	r2, [r3, #4]
    }

    pCB->head = ullNewHeadIndex;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	609a      	str	r2, [r3, #8]

    return 1;
 8009e58:	2301      	movs	r3, #1
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <initLoRa>:
#include "LoRa.h"

void initLoRa(LoRa* lora, UART* uart) {
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
    if(lora == NULL || uart == NULL) return;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <initLoRa+0x26>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d007      	beq.n	8009e8c <initLoRa+0x26>

    readConfigurationRegisters(lora);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f809 	bl	8009e94 <readConfigurationRegisters>
    setMode(lora, MODE_0_NORMAL);
 8009e82:	2100      	movs	r1, #0
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f8ef 	bl	800a068 <setMode>
 8009e8a:	e000      	b.n	8009e8e <initLoRa+0x28>
    if(lora == NULL || uart == NULL) return;
 8009e8c:	bf00      	nop
}
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <readConfigurationRegisters>:
    if(msg == NULL) return LORA_ERR_INVALID_PARAM;

    return writeData(lora, msg->data, msg->len);
}

LoRaStatus readConfigurationRegisters(LoRa* lora) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
    if(lora == NULL) return LORA_ERR_INVALID_PARAM;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <readConfigurationRegisters+0x12>
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e051      	b.n	8009f4a <readConfigurationRegisters+0xb6>

    LoRaMode previousMode = lora->currentMode;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	791b      	ldrb	r3, [r3, #4]
 8009eaa:	73fb      	strb	r3, [r7, #15]

    // Switch to Program mode.
    LoRaStatus st = setMode(lora, MODE_3_PROGRAM);
 8009eac:	2103      	movs	r1, #3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8da 	bl	800a068 <setMode>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73bb      	strb	r3, [r7, #14]
    if(st != LORA_SUCCESS) return st;
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d001      	beq.n	8009ec2 <readConfigurationRegisters+0x2e>
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	e043      	b.n	8009f4a <readConfigurationRegisters+0xb6>

    // Write the command to read the configuration register (CFG).
    uint8_t writeStatus = writeProgramCommand(lora, READ_CONFIGURATION, 
 8009ec2:	2308      	movs	r3, #8
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	21c1      	movs	r1, #193	@ 0xc1
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f89b 	bl	800a004 <writeProgramCommand>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	737b      	strb	r3, [r7, #13]
                                              REG_ADDS_ADDH, PL_CONFIGURATION);
    if(!writeStatus) {
 8009ed2:	7b7b      	ldrb	r3, [r7, #13]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d106      	bne.n	8009ee6 <readConfigurationRegisters+0x52>
        setMode(lora, previousMode);
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f8c3 	bl	800a068 <setMode>
        return LORA_ERR_HARDWARE;        
 8009ee2:	2305      	movs	r3, #5
 8009ee4:	e031      	b.n	8009f4a <readConfigurationRegisters+0xb6>
    }

    // Receive response.
    LoRaStatus receiveStatus = receiveData(lora, 
                                           sizeof(LoRaConfiguration), 
                                           (uint8_t*) &lora->currentConfig);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3305      	adds	r3, #5
    LoRaStatus receiveStatus = receiveData(lora, 
 8009eea:	461a      	mov	r2, r3
 8009eec:	210b      	movs	r1, #11
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f82f 	bl	8009f52 <receiveData>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	733b      	strb	r3, [r7, #12]
    if(receiveStatus != LORA_SUCCESS) {
 8009ef8:	7b3b      	ldrb	r3, [r7, #12]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d006      	beq.n	8009f0c <readConfigurationRegisters+0x78>
        setMode(lora, previousMode);
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f8b0 	bl	800a068 <setMode>
        return LORA_ERR_HARDWARE;
 8009f08:	2305      	movs	r3, #5
 8009f0a:	e01e      	b.n	8009f4a <readConfigurationRegisters+0xb6>
    }

    // Check the command field of the response.
    if(lora->currentConfig.command == WRONG_FORMAT) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	795b      	ldrb	r3, [r3, #5]
 8009f10:	2bff      	cmp	r3, #255	@ 0xff
 8009f12:	d106      	bne.n	8009f22 <readConfigurationRegisters+0x8e>
        setMode(lora, previousMode);
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f8a5 	bl	800a068 <setMode>
        return LORA_ERR_WRONG_FORMAT;
 8009f1e:	2307      	movs	r3, #7
 8009f20:	e013      	b.n	8009f4a <readConfigurationRegisters+0xb6>
    }else if(lora->currentConfig.command != READ_CONFIGURATION ||
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	795b      	ldrb	r3, [r3, #5]
 8009f26:	2bc1      	cmp	r3, #193	@ 0xc1
 8009f28:	d107      	bne.n	8009f3a <readConfigurationRegisters+0xa6>
             lora->currentConfig.startAddress != REG_ADDS_ADDH ||
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	799b      	ldrb	r3, [r3, #6]
    }else if(lora->currentConfig.command != READ_CONFIGURATION ||
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <readConfigurationRegisters+0xa6>
             lora->currentConfig.length != PL_CONFIGURATION) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	79db      	ldrb	r3, [r3, #7]
             lora->currentConfig.startAddress != REG_ADDS_ADDH ||
 8009f36:	2b08      	cmp	r3, #8
 8009f38:	d001      	beq.n	8009f3e <readConfigurationRegisters+0xaa>
        return LORA_ERR_HEAD_NOT_RECOGNIZED;
 8009f3a:	2306      	movs	r3, #6
 8009f3c:	e005      	b.n	8009f4a <readConfigurationRegisters+0xb6>
    }

    // Switch to the previous mode.
    setMode(lora, previousMode);
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f890 	bl	800a068 <setMode>

    return LORA_SUCCESS;
 8009f48:	2301      	movs	r3, #1
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <receiveData>:
    setMode(lora, previousMode);

    return LORA_SUCCESS;
}

LoRaStatus receiveData(LoRa* lora, uint16_t dataLen, uint8_t* dataBuffer) {
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b086      	sub	sp, #24
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	607a      	str	r2, [r7, #4]
 8009f5e:	817b      	strh	r3, [r7, #10]
    if(lora == NULL) return LORA_ERR_INVALID_PARAM;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <receiveData+0x18>
 8009f66:	2303      	movs	r3, #3
 8009f68:	e01d      	b.n	8009fa6 <receiveData+0x54>

    // Read data from the UART.
    HAL_StatusTypeDef status = HAL_UART_Receive(lora->uart->hUART, dataBuffer, dataLen, 1000);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	@ 0x4d4
 8009f72:	897a      	ldrh	r2, [r7, #10]
 8009f74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	f7fa f9e5 	bl	8004348 <HAL_UART_Receive>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	75fb      	strb	r3, [r7, #23]
    // While the LoRa module is transmitting the AUX pin remains LOW.
    LoRaStatus auxStatus = waitAUXPin(lora, 1000);
 8009f82:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 f812 	bl	8009fb0 <waitAUXPin>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	75bb      	strb	r3, [r7, #22]
    if(status == HAL_TIMEOUT) return LORA_ERR_TIMEOUT;
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d101      	bne.n	8009f9a <receiveData+0x48>
 8009f96:	2304      	movs	r3, #4
 8009f98:	e005      	b.n	8009fa6 <receiveData+0x54>
    else if(status == HAL_ERROR) return LORA_ERR_UNKNOWN;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <receiveData+0x52>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e000      	b.n	8009fa6 <receiveData+0x54>
    return auxStatus; 
 8009fa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <waitAUXPin>:
    if(status == HAL_TIMEOUT) return LORA_ERR_TIMEOUT;
    else if(status == HAL_ERROR) return LORA_ERR_UNKNOWN;
    return auxStatus; 
}

LoRaStatus waitAUXPin(LoRa* lora, uint32_t timeout_ms) {
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
    if(lora == NULL) return LORA_ERR_INVALID_PARAM;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <waitAUXPin+0x14>
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e019      	b.n	8009ff8 <waitAUXPin+0x48>

    // The AUX pin remains LOW while the module is busy.
    uint32_t t0 = HAL_GetTick();
 8009fc4:	f7f6 fdec 	bl	8000ba0 <HAL_GetTick>
 8009fc8:	60f8      	str	r0, [r7, #12]
    while(HAL_GPIO_ReadPin(LORA_AUX_GPIO_Port, LORA_AUX_Pin) == GPIO_PIN_RESET) {
 8009fca:	e009      	b.n	8009fe0 <waitAUXPin+0x30>
        if(((uint32_t)(HAL_GetTick() - t0)) > timeout_ms) {
 8009fcc:	f7f6 fde8 	bl	8000ba0 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d201      	bcs.n	8009fe0 <waitAUXPin+0x30>
            return LORA_ERR_TIMEOUT;
 8009fdc:	2304      	movs	r3, #4
 8009fde:	e00b      	b.n	8009ff8 <waitAUXPin+0x48>
    while(HAL_GPIO_ReadPin(LORA_AUX_GPIO_Port, LORA_AUX_Pin) == GPIO_PIN_RESET) {
 8009fe0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009fe4:	4806      	ldr	r0, [pc, #24]	@ (800a000 <waitAUXPin+0x50>)
 8009fe6:	f7f7 fbcd 	bl	8001784 <HAL_GPIO_ReadPin>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d0ed      	beq.n	8009fcc <waitAUXPin+0x1c>
        }
    }

    HAL_Delay(20);
 8009ff0:	2014      	movs	r0, #20
 8009ff2:	f7f6 fde1 	bl	8000bb8 <HAL_Delay>
    return LORA_SUCCESS;
 8009ff6:	2301      	movs	r3, #1
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	48000400 	.word	0x48000400

0800a004 <writeProgramCommand>:

uint8_t writeProgramCommand(LoRa* lora, 
                            LoRaCommand cmd, LoRaRegAdds addrs, LoRaPacketLength packetLength) {
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	461a      	mov	r2, r3
 800a012:	4603      	mov	r3, r0
 800a014:	70fb      	strb	r3, [r7, #3]
 800a016:	460b      	mov	r3, r1
 800a018:	70bb      	strb	r3, [r7, #2]
 800a01a:	4613      	mov	r3, r2
 800a01c:	707b      	strb	r3, [r7, #1]
    if(lora == NULL) return LORA_ERR_INVALID_PARAM;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <writeProgramCommand+0x24>
 800a024:	2303      	movs	r3, #3
 800a026:	e01b      	b.n	800a060 <writeProgramCommand+0x5c>

    uint8_t outMsg[3] = {cmd, addrs, packetLength};
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	733b      	strb	r3, [r7, #12]
 800a02c:	78bb      	ldrb	r3, [r7, #2]
 800a02e:	737b      	strb	r3, [r7, #13]
 800a030:	787b      	ldrb	r3, [r7, #1]
 800a032:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_UART_Transmit(lora->uart->hUART, outMsg, sizeof(outMsg), 1000);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	@ 0x4d4
 800a03c:	f107 010c 	add.w	r1, r7, #12
 800a040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a044:	2203      	movs	r2, #3
 800a046:	f7fa f8f1 	bl	800422c <HAL_UART_Transmit>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(50);
 800a04e:	2032      	movs	r0, #50	@ 0x32
 800a050:	f7f6 fdb2 	bl	8000bb8 <HAL_Delay>
    return status == HAL_OK;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2b00      	cmp	r3, #0
 800a058:	bf0c      	ite	eq
 800a05a:	2301      	moveq	r3, #1
 800a05c:	2300      	movne	r3, #0
 800a05e:	b2db      	uxtb	r3, r3
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <setMode>:

LoRaStatus setMode(LoRa* lora, LoRaMode mode) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
    if(lora == NULL) return LORA_ERR_INVALID_PARAM;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <setMode+0x16>
 800a07a:	2303      	movs	r3, #3
 800a07c:	e057      	b.n	800a12e <setMode+0xc6>

    HAL_Delay(40);
 800a07e:	2028      	movs	r0, #40	@ 0x28
 800a080:	f7f6 fd9a 	bl	8000bb8 <HAL_Delay>

    switch (mode) {
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d83e      	bhi.n	800a108 <setMode+0xa0>
 800a08a:	a201      	add	r2, pc, #4	@ (adr r2, 800a090 <setMode+0x28>)
 800a08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a090:	0800a0a1 	.word	0x0800a0a1
 800a094:	0800a0bb 	.word	0x0800a0bb
 800a098:	0800a0d5 	.word	0x0800a0d5
 800a09c:	0800a0ef 	.word	0x0800a0ef
        case MODE_0_NORMAL:
            HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, GPIO_PIN_RESET);
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a0a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0aa:	f7f7 fb83 	bl	80017b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, GPIO_PIN_RESET);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2140      	movs	r1, #64	@ 0x40
 800a0b2:	4821      	ldr	r0, [pc, #132]	@ (800a138 <setMode+0xd0>)
 800a0b4:	f7f7 fb7e 	bl	80017b4 <HAL_GPIO_WritePin>
            break;
 800a0b8:	e028      	b.n	800a10c <setMode+0xa4>
        case MODE_1_WOR_TRANSMITTER:
            HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, GPIO_PIN_SET);
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a0c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0c4:	f7f7 fb76 	bl	80017b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, GPIO_PIN_RESET);
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2140      	movs	r1, #64	@ 0x40
 800a0cc:	481a      	ldr	r0, [pc, #104]	@ (800a138 <setMode+0xd0>)
 800a0ce:	f7f7 fb71 	bl	80017b4 <HAL_GPIO_WritePin>
            break;
 800a0d2:	e01b      	b.n	800a10c <setMode+0xa4>
        case MODE_2_WOR_RECEIVER:
            HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, GPIO_PIN_RESET);
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a0da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0de:	f7f7 fb69 	bl	80017b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, GPIO_PIN_SET);
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	2140      	movs	r1, #64	@ 0x40
 800a0e6:	4814      	ldr	r0, [pc, #80]	@ (800a138 <setMode+0xd0>)
 800a0e8:	f7f7 fb64 	bl	80017b4 <HAL_GPIO_WritePin>
            break;
 800a0ec:	e00e      	b.n	800a10c <setMode+0xa4>
        case MODE_3_CONFIGURATION:
            HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, GPIO_PIN_SET);
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a0f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0f8:	f7f7 fb5c 	bl	80017b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, GPIO_PIN_SET);
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	2140      	movs	r1, #64	@ 0x40
 800a100:	480d      	ldr	r0, [pc, #52]	@ (800a138 <setMode+0xd0>)
 800a102:	f7f7 fb57 	bl	80017b4 <HAL_GPIO_WritePin>
            break;
 800a106:	e001      	b.n	800a10c <setMode+0xa4>

        default:
            return LORA_ERR_INVALID_PARAM;
 800a108:	2303      	movs	r3, #3
 800a10a:	e010      	b.n	800a12e <setMode+0xc6>
    }

    HAL_Delay(40);
 800a10c:	2028      	movs	r0, #40	@ 0x28
 800a10e:	f7f6 fd53 	bl	8000bb8 <HAL_Delay>

    LoRaStatus st = waitAUXPin(lora, 1000);
 800a112:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff ff4a 	bl	8009fb0 <waitAUXPin>
 800a11c:	4603      	mov	r3, r0
 800a11e:	73fb      	strb	r3, [r7, #15]
    if(st == LORA_SUCCESS) {
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d102      	bne.n	800a12c <setMode+0xc4>
        lora->currentMode = mode;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	78fa      	ldrb	r2, [r7, #3]
 800a12a:	711a      	strb	r2, [r3, #4]
    } 
    
    return st;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	48000800 	.word	0x48000800

0800a13c <initMainMCU>:

MainMCU mcu;

void initMainMCU(UART_HandleTypeDef* huart1,
                 DMA_HandleTypeDef*  hdma_usart1_rx,
                 DMA_HandleTypeDef*  hdma_usart1_tx) {
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
    initUART(&mcu.uart, huart1, hdma_usart1_rx, hdma_usart1_tx),
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	68f9      	ldr	r1, [r7, #12]
 800a14e:	4805      	ldr	r0, [pc, #20]	@ (800a164 <initMainMCU+0x28>)
 800a150:	f000 f816 	bl	800a180 <initUART>
    initLoRa(&mcu.lora, &mcu.uart);
 800a154:	4903      	ldr	r1, [pc, #12]	@ (800a164 <initMainMCU+0x28>)
 800a156:	4804      	ldr	r0, [pc, #16]	@ (800a168 <initMainMCU+0x2c>)
 800a158:	f7ff fe85 	bl	8009e66 <initLoRa>
}
 800a15c:	bf00      	nop
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200014c8 	.word	0x200014c8
 800a168:	200019ac 	.word	0x200019ac

0800a16c <mainLoop>:

void mainLoop() {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
    // if(lora.getNextMessage(&msg) == LoRaStatus::LORA_SUCCESS) {
    //     int len = snprintf(serialMsg, sizeof(serialMsg), "Received >%.*s<", msg.len, msg.data);
    //     CDC_Transmit_FS((uint8_t*) serialMsg, len);
    // }

    updateUART(&mcu.uart);
 800a170:	4802      	ldr	r0, [pc, #8]	@ (800a17c <mainLoop+0x10>)
 800a172:	f000 f823 	bl	800a1bc <updateUART>
 800a176:	bf00      	nop
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	200014c8 	.word	0x200014c8

0800a180 <initUART>:
#include "MainMCU.h"

void initUART(UART* uart,
              UART_HandleTypeDef*     hUART,
              DMA_HandleTypeDef*      rxDMA,
              DMA_HandleTypeDef*      txDMA) {
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]

    if(uart == NULL) return;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00f      	beq.n	800a1b4 <initUART+0x34>

    uart->hUART        = hUART;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4
    uart->rxDMA        = rxDMA; 
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
    uart->txDMA        = txDMA;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	f8c3 24dc 	str.w	r2, [r3, #1244]	@ 0x4dc

    attachDMAToUART(uart);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f833 	bl	800a218 <attachDMAToUART>
 800a1b2:	e000      	b.n	800a1b6 <initUART+0x36>
    if(uart == NULL) return;
 800a1b4:	bf00      	nop
}
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <updateUART>:

void updateUART(UART* uart) {
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
    if(uart->txSend) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d020      	beq.n	800a210 <updateUART+0x54>
        // Lock the buffer until the DMA has sent the message. The callback will unlock it.
        uart->TXBuffer.locked = 1;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 24d1 	strb.w	r2, [r3, #1233]	@ 0x4d1

        HAL_UART_Transmit_DMA(uart->hUART, uart->TXBuffer.data, uart->TXBuffer.len);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	@ 0x4d4
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f203 2179 	addw	r1, r3, #633	@ 0x279
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 326d 	ldr.w	r3, [r3, #621]	@ 0x26d
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f7fa f974 	bl	80044d8 <HAL_UART_Transmit_DMA>

        // Disables an interruption that gets called half in transmission.
        __HAL_DMA_DISABLE_IT(uart->txDMA, DMA_IT_HT);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0204 	bic.w	r2, r2, #4
 800a206:	601a      	str	r2, [r3, #0]
        
        // The buffer has been sent!
        uart->txSend = 0;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
    }
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <attachDMAToUART>:

void attachDMAToUART(UART* uart) {
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
    // This function takes the buffer directly as a circular one. It won't update the indices of the 
    // struct, so that will be left upon us. 
    HAL_UARTEx_ReceiveToIdle_DMA(uart->hUART, uart->RXBuffer.data, uart->RXBuffer.size);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	@ 0x4d4
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f103 0110 	add.w	r1, r3, #16
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	461a      	mov	r2, r3
 800a234:	f7fb fd63 	bl	8005cfe <HAL_UARTEx_ReceiveToIdle_DMA>

    // // This disables an interruption that triggers when the buffer gets filled to its full size.
    // __HAL_DMA_DISABLE_IT(pstUART->rxDMA, DMA_IT_TC);
    // // This disables an interruption that triggers when the buffer gets filled to half its size.
    // __HAL_DMA_DISABLE_IT(pstUART->rxDMA, DMA_IT_HT);
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_UARTEx_RxEventCallback>:

/***************************************************************************************************
* This function is declared inside stm32l4xx_hal_uart.h for the user to define it. 
* This function gets called when a reception over a serial port has ended.
***************************************************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *hUART, uint16_t newHeadIndex) {   
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	807b      	strh	r3, [r7, #2]
    UART* referencedUART = NULL;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]
    if(hUART == mcu.uart.hUART) {
 800a250:	4b0c      	ldr	r3, [pc, #48]	@ (800a284 <HAL_UARTEx_RxEventCallback+0x44>)
 800a252:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d101      	bne.n	800a260 <HAL_UARTEx_RxEventCallback+0x20>
        referencedUART = &mcu.uart;
 800a25c:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <HAL_UARTEx_RxEventCallback+0x44>)
 800a25e:	60fb      	str	r3, [r7, #12]
    } // Add more UART handlers if used.

    if(referencedUART != NULL) {
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d009      	beq.n	800a27a <HAL_UARTEx_RxEventCallback+0x3a>
        updateIndices_cb(&referencedUART->RXBuffer, newHeadIndex);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	887a      	ldrh	r2, [r7, #2]
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff fdaf 	bl	8009dd0 <updateIndices_cb>
        referencedUART->rxSend = 1;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 24e1 	strb.w	r2, [r3, #1249]	@ 0x4e1
    }
}
 800a27a:	bf00      	nop
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	200014c8 	.word	0x200014c8

0800a288 <HAL_UART_TxCpltCallback>:

/***************************************************************************************************
* This function is declared inside stm32l4xx_hal_uart.h for the user to define it. 
* This function gets called when a transmission over a serial port has ended.
***************************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hUART) {
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
    UART* referencedUART = NULL;
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]
    if(hUART == mcu.uart.hUART) {
 800a294:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <HAL_UART_TxCpltCallback+0x40>)
 800a296:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d101      	bne.n	800a2a4 <HAL_UART_TxCpltCallback+0x1c>
        referencedUART = &mcu.uart;
 800a2a0:	4b09      	ldr	r3, [pc, #36]	@ (800a2c8 <HAL_UART_TxCpltCallback+0x40>)
 800a2a2:	60fb      	str	r3, [r7, #12]
    } // Add more UART handlers if used.

    if(referencedUART != NULL) {
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <HAL_UART_TxCpltCallback+0x36>
        // Unlock the TX buffer.
        referencedUART->TXBuffer.locked = 0;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 24d1 	strb.w	r2, [r3, #1233]	@ 0x4d1
        // The transmission doesn't use circular buffers, but we're using them so that we don't have
        // to implement a "simple buffer". To convert a circular buffer to simple buffer, just 
        // delete its content and restart the indices.
        empty_cb(&referencedUART->TXBuffer);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f203 2369 	addw	r3, r3, #617	@ 0x269
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fd55 	bl	8009d68 <empty_cb>
    }
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	200014c8 	.word	0x200014c8

0800a2cc <HAL_UART_ErrorCallback>:

/***************************************************************************************************
* This function is declared inside stm32l4xx_hal_uart.h for the user to define it. 
* This function gets called when an UART fails.
***************************************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef* hUART) {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
    UART* referencedUART = NULL;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60fb      	str	r3, [r7, #12]
    if(hUART == mcu.uart.hUART) {
 800a2d8:	4b15      	ldr	r3, [pc, #84]	@ (800a330 <HAL_UART_ErrorCallback+0x64>)
 800a2da:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d101      	bne.n	800a2e8 <HAL_UART_ErrorCallback+0x1c>
        referencedUART = &mcu.uart;
 800a2e4:	4b12      	ldr	r3, [pc, #72]	@ (800a330 <HAL_UART_ErrorCallback+0x64>)
 800a2e6:	60fb      	str	r3, [r7, #12]
    } // Add more UART handlers if used.

    if(referencedUART != NULL) {
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d01c      	beq.n	800a328 <HAL_UART_ErrorCallback+0x5c>
        empty_cb(&referencedUART->TXBuffer);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f203 2369 	addw	r3, r3, #617	@ 0x269
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff fd37 	bl	8009d68 <empty_cb>
        referencedUART->TXBuffer.locked = 0;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 24d1 	strb.w	r2, [r3, #1233]	@ 0x4d1
        referencedUART->txSend = 0;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0

        empty_cb(&referencedUART->RXBuffer);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fd2b 	bl	8009d68 <empty_cb>
        referencedUART->RXBuffer.locked = 0;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2268 	strb.w	r2, [r3, #616]	@ 0x268
        referencedUART->rxSend = 0;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 24e1 	strb.w	r2, [r3, #1249]	@ 0x4e1

        attachDMAToUART(referencedUART);
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f7ff ff78 	bl	800a218 <attachDMAToUART>
    }
}
 800a328:	bf00      	nop
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	200014c8 	.word	0x200014c8

0800a334 <memset>:
 800a334:	4402      	add	r2, r0
 800a336:	4603      	mov	r3, r0
 800a338:	4293      	cmp	r3, r2
 800a33a:	d100      	bne.n	800a33e <memset+0xa>
 800a33c:	4770      	bx	lr
 800a33e:	f803 1b01 	strb.w	r1, [r3], #1
 800a342:	e7f9      	b.n	800a338 <memset+0x4>

0800a344 <__libc_init_array>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4d0d      	ldr	r5, [pc, #52]	@ (800a37c <__libc_init_array+0x38>)
 800a348:	4c0d      	ldr	r4, [pc, #52]	@ (800a380 <__libc_init_array+0x3c>)
 800a34a:	1b64      	subs	r4, r4, r5
 800a34c:	10a4      	asrs	r4, r4, #2
 800a34e:	2600      	movs	r6, #0
 800a350:	42a6      	cmp	r6, r4
 800a352:	d109      	bne.n	800a368 <__libc_init_array+0x24>
 800a354:	4d0b      	ldr	r5, [pc, #44]	@ (800a384 <__libc_init_array+0x40>)
 800a356:	4c0c      	ldr	r4, [pc, #48]	@ (800a388 <__libc_init_array+0x44>)
 800a358:	f000 f818 	bl	800a38c <_init>
 800a35c:	1b64      	subs	r4, r4, r5
 800a35e:	10a4      	asrs	r4, r4, #2
 800a360:	2600      	movs	r6, #0
 800a362:	42a6      	cmp	r6, r4
 800a364:	d105      	bne.n	800a372 <__libc_init_array+0x2e>
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36c:	4798      	blx	r3
 800a36e:	3601      	adds	r6, #1
 800a370:	e7ee      	b.n	800a350 <__libc_init_array+0xc>
 800a372:	f855 3b04 	ldr.w	r3, [r5], #4
 800a376:	4798      	blx	r3
 800a378:	3601      	adds	r6, #1
 800a37a:	e7f2      	b.n	800a362 <__libc_init_array+0x1e>
 800a37c:	0800a434 	.word	0x0800a434
 800a380:	0800a434 	.word	0x0800a434
 800a384:	0800a434 	.word	0x0800a434
 800a388:	0800a438 	.word	0x0800a438

0800a38c <_init>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	bf00      	nop
 800a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a392:	bc08      	pop	{r3}
 800a394:	469e      	mov	lr, r3
 800a396:	4770      	bx	lr

0800a398 <_fini>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr
