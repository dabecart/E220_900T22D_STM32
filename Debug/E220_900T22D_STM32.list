
E220_900T22D_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004184  08004184  00005184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c4  080041c4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041c4  080041c4  000051c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041cc  080041cc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000051cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041d0  080041d0  000051d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080041d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  080041e0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080041e0  00006184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe2e  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002628  00000000  00000000  00015e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00018498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000844  00000000  00000000  00018f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db2f  00000000  00000000  000197b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db99  00000000  00000000  000372e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b774e  00000000  00000000  00044e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc5ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002adc  00000000  00000000  000fc610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ff0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800416c 	.word	0x0800416c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800416c 	.word	0x0800416c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 faab 	bl	8000aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f808 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8c8 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 f894 	bl	8000680 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000558:	f000 f842 	bl	80005e0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <main+0x18>

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2238      	movs	r2, #56	@ 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fdd0 	bl	8004114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000582:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000586:	f001 f8d9 	bl	800173c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2340      	movs	r3, #64	@ 0x40
 8000596:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f97f 	bl	80018a4 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005ac:	f000 f90a 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fc7d 	bl	8001ec8 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005d4:	f000 f8f6 	bl	80007c4 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	@ 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005e6:	4a25      	ldr	r2, [pc, #148]	@ (800067c <MX_USART1_UART_Init+0x9c>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005ea:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061c:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000624:	2210      	movs	r2, #16
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 800062a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800062e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000630:	4811      	ldr	r0, [pc, #68]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000632:	f002 f855 	bl	80026e0 <HAL_UART_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800063c:	f000 f8c2 	bl	80007c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000640:	2100      	movs	r1, #0
 8000642:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000644:	f003 fb4e 	bl	8003ce4 <HAL_UARTEx_SetTxFifoThreshold>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800064e:	f000 f8b9 	bl	80007c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000656:	f003 fb83 	bl	8003d60 <HAL_UARTEx_SetRxFifoThreshold>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8000660:	f000 f8b0 	bl	80007c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_USART1_UART_Init+0x98>)
 8000666:	f003 fb04 	bl	8003c72 <HAL_UARTEx_DisableFifoMode>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8000670:	f000 f8a8 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000028 	.word	0x20000028
 800067c:	40013800 	.word	0x40013800

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_DMA_Init+0x60>)
 8000688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800068a:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <MX_DMA_Init+0x60>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6493      	str	r3, [r2, #72]	@ 0x48
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_DMA_Init+0x60>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_DMA_Init+0x60>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006a2:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <MX_DMA_Init+0x60>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <MX_DMA_Init+0x60>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200b      	movs	r0, #11
 80006bc:	f000 fb3d 	bl	8000d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f000 fb54 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	200c      	movs	r0, #12
 80006cc:	f000 fb35 	bl	8000d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006d0:	200c      	movs	r0, #12
 80006d2:	f000 fb4c 	bl	8000d6e <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b2f      	ldr	r3, [pc, #188]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a2e      	ldr	r2, [pc, #184]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a28      	ldr	r2, [pc, #160]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b23      	ldr	r3, [pc, #140]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	@ 0x40
 8000746:	481d      	ldr	r0, [pc, #116]	@ (80007bc <MX_GPIO_Init+0xd8>)
 8000748:	f000 ffe0 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000756:	f000 ffd9 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 800075a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4814      	ldr	r0, [pc, #80]	@ (80007c0 <MX_GPIO_Init+0xdc>)
 8000770:	f000 fe4a 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_M1_Pin */
  GPIO_InitStruct.Pin = LORA_M1_Pin;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_M1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	480c      	ldr	r0, [pc, #48]	@ (80007bc <MX_GPIO_Init+0xd8>)
 800078c:	f000 fe3c 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_M0_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin;
 8000790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_M0_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f000 fe2c 	bl	8001408 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000800 	.word	0x48000800
 80007c0:	48000400 	.word	0x48000400

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <HAL_MspInit+0x44>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007da:	4a0e      	ldr	r2, [pc, #56]	@ (8000814 <HAL_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x44>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_MspInit+0x44>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000806:	f001 f83d 	bl	8001884 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09a      	sub	sp, #104	@ 0x68
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2244      	movs	r2, #68	@ 0x44
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fc6b 	bl	8004114 <memset>
  if(huart->Instance==USART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a4d      	ldr	r2, [pc, #308]	@ (8000978 <HAL_UART_MspInit+0x160>)
 8000844:	4293      	cmp	r3, r2
 8000846:	f040 8093 	bne.w	8000970 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800084a:	2301      	movs	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	4618      	mov	r0, r3
 8000858:	f001 fd52 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000862:	f7ff ffaf 	bl	80007c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000866:	4b45      	ldr	r3, [pc, #276]	@ (800097c <HAL_UART_MspInit+0x164>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086a:	4a44      	ldr	r2, [pc, #272]	@ (800097c <HAL_UART_MspInit+0x164>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000870:	6613      	str	r3, [r2, #96]	@ 0x60
 8000872:	4b42      	ldr	r3, [pc, #264]	@ (800097c <HAL_UART_MspInit+0x164>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b3f      	ldr	r3, [pc, #252]	@ (800097c <HAL_UART_MspInit+0x164>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a3e      	ldr	r2, [pc, #248]	@ (800097c <HAL_UART_MspInit+0x164>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b3c      	ldr	r3, [pc, #240]	@ (800097c <HAL_UART_MspInit+0x164>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000896:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800089a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008a8:	2307      	movs	r3, #7
 80008aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f000 fda7 	bl	8001408 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008bc:	4a31      	ldr	r2, [pc, #196]	@ (8000984 <HAL_UART_MspInit+0x16c>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008c2:	2218      	movs	r2, #24
 80008c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008de:	4b28      	ldr	r3, [pc, #160]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008e4:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008e6:	2220      	movs	r2, #32
 80008e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ea:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008f0:	4823      	ldr	r0, [pc, #140]	@ (8000980 <HAL_UART_MspInit+0x168>)
 80008f2:	f000 fa57 	bl	8000da4 <HAL_DMA_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80008fc:	f7ff ff62 	bl	80007c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a1f      	ldr	r2, [pc, #124]	@ (8000980 <HAL_UART_MspInit+0x168>)
 8000904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000908:	4a1d      	ldr	r2, [pc, #116]	@ (8000980 <HAL_UART_MspInit+0x168>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <HAL_UART_MspInit+0x174>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000916:	2219      	movs	r2, #25
 8000918:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <HAL_UART_MspInit+0x170>)
 800091c:	2210      	movs	r2, #16
 800091e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <HAL_UART_MspInit+0x170>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <HAL_UART_MspInit+0x170>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000944:	4810      	ldr	r0, [pc, #64]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000946:	f000 fa2d 	bl	8000da4 <HAL_DMA_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000950:	f7ff ff38 	bl	80007c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0c      	ldr	r2, [pc, #48]	@ (8000988 <HAL_UART_MspInit+0x170>)
 8000958:	67da      	str	r2, [r3, #124]	@ 0x7c
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <HAL_UART_MspInit+0x170>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2025      	movs	r0, #37	@ 0x25
 8000966:	f000 f9e8 	bl	8000d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800096a:	2025      	movs	r0, #37	@ 0x25
 800096c:	f000 f9ff 	bl	8000d6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000970:	bf00      	nop
 8000972:	3768      	adds	r7, #104	@ 0x68
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013800 	.word	0x40013800
 800097c:	40021000 	.word	0x40021000
 8000980:	200000bc 	.word	0x200000bc
 8000984:	40020008 	.word	0x40020008
 8000988:	2000011c 	.word	0x2000011c
 800098c:	4002001c 	.word	0x4002001c

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f8af 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <DMA1_Channel1_IRQHandler+0x10>)
 80009f6:	f000 fbb8 	bl	800116a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000bc 	.word	0x200000bc

08000a04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <DMA1_Channel2_IRQHandler+0x10>)
 8000a0a:	f000 fbae 	bl	800116a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000011c 	.word	0x2000011c

08000a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a1c:	4802      	ldr	r0, [pc, #8]	@ (8000a28 <USART1_IRQHandler+0x10>)
 8000a1e:	f001 feaf 	bl	8002780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000028 	.word	0x20000028

08000a2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a50:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff ffea 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	@ (8000a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	@ (8000a9c <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f003 fb51 	bl	8004124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a82:	f7ff fd5f 	bl	8000544 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   r0, =_estack
 8000a88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a94:	080041d4 	.word	0x080041d4
  ldr r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a9c:	20000184 	.word	0x20000184

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>

08000aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f939 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f80e 	bl	8000ad4 <HAL_InitTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	e001      	b.n	8000ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac4:	f7ff fe84 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]

}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <HAL_InitTick+0x68>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d022      	beq.n	8000b2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_InitTick+0x6c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <HAL_InitTick+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f944 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10f      	bne.n	8000b28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d809      	bhi.n	8000b22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	f04f 30ff 	mov.w	r0, #4294967295
 8000b16:	f000 f910 	bl	8000d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_InitTick+0x70>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e007      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e004      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e001      	b.n	8000b32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a03      	ldr	r2, [pc, #12]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	2000017c 	.word	0x2000017c
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2000017c 	.word	0x2000017c

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	@ (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	@ (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	@ (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	@ 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff29 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff40 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff90 	bl	8000c78 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5f 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff33 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa4 	bl	8000ce0 <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e08d      	b.n	8000ed2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <HAL_DMA_Init+0x138>)
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d80f      	bhi.n	8000de2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <HAL_DMA_Init+0x13c>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a45      	ldr	r2, [pc, #276]	@ (8000ee4 <HAL_DMA_Init+0x140>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	009a      	lsls	r2, r3, #2
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a42      	ldr	r2, [pc, #264]	@ (8000ee8 <HAL_DMA_Init+0x144>)
 8000dde:	641a      	str	r2, [r3, #64]	@ 0x40
 8000de0:	e00e      	b.n	8000e00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b40      	ldr	r3, [pc, #256]	@ (8000eec <HAL_DMA_Init+0x148>)
 8000dea:	4413      	add	r3, r2
 8000dec:	4a3d      	ldr	r2, [pc, #244]	@ (8000ee4 <HAL_DMA_Init+0x140>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	009a      	lsls	r2, r3, #2
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef0 <HAL_DMA_Init+0x14c>)
 8000dfe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2202      	movs	r2, #2
 8000e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fa76 	bl	8001344 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e60:	d102      	bne.n	8000e68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d010      	beq.n	8000ea8 <HAL_DMA_Init+0x104>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d80c      	bhi.n	8000ea8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 fa96 	bl	80013c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	e008      	b.n	8000eba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40020407 	.word	0x40020407
 8000ee0:	bffdfff8 	.word	0xbffdfff8
 8000ee4:	cccccccd 	.word	0xcccccccd
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	bffdfbf8 	.word	0xbffdfbf8
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_DMA_Start_IT+0x20>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e066      	b.n	8000fe2 <HAL_DMA_Start_IT+0xee>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d155      	bne.n	8000fd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f9bb 	bl	80012c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f042 020e 	orr.w	r2, r2, #14
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e00f      	b.n	8000f8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0204 	bic.w	r2, r2, #4
 8000f7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 020a 	orr.w	r2, r2, #10
 8000f8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fa8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e005      	b.n	8000fe0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d005      	beq.n	800100e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2204      	movs	r2, #4
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e037      	b.n	800107e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 020e 	bic.w	r2, r2, #14
 800101c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800102c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f003 021f 	and.w	r2, r3, #31
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800105a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001072:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800107c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d00d      	beq.n	80010d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e047      	b.n	8001160 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 020e 	bic.w	r2, r2, #14
 80010de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800111c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001134:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800113e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	4798      	blx	r3
    }
  }
  return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	2204      	movs	r2, #4
 800118c:	409a      	lsls	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d026      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x7a>
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d021      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0204 	bic.w	r2, r2, #4
 80011bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f003 021f 	and.w	r2, r3, #31
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	2104      	movs	r1, #4
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d071      	beq.n	80012be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011e2:	e06c      	b.n	80012be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e8:	f003 031f 	and.w	r3, r3, #31
 80011ec:	2202      	movs	r2, #2
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d02e      	beq.n	8001256 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d029      	beq.n	8001256 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10b      	bne.n	8001228 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 020a 	bic.w	r2, r2, #10
 800121e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	2102      	movs	r1, #2
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d038      	beq.n	80012be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001254:	e033      	b.n	80012be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	2208      	movs	r2, #8
 8001260:	409a      	lsls	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d02a      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d025      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 020e 	bic.w	r2, r2, #14
 8001282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	2101      	movs	r1, #1
 8001292:	fa01 f202 	lsl.w	r2, r1, r2
 8001296:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
}
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80012f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f003 021f 	and.w	r2, r3, #31
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d108      	bne.n	8001328 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001326:	e007      	b.n	8001338 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001354:	429a      	cmp	r2, r3
 8001356:	d802      	bhi.n	800135e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e001      	b.n	8001362 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001360:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	3b08      	subs	r3, #8
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	009a      	lsls	r2, r3, #2
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4413      	add	r3, r2
 8001384:	461a      	mov	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800138e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2201      	movs	r2, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800139e:	bf00      	nop
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40020407 	.word	0x40020407
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020820 	.word	0x40020820
 80013b8:	cccccccd 	.word	0xcccccccd
 80013bc:	40020880 	.word	0x40020880

080013c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80013e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2201      	movs	r2, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	1000823f 	.word	0x1000823f
 8001404:	40020940 	.word	0x40020940

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001416:	e15a      	b.n	80016ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 814c 	beq.w	80016c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d005      	beq.n	8001448 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001444:	2b02      	cmp	r3, #2
 8001446:	d130      	bne.n	80014aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147e:	2201      	movs	r2, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 0201 	and.w	r2, r3, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d017      	beq.n	80014e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d123      	bne.n	800153a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	6939      	ldr	r1, [r7, #16]
 8001536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0203 	and.w	r2, r3, #3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80a6 	beq.w	80016c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157c:	4b5b      	ldr	r3, [pc, #364]	@ (80016ec <HAL_GPIO_Init+0x2e4>)
 800157e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001580:	4a5a      	ldr	r2, [pc, #360]	@ (80016ec <HAL_GPIO_Init+0x2e4>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6613      	str	r3, [r2, #96]	@ 0x60
 8001588:	4b58      	ldr	r3, [pc, #352]	@ (80016ec <HAL_GPIO_Init+0x2e4>)
 800158a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001594:	4a56      	ldr	r2, [pc, #344]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015be:	d01f      	beq.n	8001600 <HAL_GPIO_Init+0x1f8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a4c      	ldr	r2, [pc, #304]	@ (80016f4 <HAL_GPIO_Init+0x2ec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d019      	beq.n	80015fc <HAL_GPIO_Init+0x1f4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a4b      	ldr	r2, [pc, #300]	@ (80016f8 <HAL_GPIO_Init+0x2f0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d013      	beq.n	80015f8 <HAL_GPIO_Init+0x1f0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a4a      	ldr	r2, [pc, #296]	@ (80016fc <HAL_GPIO_Init+0x2f4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d00d      	beq.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a49      	ldr	r2, [pc, #292]	@ (8001700 <HAL_GPIO_Init+0x2f8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d007      	beq.n	80015f0 <HAL_GPIO_Init+0x1e8>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a48      	ldr	r2, [pc, #288]	@ (8001704 <HAL_GPIO_Init+0x2fc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d101      	bne.n	80015ec <HAL_GPIO_Init+0x1e4>
 80015e8:	2305      	movs	r3, #5
 80015ea:	e00a      	b.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015ec:	2306      	movs	r3, #6
 80015ee:	e008      	b.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015f4:	2303      	movs	r3, #3
 80015f6:	e004      	b.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_GPIO_Init+0x1fa>
 8001600:	2300      	movs	r3, #0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001612:	4937      	ldr	r1, [pc, #220]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001620:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <HAL_GPIO_Init+0x300>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001644:	4a30      	ldr	r2, [pc, #192]	@ (8001708 <HAL_GPIO_Init+0x300>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800164a:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <HAL_GPIO_Init+0x300>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800166e:	4a26      	ldr	r2, [pc, #152]	@ (8001708 <HAL_GPIO_Init+0x300>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001674:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_GPIO_Init+0x300>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001698:	4a1b      	ldr	r2, [pc, #108]	@ (8001708 <HAL_GPIO_Init+0x300>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <HAL_GPIO_Init+0x300>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c2:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <HAL_GPIO_Init+0x300>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f47f ae9d 	bne.w	8001418 <HAL_GPIO_Init+0x10>
  }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	48001000 	.word	0x48001000
 8001704:	48001400 	.word	0x48001400
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001728:	e002      	b.n	8001730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d141      	bne.n	80017ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800174a:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001756:	d131      	bne.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001758:	4b47      	ldr	r3, [pc, #284]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800175e:	4a46      	ldr	r2, [pc, #280]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001768:	4b43      	ldr	r3, [pc, #268]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001770:	4a41      	ldr	r2, [pc, #260]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001778:	4b40      	ldr	r3, [pc, #256]	@ (800187c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2232      	movs	r2, #50	@ 0x32
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4a3f      	ldr	r2, [pc, #252]	@ (8001880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9b      	lsrs	r3, r3, #18
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800178e:	e002      	b.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3b01      	subs	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001796:	4b38      	ldr	r3, [pc, #224]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017a2:	d102      	bne.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f2      	bne.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017aa:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b6:	d158      	bne.n	800186a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e057      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017cc:	e04d      	b.n	800186a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d4:	d141      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d6:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e2:	d131      	bne.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017e4:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ea:	4a23      	ldr	r2, [pc, #140]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2232      	movs	r2, #50	@ 0x32
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	4a1c      	ldr	r2, [pc, #112]	@ (8001880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	0c9b      	lsrs	r3, r3, #18
 8001816:	3301      	adds	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800181a:	e002      	b.n	8001822 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3b01      	subs	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800182e:	d102      	bne.n	8001836 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f2      	bne.n	800181c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001842:	d112      	bne.n	800186a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e011      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001858:	e007      	b.n	800186a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001864:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001868:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40007000 	.word	0x40007000
 800187c:	20000000 	.word	0x20000000
 8001880:	431bde83 	.word	0x431bde83

08001884 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800188e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001892:	6093      	str	r3, [r2, #8]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e2fe      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d075      	beq.n	80019ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c2:	4b97      	ldr	r3, [pc, #604]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018cc:	4b94      	ldr	r3, [pc, #592]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3e>
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d002      	beq.n	80018e8 <HAL_RCC_OscConfig+0x44>
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d10b      	bne.n	8001900 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d05b      	beq.n	80019ac <HAL_RCC_OscConfig+0x108>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d157      	bne.n	80019ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e2d9      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001908:	d106      	bne.n	8001918 <HAL_RCC_OscConfig+0x74>
 800190a:	4b85      	ldr	r3, [pc, #532]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a84      	ldr	r2, [pc, #528]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xb0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x98>
 8001922:	4b7f      	ldr	r3, [pc, #508]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7e      	ldr	r2, [pc, #504]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7b      	ldr	r2, [pc, #492]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xb0>
 800193c:	4b78      	ldr	r3, [pc, #480]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a77      	ldr	r2, [pc, #476]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a74      	ldr	r2, [pc, #464]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f906 	bl	8000b6c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff f902 	bl	8000b6c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e29e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001976:	4b6a      	ldr	r3, [pc, #424]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xc0>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f8f2 	bl	8000b6c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f8ee 	bl	8000b6c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e28a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199e:	4b60      	ldr	r3, [pc, #384]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0xe8>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d075      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ba:	4b59      	ldr	r3, [pc, #356]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c4:	4b56      	ldr	r3, [pc, #344]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d102      	bne.n	80019da <HAL_RCC_OscConfig+0x136>
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_OscConfig+0x13c>
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d11f      	bne.n	8001a20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_OscConfig+0x154>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e25d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b49      	ldr	r3, [pc, #292]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	4946      	ldr	r1, [pc, #280]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a0c:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f85f 	bl	8000ad4 <HAL_InitTick>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d043      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e249      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f89a 	bl	8000b6c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f896 	bl	8000b6c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e232      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	492d      	ldr	r1, [pc, #180]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
 8001a6e:	e01a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a70:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f876 	bl	8000b6c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff f872 	bl	8000b6c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e20e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a96:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1e0>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d041      	beq.n	8001b36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac0:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f84f 	bl	8000b6c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f84b 	bl	8000b6c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1e7      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ef      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x22e>
 8001af2:	e020      	b.n	8001b36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001afa:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff f832 	bl	8000b6c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0a:	e00d      	b.n	8001b28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f82e 	bl	8000b6c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d906      	bls.n	8001b28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1ca      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b28:	4b8c      	ldr	r3, [pc, #560]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ea      	bne.n	8001b0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a6 	beq.w	8001c90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b48:	4b84      	ldr	r3, [pc, #528]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x2b4>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x2b6>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00d      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	4a7e      	ldr	r2, [pc, #504]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7a:	4b79      	ldr	r3, [pc, #484]	@ (8001d60 <HAL_RCC_OscConfig+0x4bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b86:	4b76      	ldr	r3, [pc, #472]	@ (8001d60 <HAL_RCC_OscConfig+0x4bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	@ (8001d60 <HAL_RCC_OscConfig+0x4bc>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7fe ffeb 	bl	8000b6c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7fe ffe7 	bl	8000b6c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e183      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	4b6c      	ldr	r3, [pc, #432]	@ (8001d60 <HAL_RCC_OscConfig+0x4bc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x32e>
 8001bc0:	4b66      	ldr	r3, [pc, #408]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc6:	4a65      	ldr	r2, [pc, #404]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bd0:	e024      	b.n	8001c1c <HAL_RCC_OscConfig+0x378>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d110      	bne.n	8001bfc <HAL_RCC_OscConfig+0x358>
 8001bda:	4b60      	ldr	r3, [pc, #384]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be0:	4a5e      	ldr	r2, [pc, #376]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bea:	4b5c      	ldr	r3, [pc, #368]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x378>
 8001bfc:	4b57      	ldr	r3, [pc, #348]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c02:	4a56      	ldr	r2, [pc, #344]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c0c:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c12:	4a52      	ldr	r2, [pc, #328]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001c14:	f023 0304 	bic.w	r3, r3, #4
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7fe ffa2 	bl	8000b6c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7fe ff9e 	bl	8000b6c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e138      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c42:	4b46      	ldr	r3, [pc, #280]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ed      	beq.n	8001c2c <HAL_RCC_OscConfig+0x388>
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7fe ff8b 	bl	8000b6c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe ff87 	bl	8000b6c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e121      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c70:	4b3a      	ldr	r3, [pc, #232]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ed      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	4a34      	ldr	r2, [pc, #208]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01c      	beq.n	8001cde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001caa:	4a2c      	ldr	r2, [pc, #176]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7fe ff5a 	bl	8000b6c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cbc:	f7fe ff56 	bl	8000b6c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0f2      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ef      	beq.n	8001cbc <HAL_RCC_OscConfig+0x418>
 8001cdc:	e01b      	b.n	8001d16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cde:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7fe ff3d 	bl	8000b6c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf6:	f7fe ff39 	bl	8000b6c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0d5      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d08:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ef      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80c9 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d20:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	f000 8083 	beq.w	8001e34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d15e      	bne.n	8001df4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7fe ff13 	bl	8000b6c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d48:	e00c      	b.n	8001d64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe ff0f 	bl	8000b6c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d905      	bls.n	8001d64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0ab      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d64:	4b55      	ldr	r3, [pc, #340]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ec      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d70:	4b52      	ldr	r3, [pc, #328]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4b52      	ldr	r3, [pc, #328]	@ (8001ec0 <HAL_RCC_OscConfig+0x61c>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6a11      	ldr	r1, [r2, #32]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d80:	3a01      	subs	r2, #1
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d8a:	0212      	lsls	r2, r2, #8
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d92:	0852      	lsrs	r2, r2, #1
 8001d94:	3a01      	subs	r2, #1
 8001d96:	0552      	lsls	r2, r2, #21
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d9e:	0852      	lsrs	r2, r2, #1
 8001da0:	3a01      	subs	r2, #1
 8001da2:	0652      	lsls	r2, r2, #25
 8001da4:	4311      	orrs	r1, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001daa:	06d2      	lsls	r2, r2, #27
 8001dac:	430a      	orrs	r2, r1
 8001dae:	4943      	ldr	r1, [pc, #268]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db4:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a40      	ldr	r2, [pc, #256]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fece 	bl	8000b6c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe feca 	bl	8000b6c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e066      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x530>
 8001df2:	e05e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b31      	ldr	r3, [pc, #196]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a30      	ldr	r2, [pc, #192]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe feb4 	bl	8000b6c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe feb0 	bl	8000b6c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e04c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1a:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e26:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4924      	ldr	r1, [pc, #144]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60cb      	str	r3, [r1, #12]
 8001e32:	e03e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e039      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <HAL_RCC_OscConfig+0x618>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d12c      	bne.n	8001eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d123      	bne.n	8001eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d11b      	bne.n	8001eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d113      	bne.n	8001eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	019f800c 	.word	0x019f800c
 8001ec4:	feeefffc 	.word	0xfeeefffc

08001ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e11e      	b.n	800211e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b91      	ldr	r3, [pc, #580]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d910      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b8e      	ldr	r3, [pc, #568]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 020f 	bic.w	r2, r3, #15
 8001ef6:	498c      	ldr	r1, [pc, #560]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b8a      	ldr	r3, [pc, #552]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e106      	b.n	800211e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d073      	beq.n	8002004 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d129      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f24:	4b81      	ldr	r3, [pc, #516]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0f4      	b.n	800211e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f34:	f000 f99e 	bl	8002274 <RCC_GetSysClockFreqFromPLLSource>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4a7c      	ldr	r2, [pc, #496]	@ (8002130 <HAL_RCC_ClockConfig+0x268>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d93f      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f42:	4b7a      	ldr	r3, [pc, #488]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d033      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d12f      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f62:	4b72      	ldr	r3, [pc, #456]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f6a:	4a70      	ldr	r2, [pc, #448]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e024      	b.n	8001fc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f80:	4b6a      	ldr	r3, [pc, #424]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0c6      	b.n	800211e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f90:	4b66      	ldr	r3, [pc, #408]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0be      	b.n	800211e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fa0:	f000 f8ce 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4a61      	ldr	r2, [pc, #388]	@ (8002130 <HAL_RCC_ClockConfig+0x268>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d909      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fae:	4b5f      	ldr	r3, [pc, #380]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b5a      	ldr	r3, [pc, #360]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4957      	ldr	r1, [pc, #348]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fdca 	bl	8000b6c <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe fdc6 	bl	8000b6c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e095      	b.n	800211e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d023      	beq.n	8002058 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b43      	ldr	r3, [pc, #268]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a42      	ldr	r2, [pc, #264]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8002022:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002026:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002034:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800203c:	4a3b      	ldr	r2, [pc, #236]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 800203e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002042:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4936      	ldr	r1, [pc, #216]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
 8002056:	e008      	b.n	800206a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b80      	cmp	r3, #128	@ 0x80
 800205c:	d105      	bne.n	800206a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800205e:	4b33      	ldr	r3, [pc, #204]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4a32      	ldr	r2, [pc, #200]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 8002064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002068:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800206a:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d21d      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 020f 	bic.w	r2, r3, #15
 8002080:	4929      	ldr	r1, [pc, #164]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002088:	f7fe fd70 	bl	8000b6c <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe fd6c 	bl	8000b6c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e03b      	b.n	800211e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1ed      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4917      	ldr	r1, [pc, #92]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020de:	4b13      	ldr	r3, [pc, #76]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490f      	ldr	r1, [pc, #60]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f2:	f000 f825 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490c      	ldr	r1, [pc, #48]	@ (8002134 <HAL_RCC_ClockConfig+0x26c>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <HAL_RCC_ClockConfig+0x270>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_RCC_ClockConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fcdc 	bl	8000ad4 <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	04c4b400 	.word	0x04c4b400
 8002134:	08004184 	.word	0x08004184
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002146:	4b2c      	ldr	r3, [pc, #176]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d102      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002152:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	e047      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002158:	4b27      	ldr	r3, [pc, #156]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d102      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002164:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e03e      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800216a:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d136      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002194:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800219e:	68d2      	ldr	r2, [r2, #12]
 80021a0:	0a12      	lsrs	r2, r2, #8
 80021a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	e00c      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ae:	4a13      	ldr	r2, [pc, #76]	@ (80021fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4a10      	ldr	r2, [pc, #64]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b8:	68d2      	ldr	r2, [r2, #12]
 80021ba:	0a12      	lsrs	r2, r2, #8
 80021bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021c0:	fb02 f303 	mul.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
      break;
 80021c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0e5b      	lsrs	r3, r3, #25
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	3301      	adds	r3, #1
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e001      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021e8:	693b      	ldr	r3, [r7, #16]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	00f42400 	.word	0x00f42400
 8002200:	007a1200 	.word	0x007a1200

08002204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_RCC_GetHCLKFreq+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002220:	f7ff fff0 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4904      	ldr	r1, [pc, #16]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08004194 	.word	0x08004194

08002248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800224c:	f7ff ffda 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0adb      	lsrs	r3, r3, #11
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4904      	ldr	r1, [pc, #16]	@ (8002270 <HAL_RCC_GetPCLK2Freq+0x28>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	08004194 	.word	0x08004194

08002274 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d10c      	bne.n	80022b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022a2:	68d2      	ldr	r2, [r2, #12]
 80022a4:	0a12      	lsrs	r2, r2, #8
 80022a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
    break;
 80022b0:	e00c      	b.n	80022cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022b2:	4a12      	ldr	r2, [pc, #72]	@ (80022fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4a0e      	ldr	r2, [pc, #56]	@ (80022f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	0a12      	lsrs	r2, r2, #8
 80022c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
    break;
 80022ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0e5b      	lsrs	r3, r3, #25
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	3301      	adds	r3, #1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000
 80022f8:	007a1200 	.word	0x007a1200
 80022fc:	00f42400 	.word	0x00f42400

08002300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002308:	2300      	movs	r3, #0
 800230a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800230c:	2300      	movs	r3, #0
 800230e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8098 	beq.w	800244e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b43      	ldr	r3, [pc, #268]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b40      	ldr	r3, [pc, #256]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	4a3f      	ldr	r2, [pc, #252]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
 800233a:	4b3d      	ldr	r3, [pc, #244]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234a:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a39      	ldr	r2, [pc, #228]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002356:	f7fe fc09 	bl	8000b6c <HAL_GetTick>
 800235a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800235c:	e009      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7fe fc05 	bl	8000b6c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d902      	bls.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	74fb      	strb	r3, [r7, #19]
        break;
 8002370:	e005      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002372:	4b30      	ldr	r3, [pc, #192]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ef      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d159      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002384:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800238e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01e      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	d019      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023a0:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023ac:	4b20      	ldr	r3, [pc, #128]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023cc:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7fe fbc5 	bl	8000b6c <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e4:	e00b      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe fbc1 	bl	8000b6c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d902      	bls.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	74fb      	strb	r3, [r7, #19]
            break;
 80023fc:	e006      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ec      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	4903      	ldr	r1, [pc, #12]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002428:	e008      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	74bb      	strb	r3, [r7, #18]
 800242e:	e005      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243c:	7c7b      	ldrb	r3, [r7, #17]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d105      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4ba6      	ldr	r3, [pc, #664]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	4aa5      	ldr	r2, [pc, #660]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800245a:	4ba0      	ldr	r3, [pc, #640]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002460:	f023 0203 	bic.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	499c      	ldr	r1, [pc, #624]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800247c:	4b97      	ldr	r3, [pc, #604]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f023 020c 	bic.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4994      	ldr	r1, [pc, #592]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800249e:	4b8f      	ldr	r3, [pc, #572]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	498b      	ldr	r1, [pc, #556]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c0:	4b86      	ldr	r3, [pc, #536]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	4983      	ldr	r1, [pc, #524]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e2:	4b7e      	ldr	r3, [pc, #504]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	497a      	ldr	r1, [pc, #488]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002504:	4b75      	ldr	r3, [pc, #468]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	4972      	ldr	r1, [pc, #456]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002526:	4b6d      	ldr	r3, [pc, #436]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4969      	ldr	r1, [pc, #420]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002548:	4b64      	ldr	r3, [pc, #400]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4961      	ldr	r1, [pc, #388]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800256a:	4b5c      	ldr	r3, [pc, #368]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002570:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	4958      	ldr	r1, [pc, #352]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800258c:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	4950      	ldr	r1, [pc, #320]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025aa:	d105      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ac:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a4a      	ldr	r2, [pc, #296]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025c4:	4b45      	ldr	r3, [pc, #276]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d2:	4942      	ldr	r1, [pc, #264]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e4:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a3c      	ldr	r2, [pc, #240]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025fc:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002602:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4934      	ldr	r1, [pc, #208]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800261a:	d105      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b2f      	ldr	r3, [pc, #188]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a2e      	ldr	r2, [pc, #184]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d015      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002634:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002642:	4926      	ldr	r1, [pc, #152]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002652:	d105      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a20      	ldr	r2, [pc, #128]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800265e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267a:	4918      	ldr	r1, [pc, #96]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800268a:	d105      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026a4:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	490a      	ldr	r1, [pc, #40]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026c2:	d105      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80026d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e042      	b.n	8002778 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7fe f887 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2224      	movs	r2, #36	@ 0x24
 800270e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fe4a 	bl	80033c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fb7b 	bl	8002e2c <UART_SetConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e01b      	b.n	8002778 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800274e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800275e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fec9 	bl	8003508 <UART_CheckIdleState>
 8002776:	4603      	mov	r3, r0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0ba      	sub	sp, #232	@ 0xe8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80027aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80027ae:	4013      	ands	r3, r2
 80027b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80027b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11b      	bne.n	80027f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d015      	beq.n	80027f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8300 	beq.w	8002dea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
      }
      return;
 80027f2:	e2fa      	b.n	8002dea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8123 	beq.w	8002a44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002802:	4b8d      	ldr	r3, [pc, #564]	@ (8002a38 <HAL_UART_IRQHandler+0x2b8>)
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800280a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800280e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a3c <HAL_UART_IRQHandler+0x2bc>)
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8116 	beq.w	8002a44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d011      	beq.n	8002848 <HAL_UART_IRQHandler+0xc8>
 8002824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2201      	movs	r2, #1
 8002836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d011      	beq.n	8002878 <HAL_UART_IRQHandler+0xf8>
 8002854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2202      	movs	r2, #2
 8002866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d011      	beq.n	80028a8 <HAL_UART_IRQHandler+0x128>
 8002884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2204      	movs	r2, #4
 8002896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d017      	beq.n	80028e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80028c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80028c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002a38 <HAL_UART_IRQHandler+0x2b8>)
 80028c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028da:	f043 0208 	orr.w	r2, r3, #8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d012      	beq.n	8002916 <HAL_UART_IRQHandler+0x196>
 80028f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00c      	beq.n	8002916 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8266 	beq.w	8002dee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d013      	beq.n	8002956 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800292e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800293a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296a:	2b40      	cmp	r3, #64	@ 0x40
 800296c:	d005      	beq.n	800297a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800296e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d054      	beq.n	8002a24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 ffc3 	bl	8003906 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298a:	2b40      	cmp	r3, #64	@ 0x40
 800298c:	d146      	bne.n	8002a1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3308      	adds	r3, #8
 8002994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3308      	adds	r3, #8
 80029b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029ca:	e841 2300 	strex	r3, r2, [r1]
 80029ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1d9      	bne.n	800298e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d017      	beq.n	8002a14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ea:	4a15      	ldr	r2, [pc, #84]	@ (8002a40 <HAL_UART_IRQHandler+0x2c0>)
 80029ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fb51 	bl	800109c <HAL_DMA_Abort_IT>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d019      	beq.n	8002a34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a12:	e00f      	b.n	8002a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f001 fb47 	bl	80040a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1a:	e00b      	b.n	8002a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f001 fb43 	bl	80040a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a22:	e007      	b.n	8002a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 fb3f 	bl	80040a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002a32:	e1dc      	b.n	8002dee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a34:	bf00      	nop
    return;
 8002a36:	e1da      	b.n	8002dee <HAL_UART_IRQHandler+0x66e>
 8002a38:	10000001 	.word	0x10000001
 8002a3c:	04000120 	.word	0x04000120
 8002a40:	08003bbd 	.word	0x08003bbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	f040 8170 	bne.w	8002d2e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8169 	beq.w	8002d2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8162 	beq.w	8002d2e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2210      	movs	r2, #16
 8002a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b40      	cmp	r3, #64	@ 0x40
 8002a7e:	f040 80d8 	bne.w	8002c32 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80af 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f080 80a7 	bcs.w	8002bf8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ab0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8087 	bne.w	8002bd6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002af2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002af6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1da      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3308      	adds	r3, #8
 8002b18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3308      	adds	r3, #8
 8002b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e1      	bne.n	8002b12 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3308      	adds	r3, #8
 8002b54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e3      	bne.n	8002b4e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba4:	f023 0310 	bic.w	r3, r3, #16
 8002ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e4      	bne.n	8002b94 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe fa0a 	bl	8000fea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f001 fa0f 	bl	8004014 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002bf6:	e0fc      	b.n	8002df2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c02:	429a      	cmp	r2, r3
 8002c04:	f040 80f5 	bne.w	8002df2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	f040 80eb 	bne.w	8002df2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f001 f9f2 	bl	8004014 <HAL_UARTEx_RxEventCallback>
      return;
 8002c30:	e0df      	b.n	8002df2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80d1 	beq.w	8002df6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80cc 	beq.w	8002df6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	e853 3f00 	ldrex	r3, [r3]
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c88:	e841 2300 	strex	r3, r2, [r1]
 8002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e4      	bne.n	8002c5e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e1      	bne.n	8002c94 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f023 0310 	bic.w	r3, r3, #16
 8002cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	617b      	str	r3, [r7, #20]
   return(result);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e4      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 f974 	bl	8004014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d2c:	e063      	b.n	8002df6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00e      	beq.n	8002d58 <HAL_UART_IRQHandler+0x5d8>
 8002d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 ff70 	bl	8003c36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d56:	e051      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d014      	beq.n	8002d8e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d03a      	beq.n	8002dfa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
    }
    return;
 8002d8c:	e035      	b.n	8002dfa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_UART_IRQHandler+0x62e>
 8002d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 ff1a 	bl	8003be0 <UART_EndTransmit_IT>
    return;
 8002dac:	e026      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_UART_IRQHandler+0x64e>
 8002dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 ff49 	bl	8003c5e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dcc:	e016      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_UART_IRQHandler+0x67c>
 8002dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	da0c      	bge.n	8002dfc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 ff31 	bl	8003c4a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002de8:	e008      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
      return;
 8002dea:	bf00      	nop
 8002dec:	e006      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
    return;
 8002dee:	bf00      	nop
 8002df0:	e004      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
      return;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
      return;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <HAL_UART_IRQHandler+0x67c>
    return;
 8002dfa:	bf00      	nop
  }
}
 8002dfc:	37e8      	adds	r7, #232	@ 0xe8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop

08002e04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b08c      	sub	sp, #48	@ 0x30
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4bab      	ldr	r3, [pc, #684]	@ (8003108 <UART_SetConfig+0x2dc>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4aa0      	ldr	r2, [pc, #640]	@ (800310c <UART_SetConfig+0x2e0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d004      	beq.n	8002e98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e94:	4313      	orrs	r3, r2
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002ea2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	f023 010f 	bic.w	r1, r3, #15
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a91      	ldr	r2, [pc, #580]	@ (8003110 <UART_SetConfig+0x2e4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d125      	bne.n	8002f1c <UART_SetConfig+0xf0>
 8002ed0:	4b90      	ldr	r3, [pc, #576]	@ (8003114 <UART_SetConfig+0x2e8>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d81a      	bhi.n	8002f14 <UART_SetConfig+0xe8>
 8002ede:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <UART_SetConfig+0xb8>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f05 	.word	0x08002f05
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f0d 	.word	0x08002f0d
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efa:	e0d6      	b.n	80030aa <UART_SetConfig+0x27e>
 8002efc:	2302      	movs	r3, #2
 8002efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f02:	e0d2      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f04:	2304      	movs	r3, #4
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0a:	e0ce      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f12:	e0ca      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f14:	2310      	movs	r3, #16
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1a:	e0c6      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7d      	ldr	r2, [pc, #500]	@ (8003118 <UART_SetConfig+0x2ec>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d138      	bne.n	8002f98 <UART_SetConfig+0x16c>
 8002f26:	4b7b      	ldr	r3, [pc, #492]	@ (8003114 <UART_SetConfig+0x2e8>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	d82d      	bhi.n	8002f90 <UART_SetConfig+0x164>
 8002f34:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <UART_SetConfig+0x110>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08002f91 	.word	0x08002f91
 8002f44:	08002f91 	.word	0x08002f91
 8002f48:	08002f91 	.word	0x08002f91
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08002f91 	.word	0x08002f91
 8002f54:	08002f91 	.word	0x08002f91
 8002f58:	08002f91 	.word	0x08002f91
 8002f5c:	08002f79 	.word	0x08002f79
 8002f60:	08002f91 	.word	0x08002f91
 8002f64:	08002f91 	.word	0x08002f91
 8002f68:	08002f91 	.word	0x08002f91
 8002f6c:	08002f89 	.word	0x08002f89
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f76:	e098      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7e:	e094      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f80:	2304      	movs	r3, #4
 8002f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f86:	e090      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f88:	2308      	movs	r3, #8
 8002f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8e:	e08c      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f90:	2310      	movs	r3, #16
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f96:	e088      	b.n	80030aa <UART_SetConfig+0x27e>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5f      	ldr	r2, [pc, #380]	@ (800311c <UART_SetConfig+0x2f0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d125      	bne.n	8002fee <UART_SetConfig+0x1c2>
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <UART_SetConfig+0x2e8>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fac:	2b30      	cmp	r3, #48	@ 0x30
 8002fae:	d016      	beq.n	8002fde <UART_SetConfig+0x1b2>
 8002fb0:	2b30      	cmp	r3, #48	@ 0x30
 8002fb2:	d818      	bhi.n	8002fe6 <UART_SetConfig+0x1ba>
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d00a      	beq.n	8002fce <UART_SetConfig+0x1a2>
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d814      	bhi.n	8002fe6 <UART_SetConfig+0x1ba>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <UART_SetConfig+0x19a>
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d008      	beq.n	8002fd6 <UART_SetConfig+0x1aa>
 8002fc4:	e00f      	b.n	8002fe6 <UART_SetConfig+0x1ba>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fcc:	e06d      	b.n	80030aa <UART_SetConfig+0x27e>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fd4:	e069      	b.n	80030aa <UART_SetConfig+0x27e>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fdc:	e065      	b.n	80030aa <UART_SetConfig+0x27e>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe4:	e061      	b.n	80030aa <UART_SetConfig+0x27e>
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fec:	e05d      	b.n	80030aa <UART_SetConfig+0x27e>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4b      	ldr	r2, [pc, #300]	@ (8003120 <UART_SetConfig+0x2f4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d125      	bne.n	8003044 <UART_SetConfig+0x218>
 8002ff8:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <UART_SetConfig+0x2e8>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003002:	2bc0      	cmp	r3, #192	@ 0xc0
 8003004:	d016      	beq.n	8003034 <UART_SetConfig+0x208>
 8003006:	2bc0      	cmp	r3, #192	@ 0xc0
 8003008:	d818      	bhi.n	800303c <UART_SetConfig+0x210>
 800300a:	2b80      	cmp	r3, #128	@ 0x80
 800300c:	d00a      	beq.n	8003024 <UART_SetConfig+0x1f8>
 800300e:	2b80      	cmp	r3, #128	@ 0x80
 8003010:	d814      	bhi.n	800303c <UART_SetConfig+0x210>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <UART_SetConfig+0x1f0>
 8003016:	2b40      	cmp	r3, #64	@ 0x40
 8003018:	d008      	beq.n	800302c <UART_SetConfig+0x200>
 800301a:	e00f      	b.n	800303c <UART_SetConfig+0x210>
 800301c:	2300      	movs	r3, #0
 800301e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003022:	e042      	b.n	80030aa <UART_SetConfig+0x27e>
 8003024:	2302      	movs	r3, #2
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302a:	e03e      	b.n	80030aa <UART_SetConfig+0x27e>
 800302c:	2304      	movs	r3, #4
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003032:	e03a      	b.n	80030aa <UART_SetConfig+0x27e>
 8003034:	2308      	movs	r3, #8
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303a:	e036      	b.n	80030aa <UART_SetConfig+0x27e>
 800303c:	2310      	movs	r3, #16
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003042:	e032      	b.n	80030aa <UART_SetConfig+0x27e>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a30      	ldr	r2, [pc, #192]	@ (800310c <UART_SetConfig+0x2e0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d12a      	bne.n	80030a4 <UART_SetConfig+0x278>
 800304e:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <UART_SetConfig+0x2e8>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800305c:	d01a      	beq.n	8003094 <UART_SetConfig+0x268>
 800305e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003062:	d81b      	bhi.n	800309c <UART_SetConfig+0x270>
 8003064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003068:	d00c      	beq.n	8003084 <UART_SetConfig+0x258>
 800306a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800306e:	d815      	bhi.n	800309c <UART_SetConfig+0x270>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <UART_SetConfig+0x250>
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003078:	d008      	beq.n	800308c <UART_SetConfig+0x260>
 800307a:	e00f      	b.n	800309c <UART_SetConfig+0x270>
 800307c:	2300      	movs	r3, #0
 800307e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003082:	e012      	b.n	80030aa <UART_SetConfig+0x27e>
 8003084:	2302      	movs	r3, #2
 8003086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800308a:	e00e      	b.n	80030aa <UART_SetConfig+0x27e>
 800308c:	2304      	movs	r3, #4
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003092:	e00a      	b.n	80030aa <UART_SetConfig+0x27e>
 8003094:	2308      	movs	r3, #8
 8003096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800309a:	e006      	b.n	80030aa <UART_SetConfig+0x27e>
 800309c:	2310      	movs	r3, #16
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a2:	e002      	b.n	80030aa <UART_SetConfig+0x27e>
 80030a4:	2310      	movs	r3, #16
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a17      	ldr	r2, [pc, #92]	@ (800310c <UART_SetConfig+0x2e0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	f040 80a8 	bne.w	8003206 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d834      	bhi.n	8003128 <UART_SetConfig+0x2fc>
 80030be:	a201      	add	r2, pc, #4	@ (adr r2, 80030c4 <UART_SetConfig+0x298>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	08003129 	.word	0x08003129
 80030cc:	080030f1 	.word	0x080030f1
 80030d0:	08003129 	.word	0x08003129
 80030d4:	080030f7 	.word	0x080030f7
 80030d8:	08003129 	.word	0x08003129
 80030dc:	08003129 	.word	0x08003129
 80030e0:	08003129 	.word	0x08003129
 80030e4:	080030ff 	.word	0x080030ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7ff f898 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 80030ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030ee:	e021      	b.n	8003134 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003124 <UART_SetConfig+0x2f8>)
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030f4:	e01e      	b.n	8003134 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f6:	f7ff f823 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80030fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030fc:	e01a      	b.n	8003134 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003104:	e016      	b.n	8003134 <UART_SetConfig+0x308>
 8003106:	bf00      	nop
 8003108:	cfff69f3 	.word	0xcfff69f3
 800310c:	40008000 	.word	0x40008000
 8003110:	40013800 	.word	0x40013800
 8003114:	40021000 	.word	0x40021000
 8003118:	40004400 	.word	0x40004400
 800311c:	40004800 	.word	0x40004800
 8003120:	40004c00 	.word	0x40004c00
 8003124:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003132:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 812a 	beq.w	8003390 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	4a9e      	ldr	r2, [pc, #632]	@ (80033bc <UART_SetConfig+0x590>)
 8003142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003146:	461a      	mov	r2, r3
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	fbb3 f3f2 	udiv	r3, r3, r2
 800314e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d305      	bcc.n	800316c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	429a      	cmp	r2, r3
 800316a:	d903      	bls.n	8003174 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003172:	e10d      	b.n	8003390 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	2200      	movs	r2, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	60fa      	str	r2, [r7, #12]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	4a8e      	ldr	r2, [pc, #568]	@ (80033bc <UART_SetConfig+0x590>)
 8003182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003186:	b29b      	uxth	r3, r3
 8003188:	2200      	movs	r2, #0
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003196:	f7fd f83f 	bl	8000218 <__aeabi_uldivmod>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	020b      	lsls	r3, r1, #8
 80031ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031b0:	0202      	lsls	r2, r0, #8
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	6849      	ldr	r1, [r1, #4]
 80031b6:	0849      	lsrs	r1, r1, #1
 80031b8:	2000      	movs	r0, #0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4605      	mov	r5, r0
 80031be:	eb12 0804 	adds.w	r8, r2, r4
 80031c2:	eb43 0905 	adc.w	r9, r3, r5
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	469a      	mov	sl, r3
 80031ce:	4693      	mov	fp, r2
 80031d0:	4652      	mov	r2, sl
 80031d2:	465b      	mov	r3, fp
 80031d4:	4640      	mov	r0, r8
 80031d6:	4649      	mov	r1, r9
 80031d8:	f7fd f81e 	bl	8000218 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ea:	d308      	bcc.n	80031fe <UART_SetConfig+0x3d2>
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f2:	d204      	bcs.n	80031fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	e0c8      	b.n	8003390 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003204:	e0c4      	b.n	8003390 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800320e:	d167      	bne.n	80032e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003210:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003214:	2b08      	cmp	r3, #8
 8003216:	d828      	bhi.n	800326a <UART_SetConfig+0x43e>
 8003218:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <UART_SetConfig+0x3f4>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003245 	.word	0x08003245
 8003224:	0800324d 	.word	0x0800324d
 8003228:	08003255 	.word	0x08003255
 800322c:	0800326b 	.word	0x0800326b
 8003230:	0800325b 	.word	0x0800325b
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800326b 	.word	0x0800326b
 800323c:	0800326b 	.word	0x0800326b
 8003240:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7fe ffea 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8003248:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800324a:	e014      	b.n	8003276 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7fe fffc 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 8003250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003252:	e010      	b.n	8003276 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b5a      	ldr	r3, [pc, #360]	@ (80033c0 <UART_SetConfig+0x594>)
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003258:	e00d      	b.n	8003276 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7fe ff71 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 800325e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003260:	e009      	b.n	8003276 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003268:	e005      	b.n	8003276 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8089 	beq.w	8003390 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	4a4e      	ldr	r2, [pc, #312]	@ (80033bc <UART_SetConfig+0x590>)
 8003284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003288:	461a      	mov	r2, r3
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003290:	005a      	lsls	r2, r3, #1
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	441a      	add	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d916      	bls.n	80032d8 <UART_SetConfig+0x4ac>
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b0:	d212      	bcs.n	80032d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f023 030f 	bic.w	r3, r3, #15
 80032ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	8bfb      	ldrh	r3, [r7, #30]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	8bfa      	ldrh	r2, [r7, #30]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e05b      	b.n	8003390 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032de:	e057      	b.n	8003390 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d828      	bhi.n	800333a <UART_SetConfig+0x50e>
 80032e8:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <UART_SetConfig+0x4c4>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003315 	.word	0x08003315
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	08003325 	.word	0x08003325
 80032fc:	0800333b 	.word	0x0800333b
 8003300:	0800332b 	.word	0x0800332b
 8003304:	0800333b 	.word	0x0800333b
 8003308:	0800333b 	.word	0x0800333b
 800330c:	0800333b 	.word	0x0800333b
 8003310:	08003333 	.word	0x08003333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7fe ff82 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8003318:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800331a:	e014      	b.n	8003346 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7fe ff94 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003322:	e010      	b.n	8003346 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <UART_SetConfig+0x594>)
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003328:	e00d      	b.n	8003346 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7fe ff09 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 800332e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003330:	e009      	b.n	8003346 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003338:	e005      	b.n	8003346 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003344:	bf00      	nop
    }

    if (pclk != 0U)
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d021      	beq.n	8003390 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	4a1a      	ldr	r2, [pc, #104]	@ (80033bc <UART_SetConfig+0x590>)
 8003352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003356:	461a      	mov	r2, r3
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	fbb3 f2f2 	udiv	r2, r3, r2
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	441a      	add	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d909      	bls.n	800338a <UART_SetConfig+0x55e>
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d205      	bcs.n	800338a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	b29a      	uxth	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	e002      	b.n	8003390 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2201      	movs	r2, #1
 8003394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2201      	movs	r2, #1
 800339c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2200      	movs	r2, #0
 80033a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80033ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3730      	adds	r7, #48	@ 0x30
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	0800419c 	.word	0x0800419c
 80033c0:	00f42400 	.word	0x00f42400

080033c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01a      	beq.n	80034da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034c2:	d10a      	bne.n	80034da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b098      	sub	sp, #96	@ 0x60
 800350c:	af02      	add	r7, sp, #8
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003518:	f7fd fb28 	bl	8000b6c <HAL_GetTick>
 800351c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d12f      	bne.n	800358c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	2200      	movs	r2, #0
 8003536:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f88e 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d022      	beq.n	800358c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800354e:	e853 3f00 	ldrex	r3, [r3]
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800355a:	653b      	str	r3, [r7, #80]	@ 0x50
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003564:	647b      	str	r3, [r7, #68]	@ 0x44
 8003566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800356a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e6      	bne.n	8003546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e063      	b.n	8003654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d149      	bne.n	800362e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	2200      	movs	r2, #0
 80035a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f857 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03c      	beq.n	800362e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	623b      	str	r3, [r7, #32]
   return(result);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e6      	bne.n	80035b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3308      	adds	r3, #8
 80035ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3308      	adds	r3, #8
 8003604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003606:	61fa      	str	r2, [r7, #28]
 8003608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	617b      	str	r3, [r7, #20]
   return(result);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e012      	b.n	8003654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3758      	adds	r7, #88	@ 0x58
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366c:	e04f      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d04b      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fd fa79 	bl	8000b6c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <UART_WaitOnFlagUntilTimeout+0x30>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e04e      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d037      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b80      	cmp	r3, #128	@ 0x80
 80036a2:	d034      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b40      	cmp	r3, #64	@ 0x40
 80036a8:	d031      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d110      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2208      	movs	r2, #8
 80036be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f920 	bl	8003906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2208      	movs	r2, #8
 80036ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e029      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e8:	d111      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f906 	bl	8003906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e00f      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d0a0      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b096      	sub	sp, #88	@ 0x58
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2222      	movs	r2, #34	@ 0x22
 8003760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02d      	beq.n	80037ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003774:	4a40      	ldr	r2, [pc, #256]	@ (8003878 <UART_Start_Receive_DMA+0x140>)
 8003776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800377e:	4a3f      	ldr	r2, [pc, #252]	@ (800387c <UART_Start_Receive_DMA+0x144>)
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003788:	4a3d      	ldr	r2, [pc, #244]	@ (8003880 <UART_Start_Receive_DMA+0x148>)
 800378a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003792:	2200      	movs	r2, #0
 8003794:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3324      	adds	r3, #36	@ 0x24
 80037a2:	4619      	mov	r1, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a8:	461a      	mov	r2, r3
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	f7fd fba2 	bl	8000ef4 <HAL_DMA_Start_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2210      	movs	r2, #16
 80037ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e051      	b.n	800386e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80037fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e6      	bne.n	80037d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	653b      	str	r3, [r7, #80]	@ 0x50
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3308      	adds	r3, #8
 8003822:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003824:	637a      	str	r2, [r7, #52]	@ 0x34
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800382a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e5      	bne.n	8003804 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	613b      	str	r3, [r7, #16]
   return(result);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800384e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3308      	adds	r3, #8
 8003856:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003858:	623a      	str	r2, [r7, #32]
 800385a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	69f9      	ldr	r1, [r7, #28]
 800385e:	6a3a      	ldr	r2, [r7, #32]
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	61bb      	str	r3, [r7, #24]
   return(result);
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e5      	bne.n	8003838 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3758      	adds	r7, #88	@ 0x58
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	080039d3 	.word	0x080039d3
 800387c:	08003aff 	.word	0x08003aff
 8003880:	08003b3d 	.word	0x08003b3d

08003884 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b08f      	sub	sp, #60	@ 0x3c
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	61fb      	str	r3, [r7, #28]
   return(result);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e6      	bne.n	800388c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3308      	adds	r3, #8
 80038c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3308      	adds	r3, #8
 80038dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038de:	61ba      	str	r2, [r7, #24]
 80038e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	613b      	str	r3, [r7, #16]
   return(result);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e5      	bne.n	80038be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80038fa:	bf00      	nop
 80038fc:	373c      	adds	r7, #60	@ 0x3c
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003906:	b480      	push	{r7}
 8003908:	b095      	sub	sp, #84	@ 0x54
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800392c:	643b      	str	r3, [r7, #64]	@ 0x40
 800392e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e6      	bne.n	800390e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800396a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e3      	bne.n	8003940 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d118      	bne.n	80039b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	60bb      	str	r3, [r7, #8]
   return(result);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f023 0310 	bic.w	r3, r3, #16
 8003994:	647b      	str	r3, [r7, #68]	@ 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	613b      	str	r3, [r7, #16]
   return(result);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e6      	bne.n	8003980 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80039c6:	bf00      	nop
 80039c8:	3754      	adds	r7, #84	@ 0x54
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b09c      	sub	sp, #112	@ 0x70
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d171      	bne.n	8003ad2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80039ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e6      	bne.n	80039f6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a48:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a72:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a92:	2220      	movs	r2, #32
 8003a94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d118      	bne.n	8003ad2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 0310 	bic.w	r3, r3, #16
 8003ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	617b      	str	r3, [r7, #20]
   return(result);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e6      	bne.n	8003aa0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003aea:	f000 fa93 	bl	8004014 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003aee:	e002      	b.n	8003af6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003af0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003af2:	f7ff f987 	bl	8002e04 <HAL_UART_RxCpltCallback>
}
 8003af6:	bf00      	nop
 8003af8:	3770      	adds	r7, #112	@ 0x70
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d109      	bne.n	8003b2e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fa74 	bl	8004014 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b2c:	e002      	b.n	8003b34 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff f972 	bl	8002e18 <HAL_UART_RxHalfCpltCallback>
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b50:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b64:	2b80      	cmp	r3, #128	@ 0x80
 8003b66:	d109      	bne.n	8003b7c <UART_DMAError+0x40>
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b21      	cmp	r3, #33	@ 0x21
 8003b6c:	d106      	bne.n	8003b7c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	f7ff fe84 	bl	8003884 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	d109      	bne.n	8003b9e <UART_DMAError+0x62>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b22      	cmp	r3, #34	@ 0x22
 8003b8e:	d106      	bne.n	8003b9e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8003b98:	6978      	ldr	r0, [r7, #20]
 8003b9a:	f7ff feb4 	bl	8003906 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba4:	f043 0210 	orr.w	r2, r3, #16
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bae:	6978      	ldr	r0, [r7, #20]
 8003bb0:	f000 fa7a 	bl	80040a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb4:	bf00      	nop
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fa68 	bl	80040a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6979      	ldr	r1, [r7, #20]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	613b      	str	r3, [r7, #16]
   return(result);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e6      	bne.n	8003be8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa19 	bl	8004060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2e:	bf00      	nop
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e027      	b.n	8003cd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	@ 0x24
 8003c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003cb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e02d      	b.n	8003d58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	@ 0x24
 8003d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8a3 	bl	8003e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e02d      	b.n	8003dd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	@ 0x24
 8003d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f865 	bl	8003e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	@ 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d142      	bne.n	8003e7a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03b      	b.n	8003e7c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff fc8e 	bl	8003738 <UART_Start_Receive_DMA>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d124      	bne.n	8003e74 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d11d      	bne.n	8003e6e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2210      	movs	r2, #16
 8003e38:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	617b      	str	r3, [r7, #20]
   return(result);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f043 0310 	orr.w	r3, r3, #16
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e6      	bne.n	8003e3a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8003e6c:	e002      	b.n	8003e74 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003e74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e78:	e000      	b.n	8003e7c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3730      	adds	r7, #48	@ 0x30
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ea4:	e031      	b.n	8003f0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	0e5b      	lsrs	r3, r3, #25
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	0f5b      	lsrs	r3, r3, #29
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ece:	7bbb      	ldrb	r3, [r7, #14]
 8003ed0:	7b3a      	ldrb	r2, [r7, #12]
 8003ed2:	4911      	ldr	r1, [pc, #68]	@ (8003f18 <UARTEx_SetNbDataToProcess+0x94>)
 8003ed4:	5c8a      	ldrb	r2, [r1, r2]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eda:	7b3a      	ldrb	r2, [r7, #12]
 8003edc:	490f      	ldr	r1, [pc, #60]	@ (8003f1c <UARTEx_SetNbDataToProcess+0x98>)
 8003ede:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ee0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	7b7a      	ldrb	r2, [r7, #13]
 8003ef0:	4909      	ldr	r1, [pc, #36]	@ (8003f18 <UARTEx_SetNbDataToProcess+0x94>)
 8003ef2:	5c8a      	ldrb	r2, [r1, r2]
 8003ef4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ef8:	7b7a      	ldrb	r2, [r7, #13]
 8003efa:	4908      	ldr	r1, [pc, #32]	@ (8003f1c <UARTEx_SetNbDataToProcess+0x98>)
 8003efc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003efe:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	080041b4 	.word	0x080041b4
 8003f1c:	080041bc 	.word	0x080041bc

08003f20 <_ZN14CircularBuffer5emptyEv>:
#include "CircularBuffer.h"

CircularBuffer::CircularBuffer() {}
CircularBuffer::~CircularBuffer() {}

void CircularBuffer::empty() {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
    head = 0;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
    tail = 0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	60da      	str	r2, [r3, #12]
    len  = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	605a      	str	r2, [r3, #4]
    memset(data, 0, size);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f103 0011 	add.w	r0, r3, #17
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	2100      	movs	r1, #0
 8003f48:	f000 f8e4 	bl	8004114 <memset>
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZN14CircularBuffer13updateIndicesEm>:
    return 1;
}

// Useful for DMA circular buffers.
uint8_t CircularBuffer::updateIndices(uint32_t newHeadIndex)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
    uint32_t readBytes = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
    if(newHeadIndex >= head) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d305      	bcc.n	8003f78 <_ZN14CircularBuffer13updateIndicesEm+0x24>
        readBytes = newHeadIndex - head;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e007      	b.n	8003f88 <_ZN14CircularBuffer13updateIndicesEm+0x34>
    }else {
        readBytes = newHeadIndex + size - head;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	441a      	add	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	60fb      	str	r3, [r7, #12]
    }

    // Is data being overwritten without being processed? 
    if((readBytes + len) > size) {
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d918      	bls.n	8003fca <_ZN14CircularBuffer13updateIndicesEm+0x76>
        // Update the tail index too.
        tail += readBytes - len;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68f9      	ldr	r1, [r7, #12]
 8003fa2:	1acb      	subs	r3, r1, r3
 8003fa4:	441a      	add	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60da      	str	r2, [r3, #12]
        tail %= size;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fb6:	fb01 f202 	mul.w	r2, r1, r2
 8003fba:	1a9a      	subs	r2, r3, r2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]
        len = size;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	e005      	b.n	8003fd6 <_ZN14CircularBuffer13updateIndicesEm+0x82>
    }else {
        len += readBytes;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	605a      	str	r2, [r3, #4]
    }

    head = newHeadIndex;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	609a      	str	r2, [r3, #8]

    return 1;
 8003fdc:	2301      	movs	r3, #1
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <_ZN4UART21attachDMAToSerialPortEv>:
        // The buffer has been sent!
        txSend = 0;
    }
}

void UART::attachDMAToSerialPort() {
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
    // This function takes the buffer directly as a circular one. It won't update the indices of the 
    // struct, so that will be left upon us. 
    HAL_UARTEx_ReceiveToIdle_DMA(hUART, RXBuffer.data, RXBuffer.size);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f103 0111 	add.w	r1, r3, #17
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	f7ff fee9 	bl	8003ddc <HAL_UARTEx_ReceiveToIdle_DMA>

    // // This disables an interruption that triggers when the buffer gets filled to its full size.
    // __HAL_DMA_DISABLE_IT(pstUART->rxDMA, DMA_IT_TC);
    // // This disables an interruption that triggers when the buffer gets filled to half its size.
    // __HAL_DMA_DISABLE_IT(pstUART->rxDMA, DMA_IT_HT);
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_UARTEx_RxEventCallback>:

/***************************************************************************************************
* This function is declared inside stm32l4xx_hal_uart.h for the user to define it. 
* This function gets called when a reception over a serial port has ended.
***************************************************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *hUART, uint16_t newHeadIndex) {   
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	807b      	strh	r3, [r7, #2]
    UART* referencedUART = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
    if(hUART == mcu->uart.hUART) {
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <HAL_UARTEx_RxEventCallback+0x48>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d102      	bne.n	8004038 <HAL_UARTEx_RxEventCallback+0x24>
        referencedUART = &mcu->uart;
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_UARTEx_RxEventCallback+0x48>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]
    } // Add more UART handlers if used.

    if(referencedUART != NULL) {
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_UARTEx_RxEventCallback+0x3e>
        referencedUART->RXBuffer.updateIndices(newHeadIndex);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff85 	bl	8003f54 <_ZN14CircularBuffer13updateIndicesEm>
        referencedUART->rxSend = 1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 24e5 	strb.w	r2, [r3, #1253]	@ 0x4e5
    }
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000180 	.word	0x20000180

08004060 <HAL_UART_TxCpltCallback>:

/***************************************************************************************************
* This function is declared inside stm32l4xx_hal_uart.h for the user to define it. 
* This function gets called when a transmission over a serial port has ended.
***************************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hUART) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    UART* referencedUART = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
    if(hUART == mcu->uart.hUART) {
 800406c:	4b0d      	ldr	r3, [pc, #52]	@ (80040a4 <HAL_UART_TxCpltCallback+0x44>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	d102      	bne.n	8004080 <HAL_UART_TxCpltCallback+0x20>
        referencedUART = &mcu->uart;
 800407a:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <HAL_UART_TxCpltCallback+0x44>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
    } // Add more UART handlers if used.

    if(referencedUART != NULL) {
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_UART_TxCpltCallback+0x3a>
        // Unlock the TX buffer.
        referencedUART->TXBuffer.locked = 0;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
        // The transmission doesn't use circular buffers, but we're using them so that we don't have
        // to implement a "simple buffer". To convert a circular buffer to simple buffer, just 
        // delete its content and restart the indices.
        referencedUART->TXBuffer.empty();
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff43 	bl	8003f20 <_ZN14CircularBuffer5emptyEv>
    }
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000180 	.word	0x20000180

080040a8 <HAL_UART_ErrorCallback>:

/***************************************************************************************************
* This function is declared inside stm32l4xx_hal_uart.h for the user to define it. 
* This function gets called when an UART fails.
***************************************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef* hUART) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    UART* referencedUART = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
    if(hUART == mcu->uart.hUART) {
 80040b4:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <HAL_UART_ErrorCallback+0x68>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d102      	bne.n	80040c8 <HAL_UART_ErrorCallback+0x20>
        referencedUART = &mcu->uart;
 80040c2:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <HAL_UART_ErrorCallback+0x68>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
    } // Add more UART handlers if used.

    if(referencedUART != NULL) {
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01b      	beq.n	8004106 <HAL_UART_ErrorCallback+0x5e>
        referencedUART->TXBuffer.empty();
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff23 	bl	8003f20 <_ZN14CircularBuffer5emptyEv>
        referencedUART->TXBuffer.locked = 0;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
        referencedUART->txSend = 0;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 24e4 	strb.w	r2, [r3, #1252]	@ 0x4e4

        referencedUART->RXBuffer.empty();
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff17 	bl	8003f20 <_ZN14CircularBuffer5emptyEv>
        referencedUART->RXBuffer.locked = 0;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	741a      	strb	r2, [r3, #16]
        referencedUART->rxSend = 0;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 24e5 	strb.w	r2, [r3, #1253]	@ 0x4e5

        referencedUART->attachDMAToSerialPort();
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff ff72 	bl	8003fea <_ZN4UART21attachDMAToSerialPortEv>
    }
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000180 	.word	0x20000180

08004114 <memset>:
 8004114:	4402      	add	r2, r0
 8004116:	4603      	mov	r3, r0
 8004118:	4293      	cmp	r3, r2
 800411a:	d100      	bne.n	800411e <memset+0xa>
 800411c:	4770      	bx	lr
 800411e:	f803 1b01 	strb.w	r1, [r3], #1
 8004122:	e7f9      	b.n	8004118 <memset+0x4>

08004124 <__libc_init_array>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	4d0d      	ldr	r5, [pc, #52]	@ (800415c <__libc_init_array+0x38>)
 8004128:	4c0d      	ldr	r4, [pc, #52]	@ (8004160 <__libc_init_array+0x3c>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	2600      	movs	r6, #0
 8004130:	42a6      	cmp	r6, r4
 8004132:	d109      	bne.n	8004148 <__libc_init_array+0x24>
 8004134:	4d0b      	ldr	r5, [pc, #44]	@ (8004164 <__libc_init_array+0x40>)
 8004136:	4c0c      	ldr	r4, [pc, #48]	@ (8004168 <__libc_init_array+0x44>)
 8004138:	f000 f818 	bl	800416c <_init>
 800413c:	1b64      	subs	r4, r4, r5
 800413e:	10a4      	asrs	r4, r4, #2
 8004140:	2600      	movs	r6, #0
 8004142:	42a6      	cmp	r6, r4
 8004144:	d105      	bne.n	8004152 <__libc_init_array+0x2e>
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	f855 3b04 	ldr.w	r3, [r5], #4
 800414c:	4798      	blx	r3
 800414e:	3601      	adds	r6, #1
 8004150:	e7ee      	b.n	8004130 <__libc_init_array+0xc>
 8004152:	f855 3b04 	ldr.w	r3, [r5], #4
 8004156:	4798      	blx	r3
 8004158:	3601      	adds	r6, #1
 800415a:	e7f2      	b.n	8004142 <__libc_init_array+0x1e>
 800415c:	080041cc 	.word	0x080041cc
 8004160:	080041cc 	.word	0x080041cc
 8004164:	080041cc 	.word	0x080041cc
 8004168:	080041d0 	.word	0x080041d0

0800416c <_init>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr

08004178 <_fini>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	bf00      	nop
 800417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417e:	bc08      	pop	{r3}
 8004180:	469e      	mov	lr, r3
 8004182:	4770      	bx	lr
